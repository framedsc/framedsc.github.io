{"version":3,"sources":["api/request.js","utils/utils.js","components/ImageGrid.jsx","components/ImageNav.jsx","components/ImageViewer.jsx","pages/ImageGridContainer.jsx","App.js","reportWebVitals.js","index.js"],"names":["axios","require","getWindowDimensions","container","maxWidth","clientWidth","ImageGrid","className","images","rowTargetHeight","borderOffset","onClick","useState","windowDimensions","setWindowDimensions","useEffect","handleResize","window","addEventListener","removeEventListener","useWindowDimensions","makeSmaller","image","amount","newHeight","height","width","getCumulativeWidth","i","length","buildRows","currentRow","currentWidth","imageCounter","rows","processedImages","parseInt","id","author","authorsAvatarUrl","date","gameName","score","shotUrl","thumbnailUrl","push","processImages","normalizeImages","fitImagesInRow","difference","amountOfImages","addToEach","n","map","row","index","imageIndex","src","style","marginRight","marginBottom","Math","ceil","cursor","renderGrid","buildGrid","ImageNav","filters","updateFilter","updateType","updateSearch","active","setActive","type","setType","searchTerm","setSearchTerm","item","buttonClass","value","undefined","classNames","selection","label","onChange","checked","name","htmlFor","placeholder","event","target","ImageViewer","show","onClose","visibleClass","stopPropagation","ImageGridContainer","data","imageData","setImageData","filterIndex","setFilterIndex","showViewer","setShowViewer","viewerSrc","setViewerSrc","setViewerIndex","key","filterImages","results","sort","a","b","slice","filter","obj","Object","keys","reduce","acc","curr","toString","toLowerCase","includes","searchData","document","querySelector","margin","keyword","findIndex","element","App","setData","initialized","setInitialized","getNewImages","get","response","entries","_default","shots","forEach","shotData","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"2PACMA,G,MAAQC,EAAQ,KCCtB,SAASC,EAAoBC,GAG3B,MAAO,CACLC,SAHeD,EAAUE,aCD7B,IA+KeC,EA/KG,SAAC,GAOR,IANHC,EAME,EANFA,UACAC,EAKE,EALFA,OAKE,IAJFC,uBAIE,MAJgB,IAIhB,MAHFC,oBAGE,MAHa,EAGb,EAFFP,EAEE,EAFFA,UACAQ,EACE,EADFA,QAGEP,EDDK,SAA6BD,GAAY,IAAD,EACLS,mBAASV,EAAoBC,IADxB,mBAC9CU,EAD8C,KAC5BC,EAD4B,KAYrD,OATAC,qBAAU,WACR,SAASC,IACPF,EAAoBZ,EAAoBC,IAI1C,OADAc,OAAOC,iBAAiB,SAAUF,GAC3B,kBAAMC,OAAOE,oBAAoB,SAAUH,MACjD,IAEIH,ECXcO,CAAoBjB,GAAjCC,SA+BAiB,EAAc,SAACC,EAAOC,GACxBA,EAASA,GAAU,EAEnB,IAAMC,EAAYF,EAAMG,OAASF,EAKjC,OAJAD,EAAMI,MAASJ,EAAMI,OAASF,EAAYF,EAAMG,QAChDH,EAAMG,OAASD,EAGRF,GAGLK,EAAqB,SAACnB,GAGxB,IAFA,IAAIkB,EAAQ,EAEJE,EAAI,EAAGA,EAAIpB,EAAOqB,OAAQD,IAC9BF,GAASlB,EAAOoB,GAAGF,MAKvB,OAFAA,IAAUlB,EAAOqB,OAAO,GAAKnB,GAK3BoB,EAAY,WAOd,IANA,IAAIC,EAAa,EACbC,EAAe,EACfC,EAAe,EACbC,EAAO,GACPC,EAzDY,WAGlB,IAFA,IAAMA,EAAkB,GAEfP,EAAI,EAAGA,EAAIpB,EAAOqB,OAAQD,IAAK,CACpC,IAAIF,EAAQU,SAAS5B,EAAOoB,GAAGF,OACzBD,EAASW,SAAS5B,EAAOoB,GAAGH,QAClCC,GAAiBjB,EAAkBgB,EAEnC,IAAMH,EAAQ,CACV,GAAMd,EAAOoB,GAAGS,GAChB,OAAU7B,EAAOoB,GAAGU,OACpB,iBAAoB9B,EAAOoB,GAAGW,iBAC9B,KAAQ/B,EAAOoB,GAAGY,KAClB,SAAYhC,EAAOoB,GAAGa,SACtB,MAASjC,EAAOoB,GAAGc,MACnB,UAAalC,EAAOoB,GAAGF,MACvB,WAAclB,EAAOoB,GAAGH,OACxB,QAAWjB,EAAOoB,GAAGe,QACrB,aAAgBnC,EAAOoB,GAAGgB,aAC1B,MAASlB,EACT,OAAUjB,GAGd0B,EAAgBU,KAAKvB,GAGzB,OAAOa,EA+BiBW,GAElBX,EAAgBF,IACfD,GAAgB5B,IACf2B,IACAC,EAAe,GAEfE,EAAKH,KACLG,EAAKH,GAAc,IAGvBG,EAAKH,GAAYc,KAAKV,EAAgBF,IACtCD,GAAgBG,EAAgBF,GAAcP,MAE9CO,IAGJ,OAAOC,GAULa,EAAkB,SAACvC,GACrB,IAAI,IAAIoB,EAAI,EAAGA,EAAIpB,EAAOqB,OAAQD,KARdN,EASDd,EAAOoB,IARpBF,MAASU,SAASd,EAAMI,OAC9BJ,EAAMG,OAASW,SAASd,EAAMG,QAFX,IAACH,EAYpB,OAAOd,GAGLwC,EAAiB,SAACxC,GACpB,KAAMmB,EAAmBnB,GAAUJ,GAC/B,IAAI,IAAIwB,EAAI,EAAGA,EAAIpB,EAAOqB,OAAQD,IAC9BpB,EAAOoB,GAAKP,EAAYb,EAAOoB,IAIvC,OAAOpB,GA8DX,OA3BkB,WAGd,IAFA,IAAM0B,EAAOJ,IAELF,EAAI,EAAGA,EAAIM,EAAKL,OAAQD,IAAK,CACjCM,EAAKN,GAAKoB,EAAed,EAAKN,IAE9BM,EAAKN,GAAKmB,EAAgBb,EAAKN,IAE/B,IAAMqB,EAAc7C,EAAWuB,EAAmBO,EAAKN,IACjDsB,EAAiBhB,EAAKN,GAAGC,OAE/B,GAAGqB,EAAiB,GAAKD,EAAa,GAAI,CAEtC,IADA,IAAME,EAAYF,EAAaC,EACvBE,EAAI,EAAGA,EAAIlB,EAAKN,GAAGC,OAAQuB,IAC/BlB,EAAKN,GAAGwB,GAAG1B,OAASyB,EAGxBjB,EAAKN,GAAKmB,EAAgBb,EAAKN,IAG/BM,EAAKN,GAAGM,EAAKN,GAAGC,OAAO,GAAGH,OAAUtB,EAAWuB,EAAmBO,EAAKN,KAI/E,OAxDe,SAACM,GAChB,OACA,qBAAK3B,UAAWA,EAAhB,SACK2B,EAAKmB,KAAI,SAACC,EAAKC,GACZ,OACI,qBAEIhD,UAAU,YAFd,SAIK+C,EAAID,KAAI,SAAC/B,EAAOkC,GACb,OACI,qBAEIC,IAAKnC,EAAMsB,aACXc,MAAO,CACHC,YAAajD,EACbkD,aAAclD,EACdgB,MAAOmC,KAAKC,KAAKxC,EAAMI,OACvBD,OAAOH,EAAMG,OACbsC,OAAQ,WAEZpD,QAAS,kBAAMA,EAAQW,EAAOkC,KATzBA,OANZD,QAkDdS,CAAW9B,GAGf+B,I,gBCnGIC,EAxEE,SAAC,GAAuD,IAAtDC,EAAqD,EAArDA,QAASC,EAA4C,EAA5CA,aAAcC,EAA8B,EAA9BA,WAAYC,EAAkB,EAAlBA,aAAkB,EACxC1D,mBAAS,GAD+B,mBAC7D2D,EAD6D,KACrDC,EADqD,OAE5C5D,mBAAS,OAFmC,mBAE7D6D,EAF6D,KAEvDC,EAFuD,OAGhC9D,mBAAS,IAHuB,mBAG7D+D,EAH6D,KAGjDC,EAHiD,KAsBpE,OACI,sBAAKrE,UAAU,YAAf,UACI,oBAAIA,UAAU,UAAd,SACC4D,EAAQd,KAAI,SAAAwB,GACT,IAAMC,EAAcP,IAAWM,EAAKE,MAAQ,iBAAcC,EAE1D,OACI,6BACI,wBACAzE,UAAW0E,IAAW,SAAUH,GAC5BnE,QAAS,kBA1B7B6D,GADwBU,EA2B8BL,GA1BlCE,YACpBX,EAAac,GAFU,IAACA,GAyBR,SAKCL,EAAKM,OAFGN,EAAKM,cAQ1B,qBAAK5E,UAAU,cAAf,SArBM,CAAC,MAAO,OAAQ,YAsBX8C,KAAI,SAAAwB,GACP,OACI,qCACI,uBACIxC,GAAE,UAAKwC,EAAL,UACFO,SAAU,kBApClCV,EADsBK,EAqCkCF,QAnCxDR,EAAWU,GAFU,IAACA,GAsCEM,QAASZ,IAAOI,EAChBJ,KAAK,QACLM,MAAOF,EACPS,KAAK,QACAT,GARb,IASO,uBAAOU,QAAO,UAAKV,EAAL,UAAd,SAAkCA,YAKrD,qBAAKtE,UAAU,SAAf,SACA,uBACIkE,KAAK,SACLa,KAAK,SACL/E,UAAU,eACViF,YAAa,SACbT,MAAOJ,EACPS,SAlDe,SAAAK,GACvBb,EAAca,EAAMC,OAAOX,OAC3BT,EAAamB,EAAMC,OAAOX,gBCMnBY,EAvBK,SAAC,GAAiC,IAAD,IAA/BrE,aAA+B,MAAvB,GAAuB,EAAnBsE,EAAmB,EAAnBA,KAAMC,EAAa,EAAbA,QAE9BC,EAAeF,EAAO,kBAAeZ,EAE3C,OACI,qBAAKzE,UAAW0E,IAAW,eAAgBa,GAAenF,QAASkF,EAAnE,SACI,sBAAKtF,UAAU,uBAAf,UACKe,GACG,qCACI,qBAAKmC,IAAKnC,EAAMqB,QAAShC,QAAS,SAAC8E,GAAWA,EAAMM,qBACpD,sBAAKxF,UAAU,SAASI,QAAS,SAAC8E,GAAWA,EAAMM,mBAAnD,UAEI,gCAAK,sCAAL,IAAqB,iCAASzE,EAAMgB,YACpC,qBAAK/B,UAAU,QAAf,SAAwBe,EAAMmB,iBAI1C,wBAAQlC,UAAU,QAAQI,QAASkF,UCwGpCG,EAtHY,SAAC,GAAY,IAAXC,EAAU,EAAVA,KAAU,EACDrF,mBAAS,IADR,mBAC5BsF,EAD4B,KACjBC,EADiB,OAEGvF,mBAAS,GAFZ,mBAE5BwF,EAF4B,KAEfC,EAFe,OAGXzF,mBAAS,OAHE,mBAG5B6D,EAH4B,KAGtBC,EAHsB,OAIC9D,mBAAS,IAJV,mBAI5B+D,EAJ4B,KAIhBC,EAJgB,OAKChE,oBAAS,GALV,mBAK5B0F,EAL4B,KAKhBC,EALgB,OAMD3F,mBAAS,IANR,mBAM5B4F,EAN4B,KAMjBC,EANiB,OAOG7F,mBAAS,GAPZ,mBAOf8F,GAPe,WAS7BvC,EAAU,CACZ,CACIgB,MAAO,OACPJ,MAAO,GAEX,CACII,MAAO,SACPJ,MAAO,EACP4B,IAAK,SAET,CACIxB,MAAO,YACPJ,MAAO,EACP4B,IAAK,SA2CPC,EAAe,SAACpG,GAClB,IAAIqG,EAEEF,EAAMxC,EAAQiC,GAAaO,IAkBjC,OAbIE,EADgB,IAAhBT,EACU5F,EAEAA,EAAOsG,MANF,SAACC,EAAEC,GAAH,OAAUD,EAAEJ,GAAOK,EAAEL,GAAQ,EAAMK,EAAEL,GAAOI,EAAEJ,IAAS,EAAI,KAMxCM,MAAM,EAAG,IAGlC,SAATxC,EACAoC,EAAUA,EAAQK,QAAO,SAAArC,GAAI,OAAIA,EAAKnD,OAASmD,EAAKpD,UACpC,aAATgD,IACPoC,EAAUA,EAAQK,QAAO,SAAArC,GAAI,OAAIA,EAAKnD,OAASmD,EAAKpD,WA9BzC,SAACwE,GAChB,OAAc,OAAVtB,QAAU,IAAVA,OAAA,EAAAA,EAAY9C,QAAS,EACdoE,EAGKA,EAAKiB,QAAO,SAACC,GACzB,OAAOC,OAAOC,KAAKF,GAAKG,QAAO,SAACC,EAAKC,GACjC,OAAOD,GAAOJ,EAAIK,GAAMC,WAAWC,cAAcC,SAAShD,MAC3D,MA2BAiD,CAAWf,IAGtB9F,qBAAU,WACN,GAAIkF,EAAKpE,OAAQ,CACb,IAAMrB,EAASoG,EAAaX,EAAKgB,SAEjCd,EAAa3F,MAElB,CAACyF,EAAMG,EAAa3B,EAAME,IAE7B,IAAMxE,EAAY0H,SAASC,cAAc,eAEzC,OACI,sBAAKpE,MAAO,CAAEqE,OAAQ,UAAWxH,UAAU,OAA3C,UACI,cAAC,EAAD,CACI4D,QAASA,EACTC,aA7Ee,SAAC8C,GACxBb,EAAea,EAAOnC,QA6EdV,WA1Ea,SAACI,GACtBC,EAAQD,IA0EAH,aAvEe,SAAC0D,GACxBpD,EAAcoD,MAwET9B,GAAa/F,GACV,cAAC,EAAD,CAAWK,OAAQ0F,EAAWzF,gBAAiB,IAAKN,UAAWA,EAAWQ,QAtE7D,SAACW,GACtB,IACMiC,EAAQ2C,EAAU+B,WADH,SAACC,GAAD,OAAaA,EAAQ7F,KAAOf,EAAMe,MAGvDoE,EAAanF,GACbiF,GAAc,GACdG,EAAenD,MAkEX,cAAC,EAAD,CACIjC,MAAOkF,EACPZ,KAAMU,EACNT,QAlEQ,WAChBU,GAAc,UChBP4B,MAjCf,WAAgB,IAAD,EACWvH,mBAAS,IADpB,mBACNqF,EADM,KACAmC,EADA,OAEyBxH,oBAAS,GAFlC,mBAENyH,EAFM,KAEOC,EAFP,KAIPC,EAAY,uCAAG,gCAAAxB,EAAA,6DACnBuB,GAAe,GADI,SNLQtI,EAAMwI,IAAN,UAJhB,6FMSQ,OAEbC,EAFa,OAGbC,EAAUtB,OAAOsB,QAAQD,EAASxC,KAAK0C,UACvCC,EAAQ,GAEdF,EAAQG,SAAQ,SAAChE,GAEb,IAAMxC,EAAKwC,EAAK,GACViE,EAAWjE,EAAK,GACtB+D,EAAM/F,KAAN,aAAaR,MAAOyG,OAGxBV,EAAQQ,GAbW,2CAAH,qDAsBlB,OANA7H,qBAAU,WACDsH,GACDE,OAKN,qBAAKhI,UAAU,aAAf,SACG0F,GAAS,cAAC,EAAD,CAAoBA,KAAMA,OCrB3B8C,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF7B,SAAS8B,eAAe,SAM1BZ,M","file":"static/js/main.3f28ed78.chunk.js","sourcesContent":["const APIURL = 'https://raw.githubusercontent.com/originalnicodrgitbot/test-git-python/main/shotsdb.json';\r\nconst axios = require('axios');\r\n\r\n\r\nexport const getImages = () => axios.get(`${APIURL}`);","import { useState, useEffect } from 'react';\n\nfunction getWindowDimensions(container) {\n  const maxWidth = container.clientWidth;\n  \n  return {\n    maxWidth\n  };\n}\n\nexport default function useWindowDimensions(container) {\n  const [windowDimensions, setWindowDimensions] = useState(getWindowDimensions(container));\n\n  useEffect(() => {\n    function handleResize() {\n      setWindowDimensions(getWindowDimensions(container));\n    }\n\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, []);\n\n  return windowDimensions;\n}","import useWindowDimensions from '../utils/utils';\r\n\r\nconst ImageGrid = ({\r\n        className, \r\n        images, \r\n        rowTargetHeight = 400, \r\n        borderOffset = 5, \r\n        container,\r\n        onClick\r\n    }) => {\r\n\r\n    let { maxWidth } = useWindowDimensions(container);\r\n\r\n    const processImages = () => {\r\n        const processedImages = [];\r\n\r\n        for (let i = 0; i < images.length; i++) {\r\n            let width = parseInt(images[i].width);\r\n            const height = parseInt(images[i].height);\r\n            width = width * (rowTargetHeight / height); \r\n\r\n            const image = {\r\n                'id': images[i].id,\r\n                'author': images[i].author,\r\n                'authorsAvatarUrl': images[i].authorsAvatarUrl,\r\n                'data': images[i].date,\r\n                'gameName': images[i].gameName,\r\n                'score': images[i].score,\r\n                'fullWidth': images[i].width,\r\n                'fullHeight': images[i].height,\r\n                'shotUrl': images[i].shotUrl,\r\n                'thumbnailUrl': images[i].thumbnailUrl,\r\n                'width': width,\r\n                'height': rowTargetHeight,\r\n            }\r\n\r\n            processedImages.push(image);\r\n        }\r\n\r\n        return processedImages;\r\n    }\r\n\r\n    const makeSmaller = (image, amount) => {\r\n        amount = amount || 1;\r\n\r\n        const newHeight = image.height - amount;\r\n        image.width = (image.width * (newHeight / image.height));\r\n        image.height = newHeight;\r\n\r\n\r\n        return image;\r\n    };\r\n\r\n    const getCumulativeWidth = (images) => {\r\n        let width = 0;\r\n\r\n        for(let i = 0; i < images.length; i++) {\r\n            width += images[i].width;\r\n        }\r\n\r\n        width += (images.length-1) * borderOffset;\r\n\r\n        return width;\r\n    };\r\n\r\n    const buildRows = () => {\r\n        let currentRow = 0;\r\n        let currentWidth = 0;\r\n        let imageCounter = 0;\r\n        const rows = [];\r\n        const processedImages = processImages();\r\n\r\n        while(processedImages[imageCounter]) {\r\n            if(currentWidth >= maxWidth) {\r\n                currentRow++;\r\n                currentWidth = 0;\r\n            }\r\n            if(!rows[currentRow]) {\r\n                rows[currentRow] = [];\r\n            }\r\n\r\n            rows[currentRow].push(processedImages[imageCounter]);\r\n            currentWidth += processedImages[imageCounter].width;\r\n\r\n            imageCounter++;\r\n        };\r\n\r\n        return rows;\r\n    }\r\n\r\n    const normalizeImage = (image) => {\r\n        image.width =  parseInt(image.width);\r\n        image.height = parseInt(image.height);\r\n\r\n        return image;\r\n    };\r\n\r\n    const normalizeImages = (images) => {\r\n        for(let i = 0; i < images.length; i++) {\r\n            normalizeImage(images[i]);\r\n        }\r\n\r\n        return images;\r\n    };\r\n\r\n    const fitImagesInRow = (images) => {\r\n        while(getCumulativeWidth(images) > maxWidth) {\r\n            for(let i = 0; i < images.length; i++) {\r\n                images[i] = makeSmaller(images[i]);\r\n            }\r\n        };\r\n\r\n        return images;\r\n    }\r\n\r\n    const renderGrid = (rows) => {\r\n        return (\r\n        <div className={className}>\r\n            {rows.map((row, index) => {\r\n                return (\r\n                    <div \r\n                        key={index} \r\n                        className=\"image-row\" \r\n                    >\r\n                        {row.map((image, imageIndex) => {\r\n                            return (\r\n                                <img \r\n                                    key={imageIndex} \r\n                                    src={image.thumbnailUrl} \r\n                                    style={{\r\n                                        marginRight: borderOffset,\r\n                                        marginBottom: borderOffset,\r\n                                        width: Math.ceil(image.width), \r\n                                        height:image.height,\r\n                                        cursor: 'pointer'\r\n                                    }}\r\n                                    onClick={() => onClick(image, imageIndex)} \r\n                                />\r\n                            )\r\n                        })}\r\n                    </div>\r\n                )\r\n            })}\r\n        </div>\r\n        );\r\n    };\r\n\r\n    const buildGrid = () => {\r\n        const rows = buildRows();\r\n\r\n        for(let i = 0; i < rows.length; i++) {\r\n            rows[i] = fitImagesInRow(rows[i]);\r\n\r\n            rows[i] = normalizeImages(rows[i]);\r\n\r\n            const difference = (maxWidth - getCumulativeWidth(rows[i]));\r\n            const amountOfImages = rows[i].length;\r\n\r\n            if(amountOfImages > 1 && difference < 10) {\r\n                const addToEach = difference / amountOfImages;\r\n                for(let n = 0; n < rows[i].length; n++) {\r\n                    rows[i][n].width += addToEach;\r\n                }\r\n\r\n                rows[i] = normalizeImages(rows[i]);\r\n\r\n\r\n                rows[i][rows[i].length-1].width += (maxWidth - getCumulativeWidth(rows[i]));\r\n            }\r\n        }\r\n\r\n        return renderGrid(rows)\r\n    }\r\n\r\n    return buildGrid();\r\n}\r\n\r\nexport default ImageGrid;","import React, { useState } from 'react';\r\nimport classNames from 'classnames';\r\n\r\nconst ImageNav = ({filters, updateFilter, updateType, updateSearch}) => {\r\n    const [active, setActive] = useState(0);\r\n    const [type, setType] = useState('All')\r\n    const [searchTerm, setSearchTerm] = useState('');\r\n\r\n    const handleFilterChange = (selection) => {\r\n        setActive(selection.value);\r\n        updateFilter(selection);\r\n    }\r\n\r\n    const handleTypeChange = (value) => {\r\n        setType(value);\r\n        updateType(value);\r\n    }\r\n\r\n    const handleSearchChange = event => {\r\n        setSearchTerm(event.target.value);\r\n        updateSearch(event.target.value);\r\n      };\r\n\r\n    const types = ['All', 'Wide', 'Portrait'];\r\n\r\n    return (\r\n        <div className=\"image-nav\">\r\n            <ul className=\"filters\">\r\n            {filters.map(item => {\r\n                const buttonClass = active === item.value ? 'is-active' : undefined;\r\n\r\n                return (\r\n                    <li>\r\n                        <button\r\n                        className={classNames('filter', buttonClass)}\r\n                            onClick={() => handleFilterChange(item)}\r\n                            key={item.label}\r\n                        >\r\n                        {item.label}\r\n                        </button>\r\n                    </li>\r\n                );\r\n            })}\r\n            </ul>\r\n            <div className=\"image-types\">\r\n                {types.map(item => {\r\n                    return(\r\n                        <>\r\n                            <input \r\n                                id={`${item}-label`}\r\n                                onChange={()=> handleTypeChange(item)}\r\n                                checked={type===item} \r\n                                type=\"radio\" \r\n                                value={item} \r\n                                name=\"type\" \r\n                                key={item}\r\n                            /> <label htmlFor={`${item}-label`}>{item}</label>\r\n                        </>\r\n                    )\r\n                })}\r\n            </div>\r\n            <div className=\"search\">\r\n            <input\r\n                type=\"search\"\r\n                name=\"search\"\r\n                className=\"search-input\"\r\n                placeholder={'Search'}\r\n                value={searchTerm}\r\n                onChange={handleSearchChange}\r\n            />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ImageNav;","import React, {useState} from 'react';\r\nimport classNames from 'classnames';\r\n\r\nconst ImageViewer = ({image = {}, show, onClose}) => {\r\n\r\n    const visibleClass = show ? 'is-visible' : undefined;\r\n\r\n    return (\r\n        <div className={classNames('image-viewer', visibleClass)} onClick={onClose}> \r\n            <div className=\"image-viewer-content\">\r\n                {image && (\r\n                    <>\r\n                        <img src={image.shotUrl} onClick={(event) => {event.stopPropagation();}}/>\r\n                        <div className=\"author\" onClick={(event) => {event.stopPropagation();}}>\r\n                            {/* <img src={image.authorsAvatarUrl} alt=\"avatar\" /> */}\r\n                            <div><span>by</span> <strong>{image.author}</strong></div>\r\n                            <div className=\"title\">{image.gameName}</div>\r\n                        </div>\r\n                    </>\r\n                )}\r\n                <button className=\"close\" onClick={onClose}></button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ImageViewer;","import React, { useState, useEffect } from 'react';\r\n\r\nimport ImageGrid from '../components/ImageGrid';\r\nimport ImageNav from '../components/ImageNav';\r\nimport ImageViewer from '../components/ImageViewer';\r\n\r\nconst ImageGridContainer = ({data}) => {\r\n    const [imageData, setImageData] = useState([]);\r\n    const [filterIndex, setFilterIndex] = useState(0);\r\n    const [type, setType] = useState('all');\r\n    const [searchTerm, setSearchTerm] = useState('');\r\n    const [showViewer, setShowViewer] = useState(false);\r\n    const [viewerSrc, setViewerSrc] = useState({})\r\n    const [viewerIndex, setViewerIndex] = useState(0);\r\n\r\n    const filters = [\r\n        {\r\n            label: 'Home',\r\n            value: 0    \r\n        },\r\n        {\r\n            label: 'Top 50',\r\n            value: 1,\r\n            key: 'score'\r\n        },\r\n        {\r\n            label: 'Latest 50',\r\n            value: 2,\r\n            key: 'date'\r\n        }\r\n    ]\r\n\r\n    const handleFilterChange = (filter) => {\r\n        setFilterIndex(filter.value);\r\n    }\r\n\r\n    const handleTypeChange = (type) => {\r\n        setType(type);\r\n    }\r\n\r\n    const handleSearchChange = (keyword) => {\r\n        setSearchTerm(keyword)\r\n    }\r\n\r\n    const handleImageClick = (image) => {\r\n        const matchesIndex = (element) => element.id === image.id;\r\n        const index = imageData.findIndex(matchesIndex)\r\n\r\n        setViewerSrc(image);\r\n        setShowViewer(true);\r\n        setViewerIndex(index);\r\n    }\r\n\r\n    const handleClose = () => {\r\n        setShowViewer(false);\r\n    }\r\n\r\n    const searchData = (data) => {\r\n        if (searchTerm?.length < 3) {\r\n            return data;\r\n        }\r\n\r\n        const results = data.filter((obj) => {\r\n            return Object.keys(obj).reduce((acc, curr) => {\r\n                return acc || obj[curr].toString().toLowerCase().includes(searchTerm);\r\n            }, false);\r\n        });\r\n\r\n        return results;\r\n    }\r\n\r\n    const filterImages = (images) => {\r\n        let results;\r\n\r\n        const key = filters[filterIndex].key;\r\n        const sortMethod = (a,b) => (a[key] < b[key]) ? 1 : ((b[key] < a[key]) ? -1 : 0)\r\n\r\n        // apply filters\r\n        if (filterIndex === 0) {\r\n            results = images;\r\n        } else {\r\n            results = images.sort(sortMethod).slice(0, 50);\r\n        } \r\n\r\n        if (type === 'Wide') {\r\n            results = results.filter(item => item.width >= item.height);\r\n        } else if (type === 'Portrait') {\r\n            results = results.filter(item => item.width <= item.height);\r\n        }\r\n\r\n        // apply search\r\n\r\n        return searchData(results);\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (data.length) {\r\n            const images = filterImages(data.slice());\r\n\r\n            setImageData(images)\r\n        }\r\n    }, [data, filterIndex, type, searchTerm])\r\n\r\n    const container = document.querySelector('.image-grid');\r\n\r\n    return (\r\n        <div style={{ margin: '0 auto'}} className=\"home\">\r\n            <ImageNav \r\n                filters={filters}\r\n                updateFilter={handleFilterChange} \r\n                updateType={handleTypeChange}\r\n                updateSearch={handleSearchChange}\r\n            />\r\n            {imageData && container && (\r\n                <ImageGrid images={imageData} rowTargetHeight={300} container={container} onClick={handleImageClick}/>\r\n            )}\r\n            <ImageViewer \r\n                image={viewerSrc} \r\n                show={showViewer} \r\n                onClose={handleClose} \r\n            />\r\n        </div>\r\n    );\r\n}\r\nexport default ImageGridContainer;","import './App.css';\nimport React, { useState, useEffect } from 'react';\nimport { getImages } from './api/request'\nimport ImageGridContainer from '../src/pages/ImageGridContainer'\n\nfunction App() {\n  const [data, setData] = useState([]);\n  const [initialized, setInitialized] = useState(false);\n\n  const getNewImages = async () => {\n    setInitialized(true);\n    const response = await getImages({});\n    const entries = Object.entries(response.data._default);\n    const shots = [];\n    \n    entries.forEach((item) => \n    { \n        const id = item[0];\n        const shotData = item[1];\n        shots.push({ id, ...shotData });\n    });\n\n    setData(shots);\n  }\n\n  useEffect(() => {\n      if (!initialized) {\n          getNewImages();\n      }\n  })\n\n  return (\n    <div className=\"image-grid\">\n      {data && (<ImageGridContainer data={data}/>)}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}