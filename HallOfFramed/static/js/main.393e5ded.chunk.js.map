{"version":3,"sources":["api/request.js","utils/utils.js","components/ImageGrid.jsx","assets/svgIcons.jsx","components/ImageNav.jsx","components/Spinner/Spinner.jsx","components/ImageViewer.jsx","pages/ImageGridContainer.jsx","App.js","reportWebVitals.js","index.js"],"names":["axios","require","useViewport","useState","window","innerWidth","width","setWidth","useEffect","handleWindowResize","addEventListener","removeEventListener","breakpoints","getBrowserFullscreenElementProp","document","fullscreenElement","mozFullScreenElement","msFullscreenElement","webkitFullscreenElement","Error","ImageGrid","className","images","rowTargetHeight","borderOffset","onClick","outerPadding","maxWidth","makeSmaller","image","amount","newHeight","height","getCumulativeWidth","i","length","buildRows","currentRow","currentWidth","imageCounter","rows","processedImages","parseInt","id","author","authorsAvatarUrl","date","gameName","score","shotUrl","thumbnailUrl","push","processImages","normalizeImages","fitImagesInRow","difference","amountOfImages","addToEach","n","map","row","index","imageIndex","alt","src","style","marginRight","marginBottom","Math","ceil","cursor","renderGrid","buildGrid","SortUp","xmlns","viewBox","fill","d","SortDown","FramedIcon","x","y","Menu","Fullscreen","points","Cancel","ExitFullscreen","ImageNav","ref","onClickOutside","options","reverseSort","updateSort","updateType","updateSearch","active","setActive","type","setType","searchTerm","setSearchTerm","icon","renderSearch","name","value","onChange","event","target","toLowerCase","placeholder","renderSort","item","isActive","key","buttonClass","undefined","label","classNames","selection","renderFilters","checked","htmlFor","showMenu","setShowMenu","isMobile","viewportClass","mobileMenuRef","useRef","handleClickOutside","current","contains","Spinner","props","renderSpinner","bind","baseClass","this","spinnerContainer","show","cx","cy","r","modifierClass","modifier","spinner","svgSpinner","PureComponent","defaultProps","reducer","state","action","initialized","loadedState","showImage","ImageViewer","onClose","data","onPrev","onNext","setBgImage","useReducer","dispatch","visibleClass","prevDisabled","findIndex","e","nextDisabled","maximizableElement","React","elRef","isFullscreen","setIsFullscreen","useLayoutEffect","onfullscreenchange","requestFullscreen","then","catch","useFullscreenStatus","handlePrev","useCallback","stopPropagation","handleNext","handleClose","exitFullscreen","handleKeyboard","fullscreenClass","loadedClass","disabled","onLoad","ImageGridContainer","sortOptions","imageData","setImageData","sortOption","setSortOption","showViewer","setShowViewer","viewerSrc","setViewerSrc","isReverse","setIsReverse","filterImages","results","sortMethod","a","b","sort","filter","obj","Object","keys","reduce","acc","curr","toString","includes","searchData","slice","container","querySelector","margin","option","keyword","App","setData","setInitialized","bgImageContainer","setBgImageContainer","setBackground","imageObject","bgImage","backgroundImage","getNewImages","get","response","entries","_default","shots","forEach","shotData","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.393e5ded.chunk.js","sourcesContent":["const APIURL = 'https://raw.githubusercontent.com/originalnicodrgitbot/hall-of-framed-db/main/shotsdb.json';\r\nconst axios = require('axios');\r\n\r\n\r\nexport const getImages = () => axios.get(`${APIURL}`);","import { useState, useEffect, useLayoutEffect } from 'react';\r\n\r\nexport const useViewport = () => {\r\n  const [width, setWidth] = useState(window.innerWidth);\r\n\r\n  useEffect(() => {\r\n    const handleWindowResize = () => setWidth(window.innerWidth);\r\n    window.addEventListener(\"resize\", handleWindowResize);\r\n    return () => window.removeEventListener(\"resize\", handleWindowResize);\r\n  }, []);\r\n\r\n  // Return the width so we can use it in our components\r\n  return { width };\r\n}\r\n\r\nexport const useOutsideAlerter = (ref, onClickOutside) => {\r\n  useEffect(() => {\r\n      /**\r\n       * Alert if clicked on outside of element\r\n       */\r\n      function handleClickOutside(event) {\r\n          if (ref.current && !ref.current.contains(event.target)) {\r\n            onClickOutside();\r\n          }\r\n      }\r\n\r\n      // Bind the event listener\r\n      document.addEventListener(\"mousedown\", handleClickOutside);\r\n      return () => {\r\n          // Unbind the event listener on clean up\r\n          document.removeEventListener(\"mousedown\", handleClickOutside);\r\n      };\r\n  }, [ref, onClickOutside]);\r\n}\r\n\r\nexport const breakpoints = {\r\n  mobile: 800\r\n}\r\n\r\nfunction getBrowserFullscreenElementProp() {\r\n  if (typeof document.fullscreenElement !== \"undefined\") {\r\n    return \"fullscreenElement\";\r\n  } else if (typeof document.mozFullScreenElement !== \"undefined\") {\r\n    return \"mozFullScreenElement\";\r\n  } else if (typeof document.msFullscreenElement !== \"undefined\") {\r\n    return \"msFullscreenElement\";\r\n  } else if (typeof document.webkitFullscreenElement !== \"undefined\") {\r\n    return \"webkitFullscreenElement\";\r\n  } else {\r\n    throw new Error(\"fullscreenElement is not supported by this browser\");\r\n  }\r\n}\r\n\r\nexport const useFullscreenStatus = (elRef) => {\r\n  const [isFullscreen, setIsFullscreen] = useState(\r\n    document[getBrowserFullscreenElementProp()] != null\r\n  );\r\n\r\n  const setFullscreen = () => {\r\n    if (elRef.current == null) return;\r\n\r\n    elRef.current\r\n      .requestFullscreen()\r\n      .then(() => {\r\n        setIsFullscreen(document[getBrowserFullscreenElementProp()] != null);\r\n      })\r\n      .catch(() => {\r\n        setIsFullscreen(false);\r\n      });\r\n  };\r\n\r\n  useLayoutEffect(() => {\r\n    document.onfullscreenchange = () =>\r\n      setIsFullscreen(document[getBrowserFullscreenElementProp()] != null);\r\n\r\n    return () => (document.onfullscreenchange = undefined);\r\n  });\r\n\r\n  return [isFullscreen, setFullscreen];\r\n}","import { useViewport}  from '../utils/utils';\r\n\r\nconst ImageGrid = ({\r\n        className, \r\n        images, \r\n        rowTargetHeight = 400, \r\n        borderOffset = 5, \r\n        onClick,\r\n        outerPadding = 60\r\n    }) => {\r\n\r\n    const { width } = useViewport();\r\n    const maxWidth = width - outerPadding;\r\n\r\n    const processImages = () => {\r\n        const processedImages = [];\r\n\r\n        for (let i = 0; i < images.length; i++) {\r\n            let width = parseInt(images[i].width);\r\n            const height = parseInt(images[i].height);\r\n            width = width * (rowTargetHeight / height); \r\n\r\n            const image = {\r\n                'id': images[i].id,\r\n                'author': images[i].author,\r\n                'authorsAvatarUrl': images[i].authorsAvatarUrl,\r\n                'data': images[i].date,\r\n                'gameName': images[i].gameName,\r\n                'score': images[i].score,\r\n                'fullWidth': images[i].width,\r\n                'fullHeight': images[i].height,\r\n                'shotUrl': images[i].shotUrl,\r\n                'thumbnailUrl': images[i].thumbnailUrl,\r\n                'width': width,\r\n                'height': rowTargetHeight,\r\n            }\r\n\r\n            processedImages.push(image);\r\n        }\r\n\r\n        return processedImages;\r\n    }\r\n\r\n    const makeSmaller = (image, amount) => {\r\n        amount = amount || 1;\r\n\r\n        const newHeight = image.height - amount;\r\n        image.width = (image.width * (newHeight / image.height));\r\n        image.height = newHeight;\r\n\r\n\r\n        return image;\r\n    };\r\n\r\n    const getCumulativeWidth = (images) => {\r\n        let width = 0;\r\n\r\n        for(let i = 0; i < images.length; i++) {\r\n            width += images[i].width;\r\n        }\r\n\r\n        width += (images.length-1) * borderOffset;\r\n\r\n        return width;\r\n    };\r\n\r\n    const buildRows = () => {\r\n        let currentRow = 0;\r\n        let currentWidth = 0;\r\n        let imageCounter = 0;\r\n        const rows = [];\r\n        const processedImages = processImages();\r\n\r\n        while(processedImages[imageCounter]) {\r\n            if(currentWidth >= maxWidth) {\r\n                currentRow++;\r\n                currentWidth = 0;\r\n            }\r\n            if(!rows[currentRow]) {\r\n                rows[currentRow] = [];\r\n            }\r\n\r\n            rows[currentRow].push(processedImages[imageCounter]);\r\n            currentWidth += processedImages[imageCounter].width;\r\n\r\n            imageCounter++;\r\n        };\r\n\r\n        return rows;\r\n    }\r\n\r\n    const normalizeImage = (image) => {\r\n        image.width =  parseInt(image.width);\r\n        image.height = parseInt(image.height);\r\n\r\n        return image;\r\n    };\r\n\r\n    const normalizeImages = (images) => {\r\n        for(let i = 0; i < images.length; i++) {\r\n            normalizeImage(images[i]);\r\n        }\r\n\r\n        return images;\r\n    };\r\n\r\n    const fitImagesInRow = (images) => {\r\n        while(getCumulativeWidth(images) > maxWidth) {\r\n            for(let i = 0; i < images.length; i++) {\r\n                images[i] = makeSmaller(images[i]);\r\n            }\r\n        };\r\n\r\n        return images;\r\n    }\r\n\r\n    const renderGrid = (rows) => {\r\n        return (\r\n        <div className={className}>\r\n            {rows.map((row, index) => {\r\n                return (\r\n                    <div \r\n                        key={index} \r\n                        className=\"image-row\" \r\n                    >\r\n                        {row.map((image, imageIndex) => {\r\n                            return (\r\n                                <img \r\n                                    alt={image.gameName}\r\n                                    key={imageIndex} \r\n                                    src={image.thumbnailUrl} \r\n                                    style={{\r\n                                        marginRight: borderOffset,\r\n                                        marginBottom: borderOffset,\r\n                                        width: Math.ceil(image.width), \r\n                                        height:image.height,\r\n                                        cursor: 'pointer'\r\n                                    }}\r\n                                    onClick={() => onClick(image, imageIndex)} \r\n                                />\r\n                            )\r\n                        })}\r\n                    </div>\r\n                )\r\n            })}\r\n        </div>\r\n        );\r\n    };\r\n\r\n    const buildGrid = () => {\r\n        const rows = buildRows();\r\n\r\n        for(let i = 0; i < rows.length; i++) {\r\n            rows[i] = fitImagesInRow(rows[i]);\r\n\r\n            rows[i] = normalizeImages(rows[i]);\r\n\r\n            const difference = (maxWidth - getCumulativeWidth(rows[i]));\r\n            const amountOfImages = rows[i].length;\r\n\r\n            if(amountOfImages > 1 && difference < 10) {\r\n                const addToEach = difference / amountOfImages;\r\n                for(let n = 0; n < rows[i].length; n++) {\r\n                    rows[i][n].width += addToEach;\r\n                }\r\n\r\n                rows[i] = normalizeImages(rows[i]);\r\n\r\n\r\n                rows[i][rows[i].length-1].width += (maxWidth - getCumulativeWidth(rows[i]));\r\n            }\r\n        }\r\n\r\n        return renderGrid(rows)\r\n    }\r\n\r\n    return buildGrid();\r\n}\r\n\r\nexport default ImageGrid;","export const SortUp = () => {\r\n  return (\r\n    <div className=\"sort-icon\">\r\n        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"10\" height=\"10\" viewBox=\"0 0 292 292\" fill=\"#fff\">\r\n        <g>\r\n            <path d=\"M286.935,197.286L159.028,69.379c-3.613-3.617-7.895-5.424-12.847-5.424s-9.233,1.807-12.85,5.424L5.424,197.286\r\n                C1.807,200.9,0,205.184,0,210.132s1.807,9.233,5.424,12.847c3.621,3.617,7.902,5.428,12.85,5.428h255.813\r\n                c4.949,0,9.233-1.811,12.848-5.428c3.613-3.613,5.427-7.898,5.427-12.847S290.548,200.9,286.935,197.286z\"/>\r\n        </g>\r\n        </svg>\r\n\r\n        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"10\" height=\"10\" viewBox=\"0 0 292 292\" fill=\"#aaa\">\r\n        <g>\r\n            <path d=\"M286.935,69.377c-3.614-3.617-7.898-5.424-12.848-5.424H18.274c-4.952,0-9.233,1.807-12.85,5.424\r\n            C1.807,72.998,0,77.279,0,82.228c0,4.948,1.807,9.229,5.424,12.847l127.907,127.907c3.621,3.617,7.902,5.428,12.85,5.428\r\n            s9.233-1.811,12.847-5.428L286.935,95.074c3.613-3.617,5.427-7.898,5.427-12.847C292.362,77.279,290.548,72.998,286.935,69.377z\"/>\r\n        </g>\r\n        </svg>\r\n    </div>\r\n  );\r\n}; \r\n\r\nexport const SortDown = () => {\r\n    return (\r\n        <div className=\"sort-icon\">\r\n        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"10\" height=\"10\" viewBox=\"0 0 292 292\" fill=\"#aaa\">\r\n        <g>\r\n            <path d=\"M286.935,197.286L159.028,69.379c-3.613-3.617-7.895-5.424-12.847-5.424s-9.233,1.807-12.85,5.424L5.424,197.286\r\n                C1.807,200.9,0,205.184,0,210.132s1.807,9.233,5.424,12.847c3.621,3.617,7.902,5.428,12.85,5.428h255.813\r\n                c4.949,0,9.233-1.811,12.848-5.428c3.613-3.613,5.427-7.898,5.427-12.847S290.548,200.9,286.935,197.286z\"/>\r\n        </g>\r\n        </svg>\r\n\r\n        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"10\" height=\"10\" viewBox=\"0 0 292 292\" fill=\"#fff\">\r\n        <g>\r\n            <path d=\"M286.935,69.377c-3.614-3.617-7.898-5.424-12.848-5.424H18.274c-4.952,0-9.233,1.807-12.85,5.424\r\n            C1.807,72.998,0,77.279,0,82.228c0,4.948,1.807,9.229,5.424,12.847l127.907,127.907c3.621,3.617,7.902,5.428,12.85,5.428\r\n            s9.233-1.811,12.847-5.428L286.935,95.074c3.613-3.617,5.427-7.898,5.427-12.847C292.362,77.279,290.548,72.998,286.935,69.377z\"/>\r\n        </g>\r\n        </svg>\r\n    </div>\r\n    );\r\n};\r\n\r\nexport const FramedIcon = () => {\r\n\treturn (\r\n\t<div className=\"framed-icon\">\r\n\t\t<svg xmlns=\"http://www.w3.org/2000/svg\" x=\"0\" y=\"0\" viewBox=\"0 0 2048 2048\" fill=\"#9A9A9A\">\r\n\t\t<g>\r\n\t\t\t<g>\r\n\t\t\t\t<path d=\"M892.3,688v242h539v247.2h-539v411.9H609.1v-1150h889.1V688H892.3z\"/>\r\n\t\t\t</g>\r\n\t\t</g>\r\n\t\t<path d=\"M143.6,138.5v1760.9h1760.9V138.5H143.6z M1783.8,1778.7H264.2V259.2h1519.6V1778.7z\"/>\r\n\t\t</svg>\r\n\t</div>\r\n\t);\r\n}\r\n\r\nexport const Menu = () => {\r\n    return (\r\n      <svg viewBox=\"0 0 80 80\" width=\"40\" height=\"30\" fill=\"#fff\">\r\n        <rect y=\"15\" width=\"80\" height=\"10\"></rect>\r\n        <rect y=\"35\" width=\"80\" height=\"10\"></rect>\r\n        <rect y=\"55\" width=\"80\" height=\"10\"></rect>\r\n      </svg>\r\n    );\r\n  };\r\n\r\nexport const Fullscreen = () => {\r\n  return (\r\n    <svg xmlns=\"http://www.w3.org/2000/svg\" x=\"0px\" y=\"0px\" viewBox=\"0 0 512 512\">\r\n      <polygon points=\"68.284,40 165,40 165,0 0,0 0,165 40,165 40,68.284 177,205.284 205.284,177\"/>\r\n      <polygon points=\"205.284,335 177,306.716 40,443.716 40,347 0,347 0,512 165,512 165,472 68.284,472\"/>\r\n      <polygon points=\"347,0 347,40 443.716,40 306.716,177 335,205.284 472,68.284 472,165 512,165 512,0\"/>\r\n      <polygon points=\"472,347 472,443.716 335,306.716 306.716,335 443.716,472 347,472 347,512 512,512 512,347\"/>\r\n    </svg>\r\n  );\r\n}\r\n\r\nexport const Cancel = () => {\r\n  return (\r\n    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\r\n\t    <path fill=\"#fff\" d=\"M21 4.41L19.59 3 12 10.59 4.41 3 3 4.41 10.59 12 3 19.59 4.41 21 12 13.41 19.59 21 21 19.59 13.41 12 21 4.41z\"/>\r\n    </svg>\r\n  );\r\n}\r\n\r\nexport const ExitFullscreen = () => {\r\n  return (\r\n    <svg xmlns=\"http://www.w3.org/2000/svg\" x=\"0px\" y=\"0px\"\t viewBox=\"0 0 32 32\">\r\n      <polygon points=\"22.586,25.414 29.172,32 32,29.172 25.414,22.586 28,20 20,20 20,28\"/>\r\n      <polygon points=\"6.547,9.371 4,12 11.961,11.957 12,4 9.375,6.543 2.828,0 0,2.828\"/>\r\n      <polygon points=\"0,29.172 2.828,32 9.414,25.414 12,28 12,20 4,20 6.586,22.586\"/>\r\n      <polygon points=\"28.031,12 25.438,9.404 32,2.838 29.164,0 22.598,6.566 20,3.971 20,12\"/>\r\n    </svg>\r\n  )\r\n}","import React, { useState, useRef, useEffect } from 'react';\r\nimport classNames from 'classnames';\r\nimport { SortUp, SortDown, FramedIcon, Menu } from '../assets/svgIcons';\r\nimport { useViewport, breakpoints, useOutsideAlerter } from '../utils/utils';\r\n\r\nconst ImageNav = ({className, options, reverseSort, updateSort, updateType, updateSearch}) => {\r\n    const [active, setActive] = useState(options[0]);\r\n    const [type, setType] = useState('All')\r\n    const [searchTerm, setSearchTerm] = useState('');\r\n\r\n    const handleOptionChange = (selection) => {\r\n        setActive(selection);\r\n        updateSort(selection);\r\n    }\r\n\r\n    const handleTypeChange = (value) => {\r\n        setType(value);\r\n        updateType(value);\r\n    }\r\n\r\n    const handleSearchChange = event => {\r\n        setSearchTerm(event.target.value);\r\n        updateSearch(event.target.value.toLowerCase());\r\n      };\r\n\r\n    const types = ['All', 'Wide', 'Portrait'];\r\n    const icon = reverseSort ? <SortUp /> : <SortDown />;\r\n\r\n    const renderSearch = (\r\n        <div className=\"search\">\r\n            <input\r\n                type=\"search\"\r\n                name=\"search\"\r\n                className=\"search-input\"\r\n                value={searchTerm}\r\n                onChange={handleSearchChange}\r\n                placeholder='Search'\r\n            />\r\n        </div>\r\n    );\r\n\r\n\r\n    const renderSort = (\r\n        <ul className=\"filters\">\r\n        {options.map((item, index) => {\r\n            const isActive = active.key === item.key;\r\n            const buttonClass = isActive ? 'is-active' : undefined;\r\n\r\n            return (\r\n                <li key={index}>\r\n                    <button\r\n                        id={item.label}\r\n                        className={classNames('filter', buttonClass)}\r\n                        onClick={() => handleOptionChange(item)}\r\n                        key={item.label}\r\n                    >\r\n                        {item.label}\r\n                        {isActive && icon}\r\n                    </button>\r\n                </li>\r\n            );\r\n        })}\r\n        </ul>\r\n    );\r\n    \r\n    const renderFilters = (\r\n        <div className=\"image-types\">\r\n            {types.map(item => {\r\n                return(\r\n                    <>\r\n                        <input \r\n                            id={`${item}-label`}\r\n                            onChange={()=> handleTypeChange(item)}\r\n                            checked={type===item} \r\n                            type=\"radio\" \r\n                            value={item} \r\n                            name=\"type\" \r\n                            key={`${item}-input`}\r\n                        /> \r\n                        <label key={`${item}-label`} htmlFor={`${item}-label`}>\r\n                        {item}   \r\n                        </label>\r\n                    </>\r\n                )\r\n            })}\r\n        </div>\r\n    );\r\n    \r\n    const renderDesktop = () => {\r\n       return (\r\n           <>\r\n            {renderSort}\r\n            {renderFilters}\r\n            {renderSearch}\r\n           </>\r\n       )\r\n    }\r\n\r\n    const renderMobile = () => {\r\n        return (\r\n            <div className=\"mobile-menu\" ref={mobileMenuRef}>\r\n                <button \r\n                    className=\"menu-button\" \r\n                    onClick={() => setShowMenu((current) => !current)}>\r\n                        <Menu />\r\n                </button>\r\n                {showMenu && (\r\n                <div className=\"mobile-menu-content\">\r\n                    {renderSearch}\r\n                    {renderSort}\r\n                    {renderFilters}\r\n                </div>)}\r\n            </div>\r\n        )\r\n    }\r\n\r\n    const handleClickOutside = () => {\r\n        setShowMenu(false);\r\n    }\r\n\r\n    const [showMenu, setShowMenu] = useState(false);\r\n    const { width } = useViewport();\r\n    const isMobile = width <= breakpoints.mobile;\r\n    const viewportClass = isMobile ? 'image-nav--mobile' : 'image-nav--desktop';\r\n\r\n    const mobileMenuRef = useRef(null);\r\n    useOutsideAlerter(mobileMenuRef, handleClickOutside);\r\n\r\n    useEffect(() => {\r\n        if (!isMobile) {\r\n            setShowMenu(false);\r\n        }\r\n    }, [isMobile])\r\n    \r\n    return (\r\n        <div className={`image-nav ${viewportClass} ${className}`}>\r\n            <FramedIcon/>\r\n            {!isMobile && renderDesktop()}\r\n            {isMobile && renderMobile()}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ImageNav;","import React, { PureComponent } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\n\r\nclass Spinner extends PureComponent {\r\n  static propTypes = {\r\n    className: PropTypes.string,\r\n    modifier: PropTypes.string,\r\n    show: PropTypes.bool.isRequired,\r\n  };\r\n\r\n  static defaultProps = {\r\n    show: false,\r\n    modifier: ''\r\n  };\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.renderSpinner = this.renderSpinner.bind(this);\r\n    this.baseClass = 'framed-spinner';\r\n  }\r\n\r\n  get svgSpinner() {\r\n    return (\r\n      <div className={`${this.baseClass}-svg-wrapper`}>\r\n        <svg className={`${this.baseClass}-svg-back`} viewBox=\"0 0 200 200\">\r\n          <circle cx=\"100\" cy=\"100\" r=\"90\" fill=\"none\" />\r\n        </svg>\r\n        <svg className={`${this.baseClass}-svg-segment`} viewBox=\"0 0 200 200\">\r\n          <circle cx=\"100\" cy=\"100\" r=\"90\" fill=\"none\" />\r\n        </svg>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  get spinnerContainer() {\r\n    const { modifier } = this.props;\r\n    const modifierClass = modifier ? 'global' : false;\r\n\r\n    return <div className={`${this.baseClass}-container ${modifierClass}`}>{this.spinner}</div>;\r\n  }\r\n\r\n  get spinner() {\r\n    const { className, modifier } = this.props;\r\n\r\n    return (\r\n      <div\r\n        className={classNames(\r\n          this.baseClass,\r\n          `${this.baseClass}--${modifier}`,\r\n          className\r\n        )}\r\n      >\r\n        {this.svgSpinner}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  renderSpinner() {\r\n    return this.spinnerContainer;\r\n  }\r\n\r\n  render() {\r\n    const { show } = this.props;\r\n\r\n    return show ? this.renderSpinner() : null;\r\n  }\r\n}\r\n\r\nexport default Spinner;\r\n","import React, { useReducer, useEffect } from 'react';\r\nimport classNames from 'classnames';\r\nimport Spinner from '../components/Spinner/Spinner';\r\nimport { Cancel, Fullscreen, ExitFullscreen } from '../assets/svgIcons';\r\nimport { useFullscreenStatus } from \"../utils/utils\";\r\n\r\nconst reducer = ( state, action) => {\r\n    switch (action.type) {\r\n        case \"initialize\": \r\n            return { ... state, initialized: true };\r\n        case \"close\":\r\n            return { initialized: false, loadedState: false, showImage: false };\r\n        case \"loadImage\":\r\n            return { initialized: true, loadedState: true, showImage: true };\r\n        case \"changeImage\":\r\n            return { ...state, loadedState: false}\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst ImageViewer = ({image = {}, show, onClose, data, onPrev, onNext, setBgImage}) => {\r\n    const [{ initialized, loadedState, showImage}, dispatch] = useReducer(reducer, {\r\n        initialized: false,\r\n        loadedState: false,\r\n        showImage: false\r\n    })\r\n\r\n    const visibleClass = show ? 'is-visible' : undefined;\r\n\r\n    const prevDisabled = data.findIndex((e) => e.id === image.id) === 0 || !loadedState;\r\n    const nextDisabled = data.findIndex((e) => e.id === image.id) === data.length - 1 || !loadedState;\r\n\r\n    const maximizableElement = React.useRef(null);\r\n    let [isFullscreen, setIsFullscreen] = useFullscreenStatus(maximizableElement);\r\n    \r\n    const handleExitFullscreen = () => document.exitFullscreen();\r\n\r\n    const handlePrev = React.useCallback((event) => {\r\n        event?.stopPropagation();\r\n        dispatch({ type: 'changeImage'});\r\n        onPrev();\r\n    }, [onPrev])\r\n\r\n    const handleNext = React.useCallback((event) => {\r\n        event.stopPropagation();\r\n        dispatch({ type: 'changeImage'});\r\n        onNext();\r\n    }, [onNext])\r\n\r\n    const handleClose = React.useCallback(() => {\r\n        if (isFullscreen) {\r\n            document.exitFullscreen();\r\n        } else {\r\n            dispatch({ type: 'close'});\r\n            onClose();\r\n        }\r\n    }, [isFullscreen, onClose])\r\n\r\n    const handleLoad = () => {\r\n        dispatch({ type: 'loadImage'});\r\n        setBgImage(image);\r\n    }\r\n\r\n    const handleKeyboard = React.useCallback((event) => {\r\n        const { key } = event;\r\n\r\n        switch (key) {\r\n            case 'ArrowRight':\r\n                if (nextDisabled) {\r\n                    return false;\r\n                }\r\n                return handleNext(event);\r\n            case 'ArrowLeft':\r\n                if (prevDisabled) {\r\n                    return false;\r\n                }\r\n                return handlePrev(event);\r\n            case 'Escape':\r\n                if (isFullscreen) {\r\n                    return false;\r\n                }\r\n              return handleClose()\r\n            case 'f':\r\n                return setIsFullscreen();\r\n            default:\r\n              return false;\r\n          }\r\n    }, [isFullscreen, handleClose, handleNext, handlePrev, nextDisabled, prevDisabled, setIsFullscreen])\r\n\r\n    useEffect(() => {\r\n        window.addEventListener(\"keyup\", handleKeyboard);\r\n        \r\n        // remove listener when component unmounts\r\n        return () => {\r\n            window.removeEventListener(\"keyup\", handleKeyboard);\r\n        };\r\n    }, [initialized, handleKeyboard]);\r\n\r\n    const modifier = !initialized ? 'global' : '';\r\n    const fullscreenClass = isFullscreen ? 'fullscreen' : false;\r\n    const loadedClass = showImage ? 'loaded' : 'hidden';\r\n\r\n    return (\r\n        <div className={classNames('image-viewer', visibleClass)} onClick={handleClose}> \r\n            <div className=\"image-nav\">\r\n                <button className=\"image-nav-button left\" disabled={prevDisabled} onClick={handlePrev}>[ Prev ]</button>\r\n                <button className=\"image-nav-button right\" disabled={nextDisabled} onClick={handleNext}>[ Next ]</button>\r\n            </div>\r\n\r\n                <div \r\n                    ref={maximizableElement} \r\n                    className={classNames('image-viewer-content', fullscreenClass)}\r\n                >\r\n                    {image && (\r\n                        <>\r\n                            <img \r\n                                alt={image.gameName} \r\n                                src={image.shotUrl} \r\n                                onClick={(event) => {event.stopPropagation();}}\r\n                                onLoad={handleLoad}\r\n                                className={loadedClass}\r\n                            />\r\n                            {initialized && !isFullscreen && (<div className=\"author\" onClick={(event) => {event.stopPropagation();}}>\r\n                                {/* <img src={image.authorsAvatarUrl} alt=\"avatar\" /> */}\r\n                                <div><span>by</span> <strong>{image.author}</strong></div>\r\n                                <div className=\"title\">{image.gameName}</div>\r\n                                {!isFullscreen && (\r\n                                    <button className=\"fullscreen-button\" onClick={setIsFullscreen}><Fullscreen/></button>\r\n                                )}\r\n                            </div>)}\r\n                            {isFullscreen ? (\r\n                                <button className=\"close\" onClick={handleExitFullscreen}><ExitFullscreen/></button>\r\n                            ) : (\r\n                                <button className=\"close\" onClick={handleClose}><Cancel/></button>\r\n                            )}\r\n                        </>\r\n                    )}\r\n                    <Spinner modifier={modifier} show={!loadedState} />\r\n                </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ImageViewer;","import React, { useState, useEffect } from 'react';\r\n\r\nimport ImageGrid from '../components/ImageGrid';\r\nimport ImageNav from '../components/ImageNav';\r\nimport ImageViewer from '../components/ImageViewer';\r\n\r\nconst ImageGridContainer = ({data, setBgImage}) => {\r\n    const sortOptions = [\r\n        {\r\n            label: 'Date',\r\n            key: 'date',\r\n        },\r\n        {\r\n            label: 'Popularity',\r\n            key: 'score',\r\n        }\r\n    ]\r\n\r\n    const [imageData, setImageData] = useState([]);\r\n    const [sortOption, setSortOption] = useState(sortOptions[0]);\r\n    const [type, setType] = useState('all');\r\n    const [searchTerm, setSearchTerm] = useState('');\r\n    const [showViewer, setShowViewer] = useState(false);\r\n    const [viewerSrc, setViewerSrc] = useState({})\r\n    const [isReverse, setIsReverse] = useState(false);\r\n\r\n    const handleSortChange = (option) => {\r\n        if (option.key === sortOption.key) {\r\n            setIsReverse((current) => !current);\r\n        } else {\r\n            setIsReverse(false);\r\n            setSortOption(option)\r\n        }\r\n    }\r\n\r\n    const handleTypeChange = (type) => {\r\n        setType(type);\r\n    }\r\n\r\n    const handleSearchChange = (keyword) => {\r\n        setSearchTerm(keyword)\r\n    }\r\n\r\n    const handleImageClick = (image) => {\r\n        setViewerSrc(image);\r\n        setShowViewer(true);\r\n    }\r\n\r\n    const handleClose = () => {\r\n        setViewerSrc({});\r\n        setShowViewer(false);\r\n    }\r\n\r\n    const searchData = (data) => {\r\n        if (searchTerm?.length < 3) {\r\n            return data;\r\n        }\r\n\r\n        const results = data.filter((obj) => {\r\n            return Object.keys(obj).reduce((acc, curr) => {\r\n                return acc || obj[curr].toString().toLowerCase().includes(searchTerm.toLowerCase());\r\n            }, false);\r\n        });\r\n\r\n        return results;\r\n    }\r\n\r\n    const filterImages = (images) => {\r\n        let results = images;\r\n        const key = sortOption.key;\r\n\r\n        let sortMethod = (a,b) => (a[key] < b[key]) ? 1 : ((b[key] < a[key]) ? -1 : 0)\r\n        if (isReverse) {\r\n            sortMethod = (a,b) => (a[key] > b[key]) ? 1 : ((b[key] > a[key]) ? -1 : 0)\r\n        } \r\n        results = images.sort(sortMethod);\r\n\r\n        if (type === 'Wide') {\r\n            results = results.filter(item => item.width >= item.height);\r\n        } else if (type === 'Portrait') {\r\n            results = results.filter(item => item.width <= item.height);\r\n        }\r\n\r\n        // apply search\r\n\r\n        return searchData(results);\r\n    }\r\n\r\n    const selectPreviousImage = () => {\r\n        const index = imageData.findIndex((e) => e.id === viewerSrc.id);\r\n        if (index - 1 >= 0) {\r\n            setViewerSrc(imageData[index-1]);\r\n        }\r\n    }\r\n\r\n    const selectNextImage = () => {\r\n        const index = imageData.findIndex((e) => e.id === viewerSrc.id);\r\n        if (index + 1 <= imageData.length) {\r\n            setViewerSrc(imageData[index+1]);\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (data.length) {\r\n            const images = filterImages(data.slice());\r\n\r\n            setImageData(images)\r\n        }\r\n    }, [data, sortOption, type, searchTerm, isReverse])\r\n\r\n    const container = document.querySelector('.image-grid');\r\n\r\n    return (\r\n        <div style={{ margin: '0 auto'}} className=\"home\">\r\n            <ImageNav \r\n                className={showViewer ? 'hidden' : ''}\r\n                options={sortOptions}\r\n                reverseSort={isReverse}\r\n                updateSort={handleSortChange} \r\n                updateType={handleTypeChange}\r\n                updateSearch={handleSearchChange}\r\n            />\r\n            {imageData && container && (\r\n                <ImageGrid \r\n                    className='image-rows'\r\n                    images={imageData} \r\n                    rowTargetHeight={400} \r\n                    container={container} \r\n                    onClick={handleImageClick}\r\n                />\r\n            )}\r\n            <ImageViewer \r\n                image={viewerSrc} \r\n                show={showViewer} \r\n                onClose={handleClose} \r\n                data={imageData}\r\n                onPrev={selectPreviousImage}\r\n                onNext={selectNextImage}\r\n                setBgImage={setBgImage}\r\n            />\r\n        </div>\r\n    );\r\n}\r\nexport default ImageGridContainer;","import './styles/App.css';\r\nimport './components/Spinner/Spinner.css';\r\nimport React, { useState, useEffect, useCallback } from 'react';\r\nimport { getImages } from './api/request'\r\nimport ImageGridContainer from '../src/pages/ImageGridContainer'\r\n\r\nfunction App() {\r\n  const [data, setData] = useState([]);\r\n  const [initialized, setInitialized] = useState(false);\r\n  const [bgImageContainer, setBgImageContainer] = useState(null);\r\n\r\n  const setBackground = useCallback((imageObject) => {\r\n    const bgImage = imageObject.thumbnailUrl;\r\n    bgImageContainer.style.backgroundImage = `url('${bgImage}')`;\r\n  }, [bgImageContainer])\r\n\r\n  const getNewImages = async () => {\r\n    setInitialized(true);\r\n    const response = await getImages({});\r\n    const entries = Object.entries(response.data._default);\r\n    const shots = [];\r\n    \r\n    entries.forEach((item) => \r\n    { \r\n        const id = item[0];\r\n        const shotData = item[1];\r\n        shots.push({ id, ...shotData });\r\n    });\r\n\r\n    setData(shots);\r\n  }\r\n\r\n  useEffect(() => {\r\n      !initialized && getNewImages();\r\n      data.length && !bgImageContainer && setBgImageContainer(document.querySelector('.bg-blur'));\r\n      data.length && bgImageContainer && setBackground(data[0]);\r\n      \r\n  }, [bgImageContainer, data, initialized, setBackground])\r\n\r\n  return (\r\n    <div className=\"image-grid\">\r\n      {data && (<ImageGridContainer data={data} setBgImage={setBackground}/>)}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}