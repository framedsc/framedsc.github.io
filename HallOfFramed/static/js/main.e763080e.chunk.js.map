{"version":3,"sources":["api/request.js","utils/utils.js","components/ImageGrid.jsx","assets/svgIcons.jsx","components/ImageNav.jsx","components/ImageViewer.jsx","pages/ImageGridContainer.jsx","App.js","reportWebVitals.js","index.js"],"names":["axios","require","getWindowDimensions","container","maxWidth","clientWidth","ImageGrid","className","images","rowTargetHeight","borderOffset","onClick","useState","windowDimensions","setWindowDimensions","useEffect","handleResize","window","addEventListener","removeEventListener","useWindowDimensions","makeSmaller","image","amount","newHeight","height","width","getCumulativeWidth","i","length","buildRows","currentRow","currentWidth","imageCounter","rows","processedImages","parseInt","id","author","authorsAvatarUrl","date","gameName","score","shotUrl","thumbnailUrl","push","processImages","normalizeImages","fitImagesInRow","difference","amountOfImages","addToEach","n","map","row","index","imageIndex","alt","src","style","marginRight","marginBottom","Math","ceil","cursor","renderGrid","buildGrid","SortUp","xmlns","viewBox","fill","d","SortDown","FramedIcon","x","y","ImageNav","options","reverseSort","updateSort","updateType","updateSearch","active","setActive","type","setType","searchTerm","setSearchTerm","icon","item","isActive","key","buttonClass","undefined","classNames","selection","label","onChange","value","checked","name","htmlFor","placeholder","event","target","toLowerCase","ImageViewer","show","onClose","data","onPrev","onNext","visibleClass","prevDisabled","findIndex","e","nextDisabled","disabled","stopPropagation","ImageGridContainer","sortOptions","imageData","setImageData","sortOption","setSortOption","showViewer","setShowViewer","viewerSrc","setViewerSrc","isReverse","setIsReverse","filterImages","results","sortMethod","a","b","sort","filter","obj","Object","keys","reduce","acc","curr","toString","includes","searchData","slice","document","querySelector","margin","option","current","keyword","App","setData","initialized","setInitialized","getNewImages","get","response","entries","_default","shots","forEach","shotData","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.e763080e.chunk.js","sourcesContent":["const APIURL = 'https://raw.githubusercontent.com/originalnicodrgitbot/hall-of-framed-db/main/shotsdb.json';\r\nconst axios = require('axios');\r\n\r\n\r\nexport const getImages = () => axios.get(`${APIURL}`);","import { useState, useEffect } from 'react';\r\n\r\nfunction getWindowDimensions(container) {\r\n  const maxWidth = container.clientWidth;\r\n  \r\n  return {\r\n    maxWidth\r\n  };\r\n}\r\n\r\nexport default function useWindowDimensions(container) {\r\n  const [windowDimensions, setWindowDimensions] = useState(getWindowDimensions(container));\r\n\r\n  useEffect(() => {\r\n    function handleResize() {\r\n      setWindowDimensions(getWindowDimensions(container));\r\n    }\r\n\r\n    window.addEventListener('resize', handleResize);\r\n    return () => window.removeEventListener('resize', handleResize);\r\n  }, []);\r\n\r\n  return windowDimensions;\r\n}","import useWindowDimensions from '../utils/utils';\r\n\r\nconst ImageGrid = ({\r\n        className, \r\n        images, \r\n        rowTargetHeight = 400, \r\n        borderOffset = 5, \r\n        container,\r\n        onClick\r\n    }) => {\r\n\r\n    let { maxWidth } = useWindowDimensions(container);\r\n\r\n    const processImages = () => {\r\n        const processedImages = [];\r\n\r\n        for (let i = 0; i < images.length; i++) {\r\n            let width = parseInt(images[i].width);\r\n            const height = parseInt(images[i].height);\r\n            width = width * (rowTargetHeight / height); \r\n\r\n            const image = {\r\n                'id': images[i].id,\r\n                'author': images[i].author,\r\n                'authorsAvatarUrl': images[i].authorsAvatarUrl,\r\n                'data': images[i].date,\r\n                'gameName': images[i].gameName,\r\n                'score': images[i].score,\r\n                'fullWidth': images[i].width,\r\n                'fullHeight': images[i].height,\r\n                'shotUrl': images[i].shotUrl,\r\n                'thumbnailUrl': images[i].thumbnailUrl,\r\n                'width': width,\r\n                'height': rowTargetHeight,\r\n            }\r\n\r\n            processedImages.push(image);\r\n        }\r\n\r\n        return processedImages;\r\n    }\r\n\r\n    const makeSmaller = (image, amount) => {\r\n        amount = amount || 1;\r\n\r\n        const newHeight = image.height - amount;\r\n        image.width = (image.width * (newHeight / image.height));\r\n        image.height = newHeight;\r\n\r\n\r\n        return image;\r\n    };\r\n\r\n    const getCumulativeWidth = (images) => {\r\n        let width = 0;\r\n\r\n        for(let i = 0; i < images.length; i++) {\r\n            width += images[i].width;\r\n        }\r\n\r\n        width += (images.length-1) * borderOffset;\r\n\r\n        return width;\r\n    };\r\n\r\n    const buildRows = () => {\r\n        let currentRow = 0;\r\n        let currentWidth = 0;\r\n        let imageCounter = 0;\r\n        const rows = [];\r\n        const processedImages = processImages();\r\n\r\n        while(processedImages[imageCounter]) {\r\n            if(currentWidth >= maxWidth) {\r\n                currentRow++;\r\n                currentWidth = 0;\r\n            }\r\n            if(!rows[currentRow]) {\r\n                rows[currentRow] = [];\r\n            }\r\n\r\n            rows[currentRow].push(processedImages[imageCounter]);\r\n            currentWidth += processedImages[imageCounter].width;\r\n\r\n            imageCounter++;\r\n        };\r\n\r\n        return rows;\r\n    }\r\n\r\n    const normalizeImage = (image) => {\r\n        image.width =  parseInt(image.width);\r\n        image.height = parseInt(image.height);\r\n\r\n        return image;\r\n    };\r\n\r\n    const normalizeImages = (images) => {\r\n        for(let i = 0; i < images.length; i++) {\r\n            normalizeImage(images[i]);\r\n        }\r\n\r\n        return images;\r\n    };\r\n\r\n    const fitImagesInRow = (images) => {\r\n        while(getCumulativeWidth(images) > maxWidth) {\r\n            for(let i = 0; i < images.length; i++) {\r\n                images[i] = makeSmaller(images[i]);\r\n            }\r\n        };\r\n\r\n        return images;\r\n    }\r\n\r\n    const renderGrid = (rows) => {\r\n        return (\r\n        <div className={className}>\r\n            {rows.map((row, index) => {\r\n                return (\r\n                    <div \r\n                        key={index} \r\n                        className=\"image-row\" \r\n                    >\r\n                        {row.map((image, imageIndex) => {\r\n                            return (\r\n                                <img \r\n                                    alt={image.gameName}\r\n                                    key={imageIndex} \r\n                                    src={image.thumbnailUrl} \r\n                                    style={{\r\n                                        marginRight: borderOffset,\r\n                                        marginBottom: borderOffset,\r\n                                        width: Math.ceil(image.width), \r\n                                        height:image.height,\r\n                                        cursor: 'pointer'\r\n                                    }}\r\n                                    onClick={() => onClick(image, imageIndex)} \r\n                                />\r\n                            )\r\n                        })}\r\n                    </div>\r\n                )\r\n            })}\r\n        </div>\r\n        );\r\n    };\r\n\r\n    const buildGrid = () => {\r\n        const rows = buildRows();\r\n\r\n        for(let i = 0; i < rows.length; i++) {\r\n            rows[i] = fitImagesInRow(rows[i]);\r\n\r\n            rows[i] = normalizeImages(rows[i]);\r\n\r\n            const difference = (maxWidth - getCumulativeWidth(rows[i]));\r\n            const amountOfImages = rows[i].length;\r\n\r\n            if(amountOfImages > 1 && difference < 10) {\r\n                const addToEach = difference / amountOfImages;\r\n                for(let n = 0; n < rows[i].length; n++) {\r\n                    rows[i][n].width += addToEach;\r\n                }\r\n\r\n                rows[i] = normalizeImages(rows[i]);\r\n\r\n\r\n                rows[i][rows[i].length-1].width += (maxWidth - getCumulativeWidth(rows[i]));\r\n            }\r\n        }\r\n\r\n        return renderGrid(rows)\r\n    }\r\n\r\n    return buildGrid();\r\n}\r\n\r\nexport default ImageGrid;","export const SortUp = () => {\r\n  return (\r\n    <div className=\"sort-icon\">\r\n        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"10\" height=\"10\" viewBox=\"0 0 292 292\" fill=\"#fff\">\r\n        <g>\r\n            <path d=\"M286.935,197.286L159.028,69.379c-3.613-3.617-7.895-5.424-12.847-5.424s-9.233,1.807-12.85,5.424L5.424,197.286\r\n                C1.807,200.9,0,205.184,0,210.132s1.807,9.233,5.424,12.847c3.621,3.617,7.902,5.428,12.85,5.428h255.813\r\n                c4.949,0,9.233-1.811,12.848-5.428c3.613-3.613,5.427-7.898,5.427-12.847S290.548,200.9,286.935,197.286z\"/>\r\n        </g>\r\n        </svg>\r\n\r\n        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"10\" height=\"10\" viewBox=\"0 0 292 292\" fill=\"#aaa\">\r\n        <g>\r\n            <path d=\"M286.935,69.377c-3.614-3.617-7.898-5.424-12.848-5.424H18.274c-4.952,0-9.233,1.807-12.85,5.424\r\n            C1.807,72.998,0,77.279,0,82.228c0,4.948,1.807,9.229,5.424,12.847l127.907,127.907c3.621,3.617,7.902,5.428,12.85,5.428\r\n            s9.233-1.811,12.847-5.428L286.935,95.074c3.613-3.617,5.427-7.898,5.427-12.847C292.362,77.279,290.548,72.998,286.935,69.377z\"/>\r\n        </g>\r\n        </svg>\r\n    </div>\r\n  );\r\n}; \r\n\r\nexport const SortDown = () => {\r\n    return (\r\n        <div className=\"sort-icon\">\r\n        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"10\" height=\"10\" viewBox=\"0 0 292 292\" fill=\"#aaa\">\r\n        <g>\r\n            <path d=\"M286.935,197.286L159.028,69.379c-3.613-3.617-7.895-5.424-12.847-5.424s-9.233,1.807-12.85,5.424L5.424,197.286\r\n                C1.807,200.9,0,205.184,0,210.132s1.807,9.233,5.424,12.847c3.621,3.617,7.902,5.428,12.85,5.428h255.813\r\n                c4.949,0,9.233-1.811,12.848-5.428c3.613-3.613,5.427-7.898,5.427-12.847S290.548,200.9,286.935,197.286z\"/>\r\n        </g>\r\n        </svg>\r\n\r\n        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"10\" height=\"10\" viewBox=\"0 0 292 292\" fill=\"#fff\">\r\n        <g>\r\n            <path d=\"M286.935,69.377c-3.614-3.617-7.898-5.424-12.848-5.424H18.274c-4.952,0-9.233,1.807-12.85,5.424\r\n            C1.807,72.998,0,77.279,0,82.228c0,4.948,1.807,9.229,5.424,12.847l127.907,127.907c3.621,3.617,7.902,5.428,12.85,5.428\r\n            s9.233-1.811,12.847-5.428L286.935,95.074c3.613-3.617,5.427-7.898,5.427-12.847C292.362,77.279,290.548,72.998,286.935,69.377z\"/>\r\n        </g>\r\n        </svg>\r\n    </div>\r\n    );\r\n};\r\n\r\nexport const FramedIcon = () => {\r\n\treturn (\r\n\t<div className=\"framed-icon\">\r\n\t\t<svg xmlns=\"http://www.w3.org/2000/svg\" x=\"0\" y=\"0\" viewBox=\"0 0 2048 2048\" fill=\"#9A9A9A\">\r\n\t\t<g>\r\n\t\t\t<g>\r\n\t\t\t\t<path d=\"M892.3,688v242h539v247.2h-539v411.9H609.1v-1150h889.1V688H892.3z\"/>\r\n\t\t\t</g>\r\n\t\t</g>\r\n\t\t<path d=\"M143.6,138.5v1760.9h1760.9V138.5H143.6z M1783.8,1778.7H264.2V259.2h1519.6V1778.7z\"/>\r\n\t\t</svg>\r\n\t</div>\r\n\t);\r\n}","import React, { useState } from 'react';\r\nimport classNames from 'classnames';\r\nimport { SortUp, SortDown, FramedIcon } from '../assets/svgIcons';\r\n\r\nconst ImageNav = ({className, options, reverseSort, updateSort, updateType, updateSearch}) => {\r\n    const [active, setActive] = useState(options[0]);\r\n    const [type, setType] = useState('All')\r\n    const [searchTerm, setSearchTerm] = useState('');\r\n\r\n    const handleOptionChange = (selection) => {\r\n        setActive(selection);\r\n        updateSort(selection);\r\n    }\r\n\r\n    const handleTypeChange = (value) => {\r\n        setType(value);\r\n        updateType(value);\r\n    }\r\n\r\n    const handleSearchChange = event => {\r\n        setSearchTerm(event.target.value);\r\n        updateSearch(event.target.value.toLowerCase());\r\n      };\r\n\r\n    const types = ['All', 'Wide', 'Portrait'];\r\n    const icon = reverseSort ? <SortUp /> : <SortDown />;\r\n\r\n    return (\r\n        <div className={`image-nav ${className}`}>\r\n            <FramedIcon/>\r\n            <ul className=\"filters\">\r\n            {options.map((item, index) => {\r\n                const isActive = active.key === item.key;\r\n                const buttonClass = isActive ? 'is-active' : undefined;\r\n\r\n                return (\r\n                    <li key={index}>\r\n                        <button\r\n                            className={classNames('filter', buttonClass)}\r\n                            onClick={() => handleOptionChange(item)}\r\n                            key={item.label}\r\n                        >\r\n                        <>\r\n                            {item.label}\r\n                            {isActive && icon}\r\n                        </>\r\n                        </button>\r\n                    </li>\r\n                );\r\n            })}\r\n            </ul>\r\n            <div className=\"image-types\">\r\n                {types.map(item => {\r\n                    return(\r\n                        <>\r\n                            <input \r\n                                id={`${item}-label`}\r\n                                onChange={()=> handleTypeChange(item)}\r\n                                checked={type===item} \r\n                                type=\"radio\" \r\n                                value={item} \r\n                                name=\"type\" \r\n                                key={`${item}-input`}\r\n                            /> \r\n                            <label key={`${item}-label`} htmlFor={`${item}-label`}>{item}</label>\r\n                        </>\r\n                    )\r\n                })}\r\n            </div>\r\n            <div className=\"search\">\r\n            <input\r\n                type=\"search\"\r\n                name=\"search\"\r\n                className=\"search-input\"\r\n                placeholder={'Search'}\r\n                value={searchTerm}\r\n                onChange={handleSearchChange}\r\n            />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ImageNav;","import React from 'react';\r\nimport classNames from 'classnames';\r\n\r\nconst ImageViewer = ({image = {}, show, onClose, data, onPrev, onNext}) => {\r\n\r\n    const visibleClass = show ? 'is-visible' : undefined;\r\n\r\n    const prevDisabled = data.findIndex((e) => e.id === image.id) === 0;\r\n    const nextDisabled = data.findIndex((e) => e.id === image.id) === data.length - 1;\r\n\r\n    return (\r\n        <div className={classNames('image-viewer', visibleClass)} onClick={onClose}> \r\n            <div className=\"image-nav\">\r\n                <button className=\"image-nav-button left\" disabled={prevDisabled} onClick={onPrev}>[ Prev ]</button>\r\n                <button className=\"image-nav-button right\" disabled={nextDisabled} onClick={onNext}>[ Next ]</button>\r\n            </div>\r\n            <div className=\"image-viewer-content\">\r\n                {image && (\r\n                    <>\r\n                        <img alt={image.gameName} src={image.shotUrl} onClick={(event) => {event.stopPropagation();}}/>\r\n                        <div className=\"author\" onClick={(event) => {event.stopPropagation();}}>\r\n                            {/* <img src={image.authorsAvatarUrl} alt=\"avatar\" /> */}\r\n                            <div><span>by</span> <strong>{image.author}</strong></div>\r\n                            <div className=\"title\">{image.gameName}</div>\r\n                        </div>\r\n                    </>\r\n                )}\r\n                <button className=\"close\" onClick={onClose}></button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ImageViewer;","import React, { useState, useEffect } from 'react';\r\n\r\nimport ImageGrid from '../components/ImageGrid';\r\nimport ImageNav from '../components/ImageNav';\r\nimport ImageViewer from '../components/ImageViewer';\r\n\r\nconst ImageGridContainer = ({data}) => {\r\n    const sortOptions = [\r\n        {\r\n            label: 'Date',\r\n            key: 'date',\r\n        },\r\n        {\r\n            label: 'Reactions',\r\n            key: 'score',\r\n        }\r\n    ]\r\n\r\n    const [imageData, setImageData] = useState([]);\r\n    const [sortOption, setSortOption] = useState(sortOptions[0]);\r\n    const [type, setType] = useState('all');\r\n    const [searchTerm, setSearchTerm] = useState('');\r\n    const [showViewer, setShowViewer] = useState(false);\r\n    const [viewerSrc, setViewerSrc] = useState({})\r\n    const [isReverse, setIsReverse] = useState(false);\r\n\r\n    const handleSortChange = (option) => {\r\n        if (option.key === sortOption.key) {\r\n            setIsReverse((current) => !current);\r\n        } else {\r\n            setIsReverse(false);\r\n            setSortOption(option)\r\n        }\r\n    }\r\n\r\n    const handleTypeChange = (type) => {\r\n        setType(type);\r\n    }\r\n\r\n    const handleSearchChange = (keyword) => {\r\n        setSearchTerm(keyword)\r\n    }\r\n\r\n    const handleImageClick = (image) => {\r\n        setViewerSrc(image);\r\n        setShowViewer(true);\r\n    }\r\n\r\n    const handleClose = () => {\r\n        setViewerSrc({});\r\n        setShowViewer(false);\r\n    }\r\n\r\n    const searchData = (data) => {\r\n        if (searchTerm?.length < 3) {\r\n            return data;\r\n        }\r\n\r\n        const results = data.filter((obj) => {\r\n            return Object.keys(obj).reduce((acc, curr) => {\r\n                return acc || obj[curr].toString().toLowerCase().includes(searchTerm.toLowerCase());\r\n            }, false);\r\n        });\r\n\r\n        return results;\r\n    }\r\n\r\n    const filterImages = (images) => {\r\n        let results = images;\r\n        const key = sortOption.key;\r\n\r\n        let sortMethod = (a,b) => (a[key] < b[key]) ? 1 : ((b[key] < a[key]) ? -1 : 0)\r\n        if (isReverse) {\r\n            sortMethod = (a,b) => (a[key] > b[key]) ? 1 : ((b[key] > a[key]) ? -1 : 0)\r\n        } \r\n        results = images.sort(sortMethod);\r\n\r\n        if (type === 'Wide') {\r\n            results = results.filter(item => item.width >= item.height);\r\n        } else if (type === 'Portrait') {\r\n            results = results.filter(item => item.width <= item.height);\r\n        }\r\n\r\n        // apply search\r\n\r\n        return searchData(results);\r\n    }\r\n\r\n    const selectPreviousImage = (event) => {\r\n        event.stopPropagation();\r\n        const index = imageData.findIndex((e) => e.id === viewerSrc.id);\r\n        if (index - 1 >= 0) {\r\n            setViewerSrc(imageData[index-1]);\r\n        }\r\n    }\r\n\r\n    const selectNextImage = (event) => {\r\n        event.stopPropagation();\r\n        const index = imageData.findIndex((e) => e.id === viewerSrc.id);\r\n        if (index + 1 <= imageData.length) {\r\n            setViewerSrc(imageData[index+1]);\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (data.length) {\r\n            const images = filterImages(data.slice());\r\n\r\n            setImageData(images)\r\n        }\r\n    }, [data, sortOption, type, searchTerm, isReverse])\r\n\r\n    const container = document.querySelector('.image-grid');\r\n\r\n    return (\r\n        <div style={{ margin: '0 auto'}} className=\"home\">\r\n            <ImageNav \r\n                className={showViewer ? 'hidden' : ''}\r\n                options={sortOptions}\r\n                reverseSort={isReverse}\r\n                updateSort={handleSortChange} \r\n                updateType={handleTypeChange}\r\n                updateSearch={handleSearchChange}\r\n            />\r\n            {imageData && container && (\r\n                <ImageGrid \r\n                    images={imageData} \r\n                    rowTargetHeight={300} \r\n                    container={container} \r\n                    onClick={handleImageClick}\r\n                />\r\n            )}\r\n            <ImageViewer \r\n                image={viewerSrc} \r\n                show={showViewer} \r\n                onClose={handleClose} \r\n                data={imageData}\r\n                onPrev={selectPreviousImage}\r\n                onNext={selectNextImage}\r\n            />\r\n        </div>\r\n    );\r\n}\r\nexport default ImageGridContainer;","import './App.css';\r\nimport React, { useState, useEffect } from 'react';\r\nimport { getImages } from './api/request'\r\nimport ImageGridContainer from '../src/pages/ImageGridContainer'\r\n\r\nfunction App() {\r\n  const [data, setData] = useState([]);\r\n  const [initialized, setInitialized] = useState(false);\r\n\r\n  const getNewImages = async () => {\r\n    setInitialized(true);\r\n    const response = await getImages({});\r\n    const entries = Object.entries(response.data._default);\r\n    const shots = [];\r\n    \r\n    entries.forEach((item) => \r\n    { \r\n        const id = item[0];\r\n        const shotData = item[1];\r\n        shots.push({ id, ...shotData });\r\n    });\r\n\r\n    setData(shots);\r\n  }\r\n\r\n  useEffect(() => {\r\n      if (!initialized) {\r\n          getNewImages();\r\n      }\r\n  })\r\n\r\n  return (\r\n    <div className=\"image-grid\">\r\n      {data && (<ImageGridContainer data={data}/>)}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}