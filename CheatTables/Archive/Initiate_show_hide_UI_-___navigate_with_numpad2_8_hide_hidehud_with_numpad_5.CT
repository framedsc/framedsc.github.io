<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="26">
  <Forms>
    <UDF1 Class="TCEForm" Encoding="Ascii85">os]RN)=Ar4-MEd?x/M*]h}:/BVgu#Ua#/kdQqzd04UOBtg2g00iANpJIO9o5$[_Mg5*ykJg2(*7ShHq/+f5DNL1ZLHEG%oR?%Nwk(p(5q8HU=)b{YBH=^E;Up4OdvtB25,X4Nbn02%nw^J3JeJT%W%*.h$KzWLj+t6X;;8a;V.d$UX0lSo3*1UA}{k_tp!AeWHtYRd?*tK5y,;Z8j!=GR=wa3}39#hKt^jS@role6P;s/u_,lncx1)JIBg@G$}^d8g*M)FR#q-H4azmX1#)+t2gjukdqywmQNA6pJqQd4S]8T157I%j$.=c=)^QeL2FE$ca[%4:YR)wZIX0?(4IC;_#Hva[SkS7LUmE4Azy9w_fGB*l_[SjFK_+5O.x:l6UNAp[CX{C^O)=lw((!=:my4yL;R9fLat!K%g[sNaR07b[*wdo+l7dEaLBL?i!CvvkbrSoO]IrJ.,Bs(=0ve/X)of8+EG;)xpo/A8MJ6g!w9CZZ%k6MMwgw3czv,19r9KH.d#WJjN6*QS+A+IlZ@T/R+MDGWNAPs0@sEpbl0k?X#TQf#(kHMk^VoJI)mpC)tL9qKbO/ha)aOikpkqCeQqm.LZ1c*!$)MQ?@(U:GV0T$}:5YwhvD0xlnCC(2K3+$e;qUpb(B*k.[pNi+pcpS:rOFzo%=G56dZ_YK}2/XsF;9/.U:m7X2$llX:,/7D=qYs.Oz^?e7vEeynA0tt=z{]-r0xpd5So(=j2x=R3t6o}Pr6qvqQssDejKPAf))2_z4yfp*YSl}m*=qDEWt?B+vRytIbCr;_3uA9Iac#_,gWz_2D?JOot7LPmF8U,?dU2IvJNV}Cbe*VF$:wqrXJG;.wUADZz8</UDF1>
  </Forms>
  <CheatEntries>
    <CheatEntry>
      <ID>586</ID>
      <Description>"[Initialize]"</Description>
      <Options moHideChildren="1"/>
      <LastState/>
      <Color>0000FF</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{$lua}

if syntaxcheck then return end

[ENABLE]

function ExecuteSelectedOption( i )

  local szOptionStatus = "OFF"
  local ScriptEntry

  if i == 1 then
    executeCode( getAddress( "TogglePlayerVanishLUA" ) )
    if readInteger( "bVanish" ) == 1 then
      szOptionStatus = "ON"
    else
      szOptionStatus = "OFF"
    end
    d3dhook_textcontainer_setText( Option1, UDF1.CELabel1.Caption..szOptionStatus )
  elseif i == 2 then
    executeCode( getAddress( "GodModeLUA" ) )
    if readInteger( "bGod" ) == 1 then
      szOptionStatus = "ON"
    else
      szOptionStatus = "OFF"
    end
    d3dhook_textcontainer_setText( Option2, UDF1.CELabel2.Caption..szOptionStatus )
  elseif i == 3 then
    executeCode( getAddress( "InvisibleLUA" ) )
    if readInteger( "bInvisible" ) == 1 then
      szOptionStatus = "ON"
    else
      szOptionStatus = "OFF"
    end
    d3dhook_textcontainer_setText( Option3, UDF1.CELabel3.Caption..szOptionStatus )
  elseif i == 4 then
    executeCode( getAddress( "InfiniteBreathModeLUA" ) )
    if readInteger( "bInfiniteBreath" ) == 1 then
      szOptionStatus = "ON"
    else
      szOptionStatus = "OFF"
    end
    d3dhook_textcontainer_setText( Option4, UDF1.CELabel4.Caption..szOptionStatus )
  elseif i == 5 then
    executeCode( getAddress( "NavalInvisibleLUA" ) )
    if readInteger( "bNavalInvisible" ) == 1 then
      szOptionStatus = "ON"
    else
      szOptionStatus = "OFF"
    end
    d3dhook_textcontainer_setText( Option5, UDF1.CELabel5.Caption..szOptionStatus )
  elseif i == 6 then
    if bOK == 1 then
      ScriptEntry = addresslist_getMemoryRecordByID( getAddressList(), 486 ) -- "Unlimited Items" script // SE
    else
      ScriptEntry = addresslist_getMemoryRecordByID( getAddressList(), 612 ) -- "Unlimited Items" script // DE
    end
    if memoryrecord_isActive( ScriptEntry ) then
      szOptionStatus = "OFF"
      memoryrecord_unfreeze( ScriptEntry )
    else
      szOptionStatus = "ON"
      memoryrecord_freeze( ScriptEntry )
    end
    d3dhook_textcontainer_setText( Option6, UDF1.CELabel6.Caption..szOptionStatus )
  elseif i == 7 then
    if bOK == 1 then
      ScriptEntry = addresslist_getMemoryRecordByID( getAddressList(), 487 ) -- "Instant Cooldown" script // SE
    else
      ScriptEntry = addresslist_getMemoryRecordByID( getAddressList(), 613 ) -- "Instant Cooldown" script // DE
    end
    if memoryrecord_isActive( ScriptEntry ) then
      szOptionStatus = "OFF"
      memoryrecord_unfreeze( ScriptEntry )
    else
      szOptionStatus = "ON"
      memoryrecord_freeze( ScriptEntry )
    end
    d3dhook_textcontainer_setText( Option7, UDF1.CELabel7.Caption..szOptionStatus )
  elseif i == 8 then
    memoryrecord_freeze( addresslist_getMemoryRecordByID( getAddressList(), 525 ) ) -- expand "[Other Scripts]" tree
    ScriptEntry = addresslist_getMemoryRecordByID( getAddressList(), 62 ) -- "No Reload (Cielos)" script
    if memoryrecord_isActive( ScriptEntry ) then
      szOptionStatus = "OFF"
      memoryrecord_unfreeze( ScriptEntry )
    else
      szOptionStatus = "ON"
      memoryrecord_freeze( ScriptEntry )
    end
    d3dhook_textcontainer_setText( Option8, UDF1.CELabel8.Caption..szOptionStatus )
  elseif i == 9 then
    memoryrecord_freeze( addresslist_getMemoryRecordByID( getAddressList(), 525 ) ) -- expand "[Other Scripts]" tree
    ScriptEntry = addresslist_getMemoryRecordByID( getAddressList(), 45 ) -- "Freeze Countdown Timer (mgr.inz.Player)" script
    if memoryrecord_isActive( ScriptEntry ) then
      szOptionStatus = "OFF"
      memoryrecord_unfreeze( ScriptEntry )
    else
      szOptionStatus = "ON"
      memoryrecord_freeze( ScriptEntry )
    end
    d3dhook_textcontainer_setText( Option9, UDF1.CELabel9.Caption..szOptionStatus )
  elseif i == 10 then
    memoryrecord_freeze( addresslist_getMemoryRecordByID( getAddressList(), 525 ) ) -- expand "[Other Scripts]" tree
    ScriptEntry = addresslist_getMemoryRecordByID( getAddressList(), 46 ) -- "Freeze Stopwatch Timer (mgr.inz.Player)" script
    if memoryrecord_isActive( ScriptEntry ) then
      szOptionStatus = "OFF"
      memoryrecord_unfreeze( ScriptEntry )
    else
      szOptionStatus = "ON"
      memoryrecord_freeze( ScriptEntry )
    end
    d3dhook_textcontainer_setText( Option10, UDF1.CELabel10.Caption..szOptionStatus )
  elseif i == 11 then
    executeCode( getAddress( "IncreaseWantedLevelLUA") )
  elseif i == 12 then
    executeCode( getAddress( "DecreaseWantedLevelLUA" ) )
  elseif i == 13 then
    executeCode( getAddress( "RefillAllEquipmentLUA" ) )
  elseif i == 14 then
    executeCode( getAddress( "ToggleHudLUA" ) )
  elseif i == 15 then
    executeCode( getAddress( "TeleportToMarkerLUA" ) )
  end
end

function KeyPress( vkey, char )

  if vkey == VK_NUMPAD2 then
    if ( selectedOption &lt; 15 ) then
      selectedOption = selectedOption + 1
    else
      selectedOption = 1
    end
  end

  if vkey == VK_NUMPAD8 then
    if ( selectedOption &gt; 1 ) then
      selectedOption = selectedOption - 1
    else
      selectedOption = 15
    end
  end

  if vkey == VK_NUMPAD5 then
    ExecuteSelectedOption( selectedOption )
  end

  if vkey == 192 then
    hlsprite.Visible = VisibleState
    bgsprite.Visible = VisibleState
    Option1.Visible = VisibleState
    Option2.Visible = VisibleState
    Option3.Visible = VisibleState
    Option4.Visible = VisibleState
    Option5.Visible = VisibleState
    Option6.Visible = VisibleState
    Option7.Visible = VisibleState
    Option8.Visible = VisibleState
    Option9.Visible = VisibleState
    Option10.Visible = VisibleState
    Option11.Visible = VisibleState
    Option12.Visible = VisibleState
    Option13.Visible = VisibleState
    Option14.Visible = VisibleState
    Option15.Visible = VisibleState
    VisibleState = not VisibleState
  end

  SetHighlighterToSelectedOption()
  return true

end

function SetHighlighterToSelectedOption()
  d3dhook_renderobject_setY( hlsprite, y+lineheight*( selectedOption-1 ) )
end

function InjectMenu()

  background = createPicture()
  bmp = picture_getBitmap( background )
  graphic_setHeight( bmp, 1 )
  graphic_setWidth( bmp, 1 )
  c = rasterimage_getCanvas( bmp )
  canvas_setPixel( c, 0, 0, 0x373737 )

  bgtexture = d3dhook_createTexture( background )
  bgsprite = d3dhook_createSprite( bgtexture )

  d3dhook_renderobject_setX( bgsprite, x )
  d3dhook_renderobject_setY( bgsprite, y-6.5 )

  d3dhook_renderobject_setVisible( bgsprite, false )

  d3dhook_sprite_setWidth( bgsprite, 208 )
  d3dhook_sprite_setHeight( bgsprite, 208 )

  d3dhook_renderobject_setAlphablend( bgsprite, 0.8 )

  d3dhook_renderobject_setVisible( bgsprite, true )

  highlighter = createPicture()
  bmp = picture_getBitmap( highlighter )
  graphic_setHeight( bmp, 1 )
  graphic_setWidth( bmp, 1 )
  c = rasterimage_getCanvas( bmp )
  canvas_setPixel( c, 0, 0, 0x1A4AFC )

  highlightertexture = d3dhook_createTexture( highlighter )
  hlsprite = d3dhook_createSprite( highlightertexture )

  d3dhook_renderobject_setVisible( hlsprite, false )

  d3dhook_renderobject_setX( hlsprite, x )
  d3dhook_renderobject_setY( hlsprite, y )

  d3dhook_sprite_setWidth( hlsprite, 208 )

  font = getProperty( UDF1, "Font" )
  fontmap = d3dhook_createFontmap( font )

  lineheight = d3dhook_texture_getHeight( fontmap )
  d3dhook_sprite_setHeight( hlsprite, lineheight )

  p = UDF1.CELabel17.Canvas.getTextWidth( UDF1.CELabel17.Caption )

  q = getProperty( UDF1_CELabel1, "Width" )
  Option1  = d3dhook_createTextContainer( fontmap, x+d3dhook_sprite_getWidth( bgsprite )/2-q/2-p/2, y+lineheight*0, UDF1.CELabel1.Caption..'OFF' )

  q = getProperty( UDF1_CELabel2, "Width" )
  Option2  = d3dhook_createTextContainer( fontmap, x+d3dhook_sprite_getWidth( bgsprite )/2-q/2-p/2, y+lineheight*1, UDF1.CELabel2.Caption..'OFF' )

  q = getProperty( UDF1_CELabel3, "Width" )
  Option3  = d3dhook_createTextContainer( fontmap, x+d3dhook_sprite_getWidth( bgsprite )/2-q/2-p/2, y+lineheight*2, UDF1.CELabel3.Caption..'OFF' )

  q = getProperty( UDF1_CELabel4, "Width" )
  Option4  = d3dhook_createTextContainer( fontmap, x+d3dhook_sprite_getWidth( bgsprite )/2-q/2-p/2, y+lineheight*3, UDF1.CELabel4.Caption..'OFF' )

  q = getProperty( UDF1_CELabel5, "Width" )
  Option5  = d3dhook_createTextContainer( fontmap, x+d3dhook_sprite_getWidth( bgsprite )/2-q/2-p/2, y+lineheight*4, UDF1.CELabel5.Caption..'OFF' )

  q = getProperty( UDF1_CELabel6, "Width" )
  Option6  = d3dhook_createTextContainer( fontmap, x+d3dhook_sprite_getWidth( bgsprite )/2-q/2-p/2, y+lineheight*5, UDF1.CELabel6.Caption..'OFF' )

  q = getProperty( UDF1_CELabel7, "Width" )
  Option7  = d3dhook_createTextContainer( fontmap, x+d3dhook_sprite_getWidth( bgsprite )/2-q/2-p/2, y+lineheight*6, UDF1.CELabel7.Caption..'OFF' )

  q = getProperty( UDF1_CELabel8, "Width" )
  Option8  = d3dhook_createTextContainer( fontmap, x+d3dhook_sprite_getWidth( bgsprite )/2-q/2-p/2, y+lineheight*7, UDF1.CELabel8.Caption..'OFF' )

  q = getProperty( UDF1_CELabel9, "Width" )
  Option9  = d3dhook_createTextContainer( fontmap, x+d3dhook_sprite_getWidth( bgsprite )/2-q/2-p/2, y+lineheight*8, UDF1.CELabel9.Caption..'OFF' )

  q = getProperty( UDF1_CELabel10, "Width" )
  Option10 = d3dhook_createTextContainer( fontmap, x+d3dhook_sprite_getWidth( bgsprite )/2-q/2-p/2, y+lineheight*9, UDF1.CELabel10.Caption..'OFF' )

  q = getProperty( UDF1_CELabel11, "Width" )
  Option11 = d3dhook_createTextContainer( fontmap, x+d3dhook_sprite_getWidth( bgsprite )/2-q/2, y+lineheight*10, UDF1.CELabel11.Caption )

  q = getProperty( UDF1_CELabel12, "Width" )
  Option12 = d3dhook_createTextContainer( fontmap, x+d3dhook_sprite_getWidth( bgsprite )/2-q/2, y+lineheight*11, UDF1.CELabel12.Caption )

  q = getProperty( UDF1_CELabel13, "Width" )
  Option13 = d3dhook_createTextContainer( fontmap, x+d3dhook_sprite_getWidth( bgsprite )/2-q/2, y+lineheight*12, UDF1.CELabel13.Caption )

  q = getProperty( UDF1_CELabel14, "Width" )
  Option14 = d3dhook_createTextContainer( fontmap, x+d3dhook_sprite_getWidth( bgsprite )/2-q/2, y+lineheight*13, UDF1.CELabel14.Caption )

  q = getProperty( UDF1_CELabel15, "Width" )
  Option15 = d3dhook_createTextContainer( fontmap, x+d3dhook_sprite_getWidth( bgsprite )/2-q/2, y+lineheight*14, UDF1.CELabel15.Caption )

  Option1State  = false
  Option2State  = false
  Option3State  = false
  Option4State  = false
  Option5State  = false
  Option6State  = false
  Option7State  = false
  Option8State  = false
  Option9State  = false
  Option10State = false

  selectedOption = 1
  SetHighlighterToSelectedOption()

  d3dhook_renderobject_setVisible( hlsprite, true )

  d3dhook_onKey( KeyPress )

  --[[t = createTimer( nil )
  timer_onInterval( t, UpdateTogglePlayerVanishStatus )
  timer_setInterval( t, 250 )
  timer_setEnabled( t, true )]]

end

function Init()
  reinitializeSymbolhandler()
  d3dhook = createD3DHook()
  t = createTimer()
  t.Interval = 30
  t.OnTimer = function( t )
  t.Enabled = true
    if d3dhook.Width ~= 0 then
      ScreenX = d3dhook.Width
      ScreenY = d3dhook.Height
      x = ScreenX-ScreenX/6-25
      y = ScreenY/4
      object_destroy( t )
      if bOK == 1 then
        memoryrecord_freeze( getAddressList().getMemoryRecordByDescription("[Cheat Handler - Standard Edition]") )
      else
        memoryrecord_freeze( getAddressList().getMemoryRecordByDescription("[Cheat Handler - Deluxe Edition]") )
      end
      InjectMenu()
    end
  end
end

function AOBScanEx( aob, p, a, n, s, e, pb )
  local p, a, n, s, e = p or '*X*W', a or fsmNotAligned, n or '0', s or 0x0, e or 0xffffffffffffffff
  local ms = pb and createMemScan( pb ) or createMemScan()
  local fl = createFoundList( ms )
  ms.firstScan( soExactValue, vtByteArray, nil, aob, nil, s, e, p, a, n, true, false, false, false )
  ms.waitTillDone()
  fl.initialize()
  local result = nil
  if fl ~= nil and fl.getCount() &gt; 0 then
    result = createStringlist()
    for i = 1, fl.getCount() do result.add( fl.getAddress( i-1 ) ) end
  end
  fl.destroy()
  ms.destroy()
  return result
end

function CheckGameVersion()

  unregisterSymbol( "VersionInfo_AOB" )

  autoAssemble([[
    aobscanmodule( VersionInfo_AOB, AC4BFSP.exe, 3805????????74??566A20 )
    registersymbol( VersionInfo_AOB )
  ]])

  local t = getAddress( "VersionInfo_AOB" )
  unregisterSymbol( "VersionInfo_AOB" )

  t = readInteger( t + 0x2 )

  local md5 = AOBScanEx( "4D 44 35", nil, nil, nil, t, t+0x100 )
  md5 = tonumber( md5[0], 16 ) + 0x4
  md5 = readString( md5, 32 )

  if md5 == "0018e7e93abb0302acf54694d64ba766" then -- MD5:0018e7e93abb0302acf54694d64ba766 // Standard Edition
    bOK = 1
  elseif md5 == "f5c2526588123f95db17ecf6dd185811" then -- MD5:f5c2526588123f95db17ecf6dd185811 // Deluxe Edition
    bOK = 2
  else
    bOK = 0
  end

end

ScreenX = 0
ScreenY = 0
x = 0
y = 0
VisibleState = false
bOK = 0
CheckGameVersion()
if bOK ~= 0 then
 Init()
else
 showMessage( "You're not running version 1.07 of the game (either Standard or Deluxe)!" )
 return "assert(true)"
end

[DISABLE]
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>0</ID>
          <Description>"[Cheat Handler - Standard Edition]"</Description>
          <Options moHideChildren="1"/>
          <LastState/>
          <Color>0000FF</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]

alloc( CheatHandlerThread, 0x1000, AC4BFSP.exe )
registersymbol( CheatHandlerThread )
CreateThread( CheatHandlerThread )
label( CheatHandlerThread_loop )
label( CheatHandlerOff )
registersymbol( CheatHandlerOff )

label( GetDebugMenuPointer )
label( g_MenuObj )
registersymbol( g_MenuObj )
label( g_PlayerObj )
registersymbol( g_PlayerObj )
label( g_InventoryObj )
registersymbol( g_InventoryObj )
label( g_HealthSystemObj )
registersymbol( g_HealthSystemObj )
label( g_PlayerVis )
registersymbol( g_PlayerVis )
label( pTemp )
label( g_ShipObj )
registersymbol( g_ShipObj )
label( g_PlayerShip )
registersymbol( g_PlayerShip )
label( g_ShipVis )
registersymbol( g_ShipVis )
label( g_CollisionPtr )
registersymbol( g_CollisionPtr )

label( GetPlayerObj )
registersymbol( GetPlayerObj )
label( GetInventoryObj )
registersymbol( GetInventoryObj )
label( GetInventoryItems )
label( GetHealthSystemObj )
registersymbol( GetHealthSystemObj )
label( GetPlayerVis )
registersymbol( GetPlayerVis )
label( GetShipObj )
registersymbol( GetShipObj )
label( GetPlayerShip )
registersymbol( GetPlayerShip )
label( GetShipVis )
registersymbol( GetShipVis )
label( GetCollisionPtr )
registersymbol( GetCollisionPtr )

label( CheckAndReinitialize )

label( TogglePlayerVanish )
registersymbol( TogglePlayerVanish )
label( TogglePlayerVanishLUA )
registersymbol( TogglePlayerVanishLUA )
label( GodMode )
registersymbol( GodMode )
label( GodModeLUA)
registersymbol( GodModeLUA )
label( PlayerGodMode )
label( PlayerGodMode_exit )
label( NavalGodMode )
label( NavalGodMode_exit )
label( Invisible )
registersymbol( Invisible )
label( InvisibleLUA )
registersymbol( InvisibleLUA )
label( InfiniteBreathMode )
registersymbol( InfiniteBreathMode )
label( InfiniteBreathModeLUA )
registersymbol( InfiniteBreathModeLUA )
label( NavalInvisible )
registersymbol( NavalInvisible )
label( NavalInvisibleLUA )
registersymbol( NavalInvisibleLUA )
label( DecreaseWantedLevel )
label( DecreaseWantedLevelLUA )
registersymbol( DecreaseWantedLevelLUA )
label( RefillAllEquipment )
label( RefillAllEquipmentLUA )
registersymbol( RefillAllEquipmentLUA )
label( RefillAllEquipmentMod )
label( RefillAllEquipmentMod_exit )
label( RefillAllEquipmentModLUA )
registersymbol( RefillAllEquipmentModLUA )
label( IncreaseWantedLevel )
label( IncreaseWantedLevelLUA )
registersymbol( IncreaseWantedLevelLUA )
label( ToggleHud )
label( ToggleHudLUA )
registersymbol( ToggleHudLUA )
label( TeleportToMarker )
label( TeleportToMarker_continue )
label( fCoords )
label( TeleportToMarkerLUA )
registersymbol( TeleportToMarkerLUA )

label( bVanish )
registersymbol( bVanish )
label( bGod )
registersymbol( bGod )
label( bInvisible )
registersymbol( bInvisible )
label( bNavalInvisible )
registersymbol( bNavalInvisible )
label( bInfiniteBreath )
registersymbol( bInfiniteBreath )

label( Bullets )
registersymbol( Bullets )
label( BerserkDarts )
registersymbol( BerserkDarts )
label( SleepDarts )
registersymbol( SleepDarts )
label( SmokeBombs )
registersymbol( SmokeBombs )
label( RopeDarts )
registersymbol( RopeDarts )
label( HeavyShot )
registersymbol( HeavyShot )
label( FireBarrels )
registersymbol( FireBarrels )
label( MortarShot )
registersymbol( MortarShot )
label( Harpoons )
registersymbol( Harpoons )
label( Crew )
registersymbol( Crew )
label( Money )
registersymbol( Money )
label( Sugar )
registersymbol( Sugar )
label( Rum )
registersymbol( Rum )
label( Cloth )
registersymbol( Cloth )
label( Metal )
registersymbol( Metal )
label( Wood )
registersymbol( Wood )
label( LeadShot )
registersymbol( LeadShot )
label( FireCrackers )
registersymbol( FireCrackers )

CheatHandlerThread:
mov eax,[AC4BFSP.exe+26BDE7C]
cmp [eax+144],-1 // make sure we're in-game when enabling the script
je short @f
  push C8
  call kernel32.Sleep
  jmp short CheatHandlerThread
@@:
call GetDebugMenuPointer // get the context pointer for the Debug Menu
call FetchPointers       // fetch various pointers you can use in your attempts :)
CheatHandlerThread_loop:
  push A
  call kernel32.Sleep
  cmp [CheatHandlerOff],1
  jne short @f
    mov [CheatHandlerOff],2
    ret
  @@:
  mov eax,[AC4BFSP.exe+26BDE7C]
  cmp [eax+144],3 // if world-&gt;main menu-&gt;world
  je short CheckAndReinitialize
    cmp [eax+144],2 // if world-&gt;reload-&gt;world
    je short CheckAndReinitialize
      jmp short CheatHandlerThread_loop
  CheckAndReinitialize:
  mov eax,[AC4BFSP.exe+26BDE7C]
  cmp [eax+144],-1 // check if we're back in-game
  je short @f
    push C8
    call kernel32.Sleep
    jmp short CheckAndReinitialize
  @@:
  call GetDebugMenuPointer
  call FetchPointers
  cmp byte ptr [bVanish],1    // check if option is active
  jne short @f                // if OFF, check next
    call TogglePlayerVanish   // if ON, re-enable
  @@:
  cmp byte ptr [bGod],1
  jne short @f
    call GodMode
  @@:
  cmp byte ptr [bInvisible],1
  jne short @f
    call Invisible
  @@:
  cmp byte ptr [bNavalInvisible],1
  jne short @f
    call NavalInvisible
  @@:
  cmp byte ptr [bInfiniteBreath],1
  jne short @f
    call InfiniteBreathMode
  @@:
  jmp CheatHandlerThread_loop

db CC CC CC CC

TogglePlayerVanish:
mov ecx,[g_MenuObj]
test ecx,ecx
je short @f
  push ecx
  push 1
  call AC4BFSP.exe+FA66B0 // TogglePlayerVanish
  add esp,8
@@:
ret

db CC CC CC CC

TogglePlayerVanishLUA:
call TogglePlayerVanish
xor [bVanish],1
ret 4

db CC CC CC CC

GodMode:
mov ecx,[g_MenuObj]
test ecx,ecx
je short @f
  //push ecx
  //push 1
  //call AC4BFSP.exe+FC7D50 // GodMode
  //add esp,8
  call PlayerGodMode
  call NavalGodMode
@@:
ret

db CC CC CC CC

GodModeLUA:
call GodMode
xor [bGod],1
ret 4

db CC CC CC CC

Invisible:
mov ecx,[g_MenuObj]
test ecx,ecx
je short @f
  push ecx
  push 1
  call AC4BFSP.exe+FC4F00 // Invisible
  add esp,8
@@:
ret

db CC CC CC CC

InvisibleLUA:
call Invisible
xor [bInvisible],1
ret 4

db CC CC CC CC

InfiniteBreathMode:
mov ecx,[g_MenuObj]
test ecx,ecx
je short @f
  push ecx
  push 1
  call AC4BFSP.exe+FBC610 // InfiniteBreathMode
  add esp,8
@@:
ret

db CC CC CC CC

InfiniteBreathModeLUA:
call InfiniteBreathMode
xor [bInfiniteBreath],1
ret 4

db CC CC CC CC

NavalInvisible:
mov ecx,[g_MenuObj]
test ecx,ecx
je short @f
  push ecx
  push 1
  call AC4BFSP.exe+FC7CC0 // NavalInvisible
  add esp,8
@@:
ret

db CC CC CC CC

NavalInvisibleLUA:
call NavalInvisible
xor [bNavalInvisible],1
ret 4

db CC CC CC CC

DecreaseWantedLevel:
mov ecx,[g_MenuObj]
test ecx,ecx
je short @f
  push ecx
  push 1
  call AC4BFSP.exe+F94FF0 // DecreaseWantedLevel
  add esp,8
@@:
ret

db CC CC CC CC

DecreaseWantedLevelLUA:
call DecreaseWantedLevel
ret 4

db CC CC CC CC

RefillAllEquipment:
mov ecx,[g_MenuObj]
test ecx,ecx
je short @f
  push ecx
  push 1
  call AC4BFSP.exe+FC4E80 // RefillAllEquipment
  add esp,8
@@:
ret

db CC CC CC CC

RefillAllEquipmentLUA:
call RefillAllEquipment
ret 4

db CC CC CC CC

IncreaseWantedLevel:
mov ecx,[g_MenuObj]
test ecx,ecx
je short @f
  push ecx
  push 1
  call AC4BFSP.exe+F94FD0 // IncreaseWantedLevel
  add esp,8
@@:
ret

db CC CC CC CC

IncreaseWantedLevelLUA:
call IncreaseWantedLevel
ret 4

db CC CC CC CC

ToggleHud:
mov ecx,[g_MenuObj]
test ecx,ecx
je short @f
  push ecx
  push 1
  call AC4BFSP.exe+F9E870 // ToggleHud (can be checked as well with a BOOL if need be)
  add esp,8
@@:
ret

db CC CC CC CC

ToggleHudLUA:
call ToggleHud
ret 4

db CC CC CC CC

TeleportToMarker:
mov ecx,[AC4BFSP.exe+49F7174]
cmp byte ptr [ecx+A9],1
jne TeleportToMarker_exit
  mov eax,[g_CollisionPtr]
  mov byte ptr [eax+15],0                       // disable movement
  mov edx,[eax+98]
  mov byte ptr [edx+2C],15                      // disable collision (doesn't work underwater!)
  mov ebx,ecx
  mov ecx,[ecx+88]
  mov ecx,[ecx]
  test ecx,ecx
  je short @f

    // Note that the simple existence of the map marker doesn't mean the corresponding object appointed by the marker
    // has been loaded by the engine; from testing I've learned you need to be approx. 300m away from it to be loaded.
    // Nope, I won't figure out how to load it from any distance. Life :)

    mov ecx,[ecx+98]                            // get the pointer to coordinates
    movaps xmm0,[ecx+30]                        // load all XYZT
    jmp short TeleportToMarker_continue
  @@:

    // When pointing to a ground location or object not loaded (see above why).

    mov edi,[ebx+50]                            // get X
    mov [fCoords],edi                           // store X
    mov edi,[ebx+54]                            // get Y
    mov [fCoords+4],edi                         // store Y
    movups xmm0,[fCoords]                       // get quad for coords
  TeleportToMarker_continue:
  mov edi,[eax+8]
  movaps [edi+40],xmm0                          // update coordinates
  mov edi,[eax+98]
  movaps [edi+D0],xmm0                          // update coordinates
  mov byte ptr [edx+2C],10                      // enable collision (doesn't work underwater!)
  mov byte ptr [eax+15],1                       // enable movement
TeleportToMarker_exit:
ret

db CC CC CC CC

TeleportToMarkerLUA:
call TeleportToMarker
ret 4

db CC CC CC CC

GetDebugMenuPointer:
call AC4BFSP.exe+150E20
test eax,eax
je short @f
  mov ecx,eax
  call AC4BFSP.exe+30EEA0
  test eax,eax
  je short @f
    push eax
    call AC4BFSP.exe+2F67C0
    add esp,4
    test eax,eax
    je short @f
      mov eax,[eax+30]
      test eax,eax
      je short @f
        mov eax,[eax]
        test eax,eax
        je short @f
          mov eax,[eax+60]
          test eax,eax
          je short @f
            mov [g_MenuObj],eax
            ret
@@:
mov [g_MenuObj],0
ret

db CC CC CC CC

FetchPointers:
call GetPlayerObj
call GetInventoryObj
call GetInventoryItems
call GetHealthSystemObj
call GetPlayerVis
call GetShipObj
call GetPlayerShip
call GetShipVis
call GetCollisionPtr
ret

db CC CC CC CC

GetPlayerObj:
mov ecx,[g_MenuObj]
push [ecx+C]
call AC4BFSP.exe+2F67C0
add esp,4
mov [g_PlayerObj],eax
ret

db CC CC CC CC

GetInventoryObj:
mov ecx,[g_MenuObj]
push [ecx+C]
call AC4BFSP.exe+F37B30
add esp,4
mov [g_InventoryObj],eax
ret

db CC CC CC CC

GetHealthSystemObj:
mov eax,[g_PlayerObj]
test eax,eax
je short @f
  mov ecx,[eax+20]
  mov eax,[ecx]
  mov edx,[eax+30]
  push esi
  mov esi,[AC4BFSP.exe+4A1C544]
  call edx
  movzx ecx,byte ptr [esi+35]
  mov edx,[eax]
  mov ecx,[edx+ecx*4]
  pop esi
  test ecx,ecx
  je short @f
    add ecx,FFFFFF0C
    mov [g_HealthSystemObj],ecx
    ret
@@:
mov [g_HealthSystemObj],0
ret

db CC CC CC CC

GetPlayerVis:
mov ecx,[g_MenuObj]
push [ecx+C]
lea ecx,[pTemp]
call AC4BFSP.exe+FAB1A0
mov [g_PlayerVis],eax
ret

db CC CC CC CC

GetShipObj:
mov eax,[g_MenuObj]
mov eax,[eax+C]
mov eax,[eax+5C]
test eax,eax
je @f
  mov ecx,[eax+8F4]
  test eax,eax
  je @f
    call AC4BFSP.exe+C59870
    mov [g_ShipObj],eax
    ret
@@:
mov [g_ShipObj],0
ret

db CC CC CC CC

GetPlayerShip:
mov eax,[g_ShipObj]
test eax,eax
je short @f
  push 0
  push eax
  call AC4BFSP.exe+BB1440
  add esp,8
  test eax,eax
  je short @f
    mov [g_PlayerShip],eax
    ret
@@:
mov [g_PlayerShip],0
ret

db CC CC CC CC

GetShipVis:
mov eax,[g_PlayerShip]
test eax,eax
je short @f
  lea eax,[eax+4B0]
  mov [g_ShipVis],eax
  ret
@@:
mov [g_ShipVis],0
ret

db CC CC CC CC

GetCollisionPtr:
mov eax,[g_MenuObj]
mov ecx,[eax+10]
mov ecx,[ecx+108]
call AC4BFSP.exe+1FC4C0
test eax,eax
je short @f
  mov [g_CollisionPtr],eax
  ret
@@:
mov [g_CollisionPtr],0
ret

db CC CC CC CC

PlayerGodMode:
mov edi,[g_MenuObj]
mov esi,[edi+C]
test esi,esi
je PlayerGodMode_exit
  mov ecx,edi
  call AC4BFSP.exe+1183F80
  test eax,eax
  je PlayerGodMode_exit
    push esi
    call AC4BFSP.exe+2F67C0
    push eax
    call AC4BFSP.exe+F0C2E0
    add esp,8
    mov bl,al
    mov ecx,esi
    mov esi,[ecx+E8]
    mov eax,[esi+1C]
    test bl,bl
    sete cl
    movzx edx,cl
    push edx
    lea ecx,[esi+1C]
    call AC4BFSP.exe+14B5DD0
PlayerGodMode_exit:
ret

db CC CC CC CC

NavalGodMode:
mov eax,[g_MenuObj]
mov eax,[eax+C]
test eax,eax
je NavalGodMode_exit
  mov eax,[eax+5C]
  test eax,eax
  je NavalGodMode_exit
    mov ecx,[eax+8F4]
    test ecx,ecx
    je NavalGodMode_exit
      call AC4BFSP.exe+C59870
      test eax,eax
      je NavalGodMode_exit
        push 0
        push eax
        call AC4BFSP.exe+BB1440
        add esp,8
        test eax,eax
        je NavalGodMode_exit
          mov esi,eax
          mov eax,[esi]
          mov edx,[eax+1A8]
          mov ecx,esi
          call edx
          mov bl,al
          test esi,esi
          je short NavalGodMode_exit
            mov eax,[esi]
            mov eax,[eax+EC]
            test bl,bl
            sete cl
            movzx edx,cl
            push edx
            mov ecx,esi
            call eax
NavalGodMode_exit:
ret

db CC CC CC CC

GetInventoryItems:
mov eax,[g_InventoryObj]
test eax,eax
je @f
  lea edi,[eax+4]
  push B // Bullets
  mov ecx,edi
  call AC4BFSP.exe+16F6AD0
  mov [Bullets],eax
  push 24 // Berserk Darts
  mov ecx,edi
  call AC4BFSP.exe+16F6AD0
  mov [BerserkDarts],eax
  push 23 // Sleep Darts
  mov ecx,edi
  call AC4BFSP.exe+16F6AD0
  mov [SleepDarts],eax
  push 5 // Smoke Bombs
  mov ecx,edi
  call AC4BFSP.exe+16F6AD0
  mov [SmokeBombs],eax
  push 20 // Rope Darts
  mov ecx,edi
  call AC4BFSP.exe+16F6AD0
  mov [RopeDarts],eax
  push 2F // Heavy Shot
  mov ecx,edi
  call AC4BFSP.exe+16F6AD0
  mov [HeavyShot],eax
  push 31 // Fire Barrels
  mov ecx,edi
  call AC4BFSP.exe+16F6AD0
  mov [FireBarrels],eax
  push 30 // Mortar Shot
  mov ecx,edi
  call AC4BFSP.exe+16F6AD0
  mov [MortarShot],eax
  push 41 // Harpoons
  mov ecx,edi
  call AC4BFSP.exe+16F6AD0
  mov [Harpoons],eax
  push 38 // Crew
  mov ecx,edi
  call AC4BFSP.exe+16F6AD0
  mov [Crew],eax
  push 1 // Money
  mov ecx,edi
  call AC4BFSP.exe+16F6AD0
  mov [Money],eax
  push 2D // Sugar
  mov ecx,edi
  call AC4BFSP.exe+16F6AD0
  mov [Sugar],eax
  push 2C // Rum
  mov ecx,edi
  call AC4BFSP.exe+16F6AD0
  mov [Rum],eax
  push 2B // Cloth
  mov ecx,edi
  call AC4BFSP.exe+16F6AD0
  mov [Cloth],eax
  push 2A // Metal
  mov ecx,edi
  call AC4BFSP.exe+16F6AD0
  mov [Metal],eax
  push 29 // Wood
  mov ecx,edi
  call AC4BFSP.exe+16F6AD0
  mov [Wood],eax
  push 4D // Small Lead Shot
  mov ecx,edi
  call AC4BFSP.exe+16F6AD0
  mov [LeadShot],eax
  push 4C // Makeshift Firecrackers
  mov ecx,edi
  call AC4BFSP.exe+16F6AD0
  mov [FireCrackers],eax
@@:
ret

db CC CC CC CC

RefillAllEquipmentMod:
push ebp
mov ebp,esp
mov ecx,[g_MenuObj]
test ecx,ecx
je RefillAllEquipmentMod_exit
  push ecx
  push esi
  mov esi,ecx
  mov eax,[esi+C]
  test eax,eax
  je RefillAllEquipmentMod_exit
    mov eax,[eax+9C]
    and al,7
    cmp al,1
    jne RefillAllEquipmentMod_exit
      mov eax,[esi+C]
      push eax
      lea ecx,[esi+7A0]
      call AC4BFSP.exe+FAB1A0
      test eax,eax
      je RefillAllEquipmentMod_exit
        mov ecx,[eax+1C]
        mov [ebp-4],ecx
        push 1
        push 0
        push 0
        push B // Bullets
        push 64
        lea ecx,[ebp-4]
        call AC4BFSP.exe+15D6D10
        push 1
        push 0
        push 0
        push 24 // Berserk Darts
        push 64
        lea ecx,[ebp-4]
        call AC4BFSP.exe+15D6D10
        push 1
        push 0
        push 0
        push 23 // Sleep Darts
        push 64
        lea ecx,[ebp-4]
        call AC4BFSP.exe+15D6D10
        push 1
        push 0
        push 0
        push 5 // Smoke Bombs
        push 64
        lea ecx,[ebp-4]
        call AC4BFSP.exe+15D6D10
        push 1
        push 0
        push 0
        push 20 // Rope Darts
        push 64
        lea ecx,[ebp-4]
        call AC4BFSP.exe+15D6D10
        push 1
        push 0
        push 0
        push 2F // Heavy Shot
        push 64
        lea ecx,[ebp-4]
        call AC4BFSP.exe+15D6D10
        push 1
        push 0
        push 0
        push 31 // Fire Barrels
        push 64
        lea ecx,[ebp-4]
        call AC4BFSP.exe+15D6D10
        push 1
        push 0
        push 0
        push 30 // Mortar Shot
        push 64
        lea ecx,[ebp-4]
        call AC4BFSP.exe+15D6D10
        push 1
        push 0
        push 0
        push 41 // Harpoons
        push 64
        lea ecx,[ebp-4]
        call AC4BFSP.exe+15D6D10
        push 1
        push 0
        push 0
        push 38 // Crew
        push 64
        lea ecx,[ebp-4]
        call AC4BFSP.exe+15D6D10
        push 1
        push 0
        push 0
        push 1 // Money
        push 2710
        lea ecx,[ebp-4]
        call AC4BFSP.exe+15D6D10
        push 1
        push 0
        push 0
        push 2D // Sugar
        push 1388
        lea ecx,[ebp-4]
        call AC4BFSP.exe+15D6D10
        push 1
        push 0
        push 0
        push 2C // Rum
        push 1388
        lea ecx,[ebp-4]
        call AC4BFSP.exe+15D6D10
        push 1
        push 0
        push 0
        push 2B // Cloth
        push 1388
        lea ecx,[ebp-4]
        call AC4BFSP.exe+15D6D10
        push 1
        push 0
        push 0
        push 2A // Metal
        push 1388
        lea ecx,[ebp-4]
        call AC4BFSP.exe+15D6D10
        push 1
        push 0
        push 0
        push 29 // Wood
        push 1388
        lea ecx,[ebp-4]
        call AC4BFSP.exe+15D6D10
        push 1
        push 0
        push 0
        push 4D // Small Lead Shot
        push 64
        lea ecx,[ebp-4]
        call AC4BFSP.exe+15D6D10
        push 1
        push 0
        push 0
        push 4C // Makeshift Firecrackers
        push 64
        lea ecx,[ebp-4]
        call AC4BFSP.exe+15D6D10
RefillAllEquipmentMod_exit:
pop esi
mov esp,ebp
pop ebp
ret

db CC CC CC CC

RefillAllEquipmentModLUA:
call RefillAllEquipmentMod
ret 4

db CC CC CC CC

/*
GetEnemyShip:
mov eax,[g_PlayerShip]
mov eax,[eax+F0]
mov eax,[eax]
test eax,eax
je short @f
  push eax
  call AC4BFSP.exe+C363C0
  add esp,4
  mov [g_EnemyShip],eax
@@:
ret

db CC CC CC CC
*/

CheatHandlerOff:
dd 0
g_MenuObj:
dd 0
g_PlayerObj:
dd 0
g_InventoryObj:
dd 0
g_HealthSystemObj:
dd 0
g_PlayerVis:
dd 0
pTemp:
dd 0
g_ShipObj:
dd 0
g_PlayerShip:
dd 0
g_ShipVis:
dd 0
g_CollisionPtr:
dd 0
g_EnemyShip:
dd 0

bVanish: // I know "b" stands for BYTE and I'm using "dd" below for DWORD :P
dd 0
bGod:
dd 0
bInvisible:
dd 0
bNavalInvisible:
dd 0
bInfiniteBreath:
dd 0

fCoords:
dd 0 0 (float)8.0 (float)1.0

Bullets:
dd 0
BerserkDarts:
dd 0
SleepDarts:
dd 0
SmokeBombs:
dd 0
RopeDarts:
dd 0
HeavyShot:
dd 0
FireBarrels:
dd 0
MortarShot:
dd 0
Harpoons:
dd 0
Crew:
dd 0
Money:
dd 0
Sugar:
dd 0
Rum:
dd 0
Cloth:
dd 0
Metal:
dd 0
Wood:
dd 0
LeadShot:
dd 0
FireCrackers:
dd 0

[DISABLE]

{$lua}

if( syntaxcheck == false ) then --actual execution
  local starttime = getTickCount()

if readInteger( "CheatHandlerOff" ) == 0 then --could be 2 already
  writeInteger( "CheatHandlerOff", 1 ) --tell the thread to kill itself
end

while( getTickCount() &lt; starttime + 1000 ) and ( readInteger( "CheatHandlerOff" ) ~= 2 ) do --wait till it has finished
  sleep( 20 )
end

if( getTickCount() &gt; starttime + 1000 ) then --could happen when the window is shown
  showMessage( 'Disabling the thread failed!' )
  error( 'Thread disabling failed!' )
end
  sleep( 1 )
end

{$asm}

unregistersymbol( FireCrackers )
unregistersymbol( LeadShot )
unregistersymbol( Wood )
unregistersymbol( Metal )
unregistersymbol( Cloth )
unregistersymbol( Rum )
unregistersymbol( Sugar )
unregistersymbol( Money )
unregistersymbol( Crew )
unregistersymbol( Harpoons )
unregistersymbol( MortarShot )
unregistersymbol( FireBarrels )
unregistersymbol( HeavyShot )
unregistersymbol( RopeDarts )
unregistersymbol( SmokeBombs )
unregistersymbol( SleepDarts )
unregistersymbol( BerserkDarts )
unregistersymbol( Bullets )

unregistersymbol( bInfiniteBreath )
unregistersymbol( bNavalInvisible )
unregistersymbol( bInvisible )
unregistersymbol( bGod )
unregistersymbol( bVanish )

unregistersymbol( TeleportToMarkerLUA )
unregistersymbol( ToggleHudLUA )
unregistersymbol( IncreaseWantedLevelLUA )
unregistersymbol( RefillAllEquipmentModLUA )
unregistersymbol( RefillAllEquipmentLUA )
unregistersymbol( DecreaseWantedLevelLUA )
unregistersymbol( NavalInvisibleLUA )
unregistersymbol( NavalInvisible )
unregistersymbol( InfiniteBreathModeLUA )
unregistersymbol( InfiniteBreathMode )
unregistersymbol( InvisibleLUA )
unregistersymbol( Invisible )
unregistersymbol( GodModeLUA )
unregistersymbol( GodMode )
unregistersymbol( TogglePlayerVanishLUA )
unregistersymbol( TogglePlayerVanish )

unregistersymbol( GetCollisionPtr )
unregistersymbol( g_CollisionPtr )
unregistersymbol( GetShipVis )
unregistersymbol( g_ShipVis )
unregistersymbol( GetPlayerShip )
unregistersymbol( g_PlayerShip )
unregistersymbol( GetShipObj )
unregistersymbol( g_ShipObj )
unregistersymbol( GetPlayerVis )
unregistersymbol( g_PlayerVis )
unregistersymbol( GetHealthSystemObj )
unregistersymbol( g_HealthSystemObj )
unregistersymbol( GetInventoryObj )
unregistersymbol( g_InventoryObj )
unregistersymbol( GetPlayerObj )
unregistersymbol( g_PlayerObj )
unregistersymbol( g_MenuObj )

unregistersymbol( CheatHandlerOff )
unregistersymbol( CheatHandlerThread )
dealloc( CheatHandlerThread )
</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>1</ID>
              <Description>"Toggle Player Vanish"</Description>
              <DropDownList ReadOnly="1" DescriptionOnly="1" DisplayValueAsItem="1">0:OFF
1:ON
</DropDownList>
              <VariableType>4 Bytes</VariableType>
              <Address>bVanish</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>5</ID>
              <Description>"God Mode"</Description>
              <DropDownList ReadOnly="1" DescriptionOnly="1" DisplayValueAsItem="1">0:OFF
1:ON
</DropDownList>
              <VariableType>4 Bytes</VariableType>
              <Address>bGod</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>2</ID>
              <Description>"Invisible"</Description>
              <DropDownList ReadOnly="1" DescriptionOnly="1" DisplayValueAsItem="1">0:OFF
1:ON
</DropDownList>
              <VariableType>4 Bytes</VariableType>
              <Address>bInvisible</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>4</ID>
              <Description>"Infinite Breath"</Description>
              <DropDownList ReadOnly="1" DescriptionOnly="1" DisplayValueAsItem="1">0:OFF
1:ON
</DropDownList>
              <VariableType>4 Bytes</VariableType>
              <Address>bInfiniteBreath</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>3</ID>
              <Description>"Naval Invisible"</Description>
              <DropDownList ReadOnly="1" DescriptionOnly="1" DisplayValueAsItem="1">0:OFF
1:ON
</DropDownList>
              <VariableType>4 Bytes</VariableType>
              <Address>bNavalInvisible</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>417</ID>
              <Description>"Player/Ship Inventory"</Description>
              <Options moHideChildren="1"/>
              <LastState Value="" RealAddress="00000000"/>
              <Color>008000</Color>
              <GroupHeader>1</GroupHeader>
              <CheatEntries>
                <CheatEntry>
                  <ID>421</ID>
                  <Description>"Bullets"</Description>
                  <VariableType>4 Bytes</VariableType>
                  <Address>Bullets</Address>
                  <Offsets>
                    <Offset>C</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>432</ID>
                  <Description>"Berserk Darts"</Description>
                  <VariableType>4 Bytes</VariableType>
                  <Address>BerserkDarts</Address>
                  <Offsets>
                    <Offset>C</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>431</ID>
                  <Description>"Sleep Darts"</Description>
                  <VariableType>4 Bytes</VariableType>
                  <Address>SleepDarts</Address>
                  <Offsets>
                    <Offset>C</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>420</ID>
                  <Description>"Smoke Bombs"</Description>
                  <VariableType>4 Bytes</VariableType>
                  <Address>SmokeBombs</Address>
                  <Offsets>
                    <Offset>C</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>439</ID>
                  <Description>"Rope Darts"</Description>
                  <VariableType>4 Bytes</VariableType>
                  <Address>RopeDarts</Address>
                  <Offsets>
                    <Offset>C</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>435</ID>
                  <Description>"Heavy Shot"</Description>
                  <VariableType>4 Bytes</VariableType>
                  <Address>HeavyShot</Address>
                  <Offsets>
                    <Offset>C</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>437</ID>
                  <Description>"Fire Barrels"</Description>
                  <VariableType>4 Bytes</VariableType>
                  <Address>FireBarrels</Address>
                  <Offsets>
                    <Offset>C</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>436</ID>
                  <Description>"Mortar Shot"</Description>
                  <VariableType>4 Bytes</VariableType>
                  <Address>MortarShot</Address>
                  <Offsets>
                    <Offset>C</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>438</ID>
                  <Description>"Harpoons"</Description>
                  <VariableType>4 Bytes</VariableType>
                  <Address>Harpoons</Address>
                  <Offsets>
                    <Offset>C</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>422</ID>
                  <Description>"Ship Crew"</Description>
                  <VariableType>4 Bytes</VariableType>
                  <Address>Crew</Address>
                  <Offsets>
                    <Offset>C</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>418</ID>
                  <Description>"Money"</Description>
                  <VariableType>4 Bytes</VariableType>
                  <Address>Money</Address>
                  <Offsets>
                    <Offset>C</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>433</ID>
                  <Description>"Sugar"</Description>
                  <VariableType>4 Bytes</VariableType>
                  <Address>Sugar</Address>
                  <Offsets>
                    <Offset>C</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>423</ID>
                  <Description>"Rum"</Description>
                  <VariableType>4 Bytes</VariableType>
                  <Address>Rum</Address>
                  <Offsets>
                    <Offset>C</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>424</ID>
                  <Description>"Cloth"</Description>
                  <VariableType>4 Bytes</VariableType>
                  <Address>Cloth</Address>
                  <Offsets>
                    <Offset>C</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>426</ID>
                  <Description>"Metal"</Description>
                  <VariableType>4 Bytes</VariableType>
                  <Address>Metal</Address>
                  <Offsets>
                    <Offset>C</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>425</ID>
                  <Description>"Wood"</Description>
                  <VariableType>4 Bytes</VariableType>
                  <Address>Wood</Address>
                  <Offsets>
                    <Offset>C</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>440</ID>
                  <Description>"Small Lead Shot (Freedom Cry)"</Description>
                  <VariableType>4 Bytes</VariableType>
                  <Address>LeadShot</Address>
                  <Offsets>
                    <Offset>C</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>441</ID>
                  <Description>"Makeshift Firecrackers (Freedom Cry)"</Description>
                  <VariableType>4 Bytes</VariableType>
                  <Address>FireCrackers</Address>
                  <Offsets>
                    <Offset>C</Offset>
                  </Offsets>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>486</ID>
              <Description>"Unlimited Items"</Description>
              <LastState/>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]

alloc( UnlimitedItems, 256, AC4BFSP.exe )
label( back )

UnlimitedItems:
push eax
mov eax,[g_InventoryObj]
lea eax,[eax+4]
cmp eax,ebx                                 // check if our inventory is the one processed
pop eax
jne short @f
  xor edx,edx                               // NULL value to be subtracted
@@:
sub eax,edx                                 // original code
mov [ecx+C],eax                             // original code
jmp back

/*
AC4BFSP.exe+D9E39D - 2B C2                 - sub eax,edx
AC4BFSP.exe+D9E39F - 89 41 0C              - mov [ecx+0C],eax
AC4BFSP.exe+D9E3A2 - B0 01                 - mov al,01
AC4BFSP.exe+D9E3A4 - 5D                    - pop ebp
AC4BFSP.exe+D9E3A5 - C2 0400               - ret 0004
AC4BFSP.exe+D9E3A8 - 32 C0                 - xor al,al
AC4BFSP.exe+D9E3AA - 5D                    - pop ebp
AC4BFSP.exe+D9E3AB - C2 0400               - ret 0004
*/

AC4BFSP.exe+D9E39D:
jmp UnlimitedItems
back:

[DISABLE]

AC4BFSP.exe+D9E39D:
db 2B C2 89 41 0C

dealloc( UnlimitedItems )
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>487</ID>
              <Description>"Instant Cooldown"</Description>
              <LastState/>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]

alloc( InstantCooldown, 256, AC4BFSP.exe )
label( InstantCooldown_a )
label( InstantCooldown_b )
label( back_a )
label( back_b )
label( fCooldown )

InstantCooldown:

InstantCooldown_a:
mov edi,[ecx+C]
lea esi,[ecx+10]
push eax
mov eax,[edi+64]
cmp eax,[g_ShipObj]
pop eax
jne short @f
  push eax
  mov eax,[fCooldown]        // set Cooldown to 1.0
  mov [edi+7C],eax
  pop eax
  jmp AC4BFSP.exe+1893128    // reset Cooldown without waiting
@@:
jmp back_a

InstantCooldown_b:
mov edi,[ebp+8]
lea ecx,[edi+10]
push eax
mov eax,[edi+C]
mov eax,[eax+64]
cmp eax,[g_ShipObj]
pop eax
jne short @f
  push eax
  push edi
  mov eax,[fCooldown]        // set Cooldown to 1.0
  mov edi,[edi+C]
  mov [edi+7C],eax
  pop edi
  pop eax
  jmp AC4BFSP.exe+11C7C9C    // reset Cooldown without waiting
@@:
jmp back_b

fCooldown:
dd (float)1.0

/*
- for the rest

AC4BFSP.exe+18930F0 - 56                    - push esi
AC4BFSP.exe+18930F1 - 57                    - push edi
AC4BFSP.exe+18930F2 - 8B 79 0C              - mov edi,[ecx+0C]
AC4BFSP.exe+18930F5 - 8D 71 10              - lea esi,[ecx+10]
AC4BFSP.exe+18930F8 - 8B CE                 - mov ecx,esi
AC4BFSP.exe+18930FA - E8 515C77FE           - call AC4BFSP.exe+8D50
AC4BFSP.exe+18930FF - D9 5F 7C              - fstp dword ptr [edi+7C]

- for fire barrels

AC4BFSP.exe+11C7C60 - 55                    - push ebp
AC4BFSP.exe+11C7C61 - 8B EC                 - mov ebp,esp
AC4BFSP.exe+11C7C63 - 56                    - push esi
AC4BFSP.exe+11C7C64 - 57                    - push edi
AC4BFSP.exe+11C7C65 - 8B 7D 08              - mov edi,[ebp+08]
AC4BFSP.exe+11C7C68 - 8D 4F 10              - lea ecx,[edi+10]
AC4BFSP.exe+11C7C6B - E8 E010E4FE           - call AC4BFSP.exe+8D50
AC4BFSP.exe+11C7C70 - 8B 47 0C              - mov eax,[edi+0C]
*/

AC4BFSP.exe+18930F2:
jmp InstantCooldown_a
db 90
back_a:

AC4BFSP.exe+11C7C65:
jmp InstantCooldown_b
db 90
back_b:

[DISABLE]

AC4BFSP.exe+18930F2:
db 8B 79 0C 8D 71 10

AC4BFSP.exe+11C7C65:
db 8B 7D 08 8D 4F 10

dealloc( InstantCooldown )
</AssemblerScript>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>587</ID>
          <Description>"[Cheat Handler - Deluxe Edition]"</Description>
          <Options moHideChildren="1"/>
          <LastState/>
          <Color>0000FF</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]

alloc( CheatHandlerThread, 0x1000, AC4BFSP.exe )
registersymbol( CheatHandlerThread )
CreateThread( CheatHandlerThread )
label( CheatHandlerThread_loop )
label( CheatHandlerOff )
registersymbol( CheatHandlerOff )

label( GetDebugMenuPointer )
label( g_MenuObj )
registersymbol( g_MenuObj )
label( g_PlayerObj )
registersymbol( g_PlayerObj )
label( g_InventoryObj )
registersymbol( g_InventoryObj )
label( g_HealthSystemObj )
registersymbol( g_HealthSystemObj )
label( g_PlayerVis )
registersymbol( g_PlayerVis )
label( pTemp )
label( g_ShipObj )
registersymbol( g_ShipObj )
label( g_PlayerShip )
registersymbol( g_PlayerShip )
label( g_ShipVis )
registersymbol( g_ShipVis )
label( g_CollisionPtr )
registersymbol( g_CollisionPtr )

label( GetPlayerObj )
registersymbol( GetPlayerObj )
label( GetInventoryObj )
registersymbol( GetInventoryObj )
label( GetInventoryItems )
label( GetHealthSystemObj )
registersymbol( GetHealthSystemObj )
label( GetPlayerVis )
registersymbol( GetPlayerVis )
label( GetShipObj )
registersymbol( GetShipObj )
label( GetPlayerShip )
registersymbol( GetPlayerShip )
label( GetShipVis )
registersymbol( GetShipVis )
label( GetCollisionPtr )
registersymbol( GetCollisionPtr )

label( CheckAndReinitialize )

label( TogglePlayerVanish )
registersymbol( TogglePlayerVanish )
label( TogglePlayerVanishLUA )
registersymbol( TogglePlayerVanishLUA )
label( GodMode )
registersymbol( GodMode )
label( GodModeLUA)
registersymbol( GodModeLUA )
label( PlayerGodMode )
label( PlayerGodMode_exit )
label( NavalGodMode )
label( NavalGodMode_exit )
label( Invisible )
registersymbol( Invisible )
label( InvisibleLUA )
registersymbol( InvisibleLUA )
label( InfiniteBreathMode )
registersymbol( InfiniteBreathMode )
label( InfiniteBreathModeLUA )
registersymbol( InfiniteBreathModeLUA )
label( NavalInvisible )
registersymbol( NavalInvisible )
label( NavalInvisibleLUA )
registersymbol( NavalInvisibleLUA )
label( DecreaseWantedLevel )
label( DecreaseWantedLevelLUA )
registersymbol( DecreaseWantedLevelLUA )
label( RefillAllEquipment )
label( RefillAllEquipmentLUA )
registersymbol( RefillAllEquipmentLUA )
label( RefillAllEquipmentMod )
label( RefillAllEquipmentMod_exit )
label( RefillAllEquipmentModLUA )
registersymbol( RefillAllEquipmentModLUA )
label( IncreaseWantedLevel )
label( IncreaseWantedLevelLUA )
registersymbol( IncreaseWantedLevelLUA )
label( ToggleHud )
label( ToggleHudLUA )
registersymbol( ToggleHudLUA )
label( TeleportToMarker )
label( TeleportToMarker_continue )
label( fCoords )
label( TeleportToMarkerLUA )
registersymbol( TeleportToMarkerLUA )

label( bVanish )
registersymbol( bVanish )
label( bGod )
registersymbol( bGod )
label( bInvisible )
registersymbol( bInvisible )
label( bNavalInvisible )
registersymbol( bNavalInvisible )
label( bInfiniteBreath )
registersymbol( bInfiniteBreath )

label( Bullets )
registersymbol( Bullets )
label( BerserkDarts )
registersymbol( BerserkDarts )
label( SleepDarts )
registersymbol( SleepDarts )
label( SmokeBombs )
registersymbol( SmokeBombs )
label( RopeDarts )
registersymbol( RopeDarts )
label( HeavyShot )
registersymbol( HeavyShot )
label( FireBarrels )
registersymbol( FireBarrels )
label( MortarShot )
registersymbol( MortarShot )
label( Harpoons )
registersymbol( Harpoons )
label( Crew )
registersymbol( Crew )
label( Money )
registersymbol( Money )
label( Sugar )
registersymbol( Sugar )
label( Rum )
registersymbol( Rum )
label( Cloth )
registersymbol( Cloth )
label( Metal )
registersymbol( Metal )
label( Wood )
registersymbol( Wood )
label( LeadShot )
registersymbol( LeadShot )
label( FireCrackers )
registersymbol( FireCrackers )

CheatHandlerThread:
mov eax,[AC4BFSP.exe+26D2978]
cmp [eax+144],-1 // make sure we're in-game when enabling the script
je short @f
  push C8
  call kernel32.Sleep
  jmp short CheatHandlerThread
@@:
call GetDebugMenuPointer // get the context pointer for the Debug Menu
call FetchPointers       // fetch various pointers you can use in your attempts :)
CheatHandlerThread_loop:
  push A
  call kernel32.Sleep
  cmp [CheatHandlerOff],1
  jne short @f
    mov [CheatHandlerOff],2
    ret
  @@:
  mov eax,[AC4BFSP.exe+26D2978]
  cmp [eax+144],3 // if world-&gt;main menu-&gt;world
  je short CheckAndReinitialize
    cmp [eax+144],2 // if world-&gt;reload-&gt;world
    je short CheckAndReinitialize
      jmp short CheatHandlerThread_loop
  CheckAndReinitialize:
  mov eax,[AC4BFSP.exe+26D2978]
  cmp [eax+144],-1 // check if we're back in-game
  je short @f
    push C8
    call kernel32.Sleep
    jmp short CheckAndReinitialize
  @@:
  call GetDebugMenuPointer
  call FetchPointers
  cmp byte ptr [bVanish],1    // check if option is active
  jne short @f                // if OFF, check next
    call TogglePlayerVanish   // if ON, re-enable
  @@:
  cmp byte ptr [bGod],1
  jne short @f
    call GodMode
  @@:
  cmp byte ptr [bInvisible],1
  jne short @f
    call Invisible
  @@:
  cmp byte ptr [bNavalInvisible],1
  jne short @f
    call NavalInvisible
  @@:
  cmp byte ptr [bInfiniteBreath],1
  jne short @f
    call InfiniteBreathMode
  @@:
  jmp CheatHandlerThread_loop

db CC CC CC CC

TogglePlayerVanish:
mov ecx,[g_MenuObj]
test ecx,ecx
je short @f
  push ecx
  push 1
  call AC4BFSP.exe+15A5D20 // TogglePlayerVanish
  add esp,8
@@:
ret

db CC CC CC CC

TogglePlayerVanishLUA:
call TogglePlayerVanish
xor [bVanish],1
ret 4

db CC CC CC CC

GodMode:
mov ecx,[g_MenuObj]
test ecx,ecx
je short @f
  //push ecx
  //push 1
  //call AC4BFSP.exe+15DA420 // GodMode
  //add esp,8
  call PlayerGodMode
  call NavalGodMode
@@:
ret

db CC CC CC CC

GodModeLUA:
call GodMode
xor [bGod],1
ret 4

db CC CC CC CC

Invisible:
mov ecx,[g_MenuObj]
test ecx,ecx
je short @f
  push ecx
  push 1
  call AC4BFSP.exe+15D1A00 // Invisible
  add esp,8
@@:
ret

db CC CC CC CC

InvisibleLUA:
call Invisible
xor [bInvisible],1
ret 4

db CC CC CC CC

InfiniteBreathMode:
mov ecx,[g_MenuObj]
test ecx,ecx
je short @f
  push ecx
  push 1
  call AC4BFSP.exe+15C61B0 // InfiniteBreathMode
  add esp,8
@@:
ret

db CC CC CC CC

InfiniteBreathModeLUA:
call InfiniteBreathMode
xor [bInfiniteBreath],1
ret 4

db CC CC CC CC

NavalInvisible:
mov ecx,[g_MenuObj]
test ecx,ecx
je short @f
  push ecx
  push 1
  call AC4BFSP.exe+15DA390 // NavalInvisible
  add esp,8
@@:
ret

db CC CC CC CC

NavalInvisibleLUA:
call NavalInvisible
xor [bNavalInvisible],1
ret 4

db CC CC CC CC

DecreaseWantedLevel:
mov ecx,[g_MenuObj]
test ecx,ecx
je short @f
  push ecx
  push 1
  call AC4BFSP.exe+1593570 // DecreaseWantedLevel
  add esp,8
@@:
ret

db CC CC CC CC

DecreaseWantedLevelLUA:
call DecreaseWantedLevel
ret 4

db CC CC CC CC

RefillAllEquipment:
mov ecx,[g_MenuObj]
test ecx,ecx
je short @f
  push ecx
  push 1
  call AC4BFSP.exe+15D1980 // RefillAllEquipment
  add esp,8
@@:
ret

db CC CC CC CC

RefillAllEquipmentLUA:
call RefillAllEquipment
ret 4

db CC CC CC CC

IncreaseWantedLevel:
mov ecx,[g_MenuObj]
test ecx,ecx
je short @f
  push ecx
  push 1
  call AC4BFSP.exe+1593550 // IncreaseWantedLevel
  add esp,8
@@:
ret

db CC CC CC CC

IncreaseWantedLevelLUA:
call IncreaseWantedLevel
ret 4

db CC CC CC CC

ToggleHud:
mov ecx,[g_MenuObj]
test ecx,ecx
je short @f
  push ecx
  push 1
  call AC4BFSP.exe+159B950 // ToggleHud (can be checked as well with a BOOL if need be)
  add esp,8
@@:
ret

db CC CC CC CC

ToggleHudLUA:
call ToggleHud
ret 4

db CC CC CC CC

TeleportToMarker:
mov ecx,[AC4BFSP.exe+49FF11C]
cmp byte ptr [ecx+A9],1
jne TeleportToMarker_exit
  mov eax,[g_CollisionPtr]
  mov byte ptr [eax+15],0                       // disable movement
  mov edx,[eax+98]
  mov byte ptr [edx+2C],15                      // disable collision (doesn't work underwater!)
  mov ebx,ecx
  mov ecx,[ecx+88]
  mov ecx,[ecx]
  test ecx,ecx
  je short @f

    // Note that the simple existence of the map marker doesn't mean the corresponding object appointed by the marker
    // has been loaded by the engine; from testing I've learned you need to be approx. 300m away from it to be loaded.
    // Nope, I won't figure out how to load it from any distance. Life :)

    mov ecx,[ecx+98]                            // get the pointer to coordinates
    movaps xmm0,[ecx+30]                        // load all XYZT
    jmp short TeleportToMarker_continue
  @@:

    // When pointing to a ground location or object not loaded (see above why).

    mov edi,[ebx+50]                            // get X
    mov [fCoords],edi                           // store X
    mov edi,[ebx+54]                            // get Y
    mov [fCoords+4],edi                         // store Y
    movups xmm0,[fCoords]                       // get quad for coords
  TeleportToMarker_continue:
  mov edi,[eax+8]
  movaps [edi+40],xmm0                          // update coordinates
  mov edi,[eax+98]
  movaps [edi+D0],xmm0                          // update coordinates
  mov byte ptr [edx+2C],10                      // enable collision (doesn't work underwater!)
  mov byte ptr [eax+15],1                       // enable movement
TeleportToMarker_exit:
ret

db CC CC CC CC

TeleportToMarkerLUA:
call TeleportToMarker
ret 4

db CC CC CC CC

GetDebugMenuPointer:
call AC4BFSP.exe+3CA40
test eax,eax
je short @f
  mov ecx,eax
  call AC4BFSP.exe+88C70
  test eax,eax
  je short @f
    push eax
    call AC4BFSP.exe+142A70
    add esp,4
    test eax,eax
    je short @f
      mov eax,[eax+30]
      test eax,eax
      je short @f
        mov eax,[eax]
        test eax,eax
        je short @f
          mov eax,[eax+60]
          test eax,eax
          je short @f
            mov [g_MenuObj],eax
            ret
@@:
mov [g_MenuObj],0
ret

db CC CC CC CC

FetchPointers:
call GetPlayerObj
call GetInventoryObj
call GetInventoryItems
call GetHealthSystemObj
call GetPlayerVis
call GetShipObj
call GetPlayerShip
call GetShipVis
call GetCollisionPtr
ret

db CC CC CC CC

GetPlayerObj:
mov ecx,[g_MenuObj]
push [ecx+C]
call AC4BFSP.exe+142A70
add esp,4
mov [g_PlayerObj],eax
ret

db CC CC CC CC

GetInventoryObj:
mov ecx,[g_MenuObj]
push [ecx+C]
call AC4BFSP.exe+F4FCC0
add esp,4
mov [g_InventoryObj],eax
ret

db CC CC CC CC

GetHealthSystemObj:
mov eax,[g_PlayerObj]
test eax,eax
je short @f
  mov ecx,[eax+20]
  mov eax,[ecx]
  mov edx,[eax+30]
  push esi
  mov esi,[AC4BFSP.exe+49F45D4]
  call edx
  movzx ecx,byte ptr [esi+35]
  mov edx,[eax]
  mov ecx,[edx+ecx*4]
  pop esi
  test ecx,ecx
  je short @f
    add ecx,FFFFFF0C
    mov [g_HealthSystemObj],ecx
    ret
@@:
mov [g_HealthSystemObj],0
ret

db CC CC CC CC

GetPlayerVis:
mov ecx,[g_MenuObj]
push [ecx+C]
lea ecx,[pTemp]
call AC4BFSP.exe+15AA700
mov [g_PlayerVis],eax
ret

db CC CC CC CC

GetShipObj:
mov eax,[g_MenuObj]
mov eax,[eax+C]
mov eax,[eax+5C]
test eax,eax
je @f
  mov ecx,[eax+8F4]
  test eax,eax
  je @f
    call AC4BFSP.exe+C7DC30
    mov [g_ShipObj],eax
    ret
@@:
mov [g_ShipObj],0
ret

db CC CC CC CC

GetPlayerShip:
mov eax,[g_ShipObj]
test eax,eax
je short @f
  push 0
  push eax
  call AC4BFSP.exe+BAB930
  add esp,8
  test eax,eax
  je short @f
    mov [g_PlayerShip],eax
    ret
@@:
mov [g_PlayerShip],0
ret

db CC CC CC CC

GetShipVis:
mov eax,[g_PlayerShip]
test eax,eax
je short @f
  lea eax,[eax+4B0]
  mov [g_ShipVis],eax
  ret
@@:
mov [g_ShipVis],0
ret

db CC CC CC CC

GetCollisionPtr:
mov eax,[g_MenuObj]
mov ecx,[eax+10]
mov ecx,[ecx+108]
call AC4BFSP.exe+1CD810
test eax,eax
je short @f
  mov [g_CollisionPtr],eax
  ret
@@:
mov [g_CollisionPtr],0
ret

db CC CC CC CC

PlayerGodMode:
mov edi,[g_MenuObj]
mov esi,[edi+C]
test esi,esi
je PlayerGodMode_exit
  mov ecx,edi
  call AC4BFSP.exe+15BA930
  test eax,eax
  je PlayerGodMode_exit
    push esi
    call AC4BFSP.exe+142A70
    push eax
    call AC4BFSP.exe+F2F950
    add esp,8
    mov bl,al
    mov ecx,esi
    mov esi,[ecx+E8]
    mov eax,[esi+1C]
    test bl,bl
    sete cl
    movzx edx,cl
    push edx
    lea ecx,[esi+1C]
    call AC4BFSP.exe+C4DA90
PlayerGodMode_exit:
ret

db CC CC CC CC

NavalGodMode:
mov eax,[g_MenuObj]
mov eax,[eax+C]
test eax,eax
je NavalGodMode_exit
  mov eax,[eax+5C]
  test eax,eax
  je NavalGodMode_exit
    mov ecx,[eax+8F4]
    test ecx,ecx
    je NavalGodMode_exit
      call AC4BFSP.exe+C7DC30
      test eax,eax
      je NavalGodMode_exit
        push 0
        push eax
        call AC4BFSP.exe+BAB930
        add esp,8
        test eax,eax
        je NavalGodMode_exit
          mov esi,eax
          mov eax,[esi]
          mov edx,[eax+1A8]
          mov ecx,esi
          call edx
          mov bl,al
          test esi,esi
          je short NavalGodMode_exit
            mov eax,[esi]
            mov eax,[eax+EC]
            test bl,bl
            sete cl
            movzx edx,cl
            push edx
            mov ecx,esi
            call eax
NavalGodMode_exit:
ret

db CC CC CC CC

GetInventoryItems:
mov eax,[g_InventoryObj]
test eax,eax
je @f
  lea edi,[eax+4]
  push B // Bullets
  mov ecx,edi
  call AC4BFSP.exe+1140010
  mov [Bullets],eax
  push 24 // Berserk Darts
  mov ecx,edi
  call AC4BFSP.exe+1140010
  mov [BerserkDarts],eax
  push 23 // Sleep Darts
  mov ecx,edi
  call AC4BFSP.exe+1140010
  mov [SleepDarts],eax
  push 5 // Smoke Bombs
  mov ecx,edi
  call AC4BFSP.exe+1140010
  mov [SmokeBombs],eax
  push 20 // Rope Darts
  mov ecx,edi
  call AC4BFSP.exe+1140010
  mov [RopeDarts],eax
  push 2F // Heavy Shot
  mov ecx,edi
  call AC4BFSP.exe+1140010
  mov [HeavyShot],eax
  push 31 // Fire Barrels
  mov ecx,edi
  call AC4BFSP.exe+1140010
  mov [FireBarrels],eax
  push 30 // Mortar Shot
  mov ecx,edi
  call AC4BFSP.exe+1140010
  mov [MortarShot],eax
  push 41 // Harpoons
  mov ecx,edi
  call AC4BFSP.exe+1140010
  mov [Harpoons],eax
  push 38 // Crew
  mov ecx,edi
  call AC4BFSP.exe+1140010
  mov [Crew],eax
  push 1 // Money
  mov ecx,edi
  call AC4BFSP.exe+1140010
  mov [Money],eax
  push 2D // Sugar
  mov ecx,edi
  call AC4BFSP.exe+1140010
  mov [Sugar],eax
  push 2C // Rum
  mov ecx,edi
  call AC4BFSP.exe+1140010
  mov [Rum],eax
  push 2B // Cloth
  mov ecx,edi
  call AC4BFSP.exe+1140010
  mov [Cloth],eax
  push 2A // Metal
  mov ecx,edi
  call AC4BFSP.exe+1140010
  mov [Metal],eax
  push 29 // Wood
  mov ecx,edi
  call AC4BFSP.exe+1140010
  mov [Wood],eax
  push 4D // Small Lead Shot
  mov ecx,edi
  call AC4BFSP.exe+1140010
  mov [LeadShot],eax
  push 4C // Makeshift Firecrackers
  mov ecx,edi
  call AC4BFSP.exe+1140010
  mov [FireCrackers],eax
@@:
ret

db CC CC CC CC

RefillAllEquipmentMod:
push ebp
mov ebp,esp
mov ecx,[g_MenuObj]
test ecx,ecx
je RefillAllEquipmentMod_exit
  push ecx
  push esi
  mov esi,ecx
  mov eax,[esi+C]
  test eax,eax
  je RefillAllEquipmentMod_exit
    mov eax,[eax+9C]
    and al,7
    cmp al,1
    jne RefillAllEquipmentMod_exit
      mov eax,[esi+C]
      push eax
      lea ecx,[esi+7A0]
      call AC4BFSP.exe+15AA700
      test eax,eax
      je RefillAllEquipmentMod_exit
        mov ecx,[eax+1C]
        mov [ebp-4],ecx
        push 1
        push 0
        push 0
        push B // Bullets
        push 64
        lea ecx,[ebp-4]
        call AC4BFSP.exe+C55F60
        push 1
        push 0
        push 0
        push 24 // Berserk Darts
        push 64
        lea ecx,[ebp-4]
        call AC4BFSP.exe+C55F60
        push 1
        push 0
        push 0
        push 23 // Sleep Darts
        push 64
        lea ecx,[ebp-4]
        call AC4BFSP.exe+C55F60
        push 1
        push 0
        push 0
        push 5 // Smoke Bombs
        push 64
        lea ecx,[ebp-4]
        call AC4BFSP.exe+C55F60
        push 1
        push 0
        push 0
        push 20 // Rope Darts
        push 64
        lea ecx,[ebp-4]
        call AC4BFSP.exe+C55F60
        push 1
        push 0
        push 0
        push 2F // Heavy Shot
        push 64
        lea ecx,[ebp-4]
        call AC4BFSP.exe+C55F60
        push 1
        push 0
        push 0
        push 31 // Fire Barrels
        push 64
        lea ecx,[ebp-4]
        call AC4BFSP.exe+C55F60
        push 1
        push 0
        push 0
        push 30 // Mortar Shot
        push 64
        lea ecx,[ebp-4]
        call AC4BFSP.exe+C55F60
        push 1
        push 0
        push 0
        push 41 // Harpoons
        push 64
        lea ecx,[ebp-4]
        call AC4BFSP.exe+C55F60
        push 1
        push 0
        push 0
        push 38 // Crew
        push 64
        lea ecx,[ebp-4]
        call AC4BFSP.exe+C55F60
        push 1
        push 0
        push 0
        push 1 // Money
        push 2710
        lea ecx,[ebp-4]
        call AC4BFSP.exe+C55F60
        push 1
        push 0
        push 0
        push 2D // Sugar
        push 1388
        lea ecx,[ebp-4]
        call AC4BFSP.exe+C55F60
        push 1
        push 0
        push 0
        push 2C // Rum
        push 1388
        lea ecx,[ebp-4]
        call AC4BFSP.exe+C55F60
        push 1
        push 0
        push 0
        push 2B // Cloth
        push 1388
        lea ecx,[ebp-4]
        call AC4BFSP.exe+C55F60
        push 1
        push 0
        push 0
        push 2A // Metal
        push 1388
        lea ecx,[ebp-4]
        call AC4BFSP.exe+C55F60
        push 1
        push 0
        push 0
        push 29 // Wood
        push 1388
        lea ecx,[ebp-4]
        call AC4BFSP.exe+C55F60
        push 1
        push 0
        push 0
        push 4D // Small Lead Shot
        push 64
        lea ecx,[ebp-4]
        call AC4BFSP.exe+C55F60
        push 1
        push 0
        push 0
        push 4C // Makeshift Firecrackers
        push 64
        lea ecx,[ebp-4]
        call AC4BFSP.exe+C55F60
RefillAllEquipmentMod_exit:
pop esi
mov esp,ebp
pop ebp
ret

db CC CC CC CC

RefillAllEquipmentModLUA:
call RefillAllEquipmentMod
ret 4

db CC CC CC CC

/*
GetEnemyShip:
mov eax,[g_PlayerShip]
mov eax,[eax+F0]
mov eax,[eax]
test eax,eax
je short @f
  push eax
  call AC4BFSP.exe+C970B0
  add esp,4
  mov [g_EnemyShip],eax
@@:
ret

db CC CC CC CC
*/

CheatHandlerOff:
dd 0
g_MenuObj:
dd 0
g_PlayerObj:
dd 0
g_InventoryObj:
dd 0
g_HealthSystemObj:
dd 0
g_PlayerVis:
dd 0
pTemp:
dd 0
g_ShipObj:
dd 0
g_PlayerShip:
dd 0
g_ShipVis:
dd 0
g_CollisionPtr:
dd 0
g_EnemyShip:
dd 0

bVanish: // I know "b" stands for BYTE and I'm using "dd" below for DWORD :P
dd 0
bGod:
dd 0
bInvisible:
dd 0
bNavalInvisible:
dd 0
bInfiniteBreath:
dd 0

fCoords:
dd 0 0 (float)8.0 (float)1.0

Bullets:
dd 0
BerserkDarts:
dd 0
SleepDarts:
dd 0
SmokeBombs:
dd 0
RopeDarts:
dd 0
HeavyShot:
dd 0
FireBarrels:
dd 0
MortarShot:
dd 0
Harpoons:
dd 0
Crew:
dd 0
Money:
dd 0
Sugar:
dd 0
Rum:
dd 0
Cloth:
dd 0
Metal:
dd 0
Wood:
dd 0
LeadShot:
dd 0
FireCrackers:
dd 0

[DISABLE]

{$lua}

if( syntaxcheck == false ) then --actual execution
  local starttime = getTickCount()

if readInteger( "CheatHandlerOff" ) == 0 then --could be 2 already
  writeInteger( "CheatHandlerOff", 1 ) --tell the thread to kill itself
end

while( getTickCount() &lt; starttime + 1000 ) and ( readInteger( "CheatHandlerOff" ) ~= 2 ) do --wait till it has finished
  sleep( 20 )
end

if( getTickCount() &gt; starttime + 1000 ) then --could happen when the window is shown
  showMessage( 'Disabling the thread failed!' )
  error( 'Thread disabling failed!' )
end
  sleep( 1 )
end

{$asm}

unregistersymbol( FireCrackers )
unregistersymbol( LeadShot )
unregistersymbol( Wood )
unregistersymbol( Metal )
unregistersymbol( Cloth )
unregistersymbol( Rum )
unregistersymbol( Sugar )
unregistersymbol( Money )
unregistersymbol( Crew )
unregistersymbol( Harpoons )
unregistersymbol( MortarShot )
unregistersymbol( FireBarrels )
unregistersymbol( HeavyShot )
unregistersymbol( RopeDarts )
unregistersymbol( SmokeBombs )
unregistersymbol( SleepDarts )
unregistersymbol( BerserkDarts )
unregistersymbol( Bullets )

unregistersymbol( bInfiniteBreath )
unregistersymbol( bNavalInvisible )
unregistersymbol( bInvisible )
unregistersymbol( bGod )
unregistersymbol( bVanish )

unregistersymbol( TeleportToMarkerLUA )
unregistersymbol( ToggleHudLUA )
unregistersymbol( IncreaseWantedLevelLUA )
unregistersymbol( RefillAllEquipmentModLUA )
unregistersymbol( RefillAllEquipmentLUA )
unregistersymbol( DecreaseWantedLevelLUA )
unregistersymbol( NavalInvisibleLUA )
unregistersymbol( NavalInvisible )
unregistersymbol( InfiniteBreathModeLUA )
unregistersymbol( InfiniteBreathMode )
unregistersymbol( InvisibleLUA )
unregistersymbol( Invisible )
unregistersymbol( GodModeLUA )
unregistersymbol( GodMode )
unregistersymbol( TogglePlayerVanishLUA )
unregistersymbol( TogglePlayerVanish )

unregistersymbol( GetCollisionPtr )
unregistersymbol( g_CollisionPtr )
unregistersymbol( GetShipVis )
unregistersymbol( g_ShipVis )
unregistersymbol( GetPlayerShip )
unregistersymbol( g_PlayerShip )
unregistersymbol( GetShipObj )
unregistersymbol( g_ShipObj )
unregistersymbol( GetPlayerVis )
unregistersymbol( g_PlayerVis )
unregistersymbol( GetHealthSystemObj )
unregistersymbol( g_HealthSystemObj )
unregistersymbol( GetInventoryObj )
unregistersymbol( g_InventoryObj )
unregistersymbol( GetPlayerObj )
unregistersymbol( g_PlayerObj )
unregistersymbol( g_MenuObj )

unregistersymbol( CheatHandlerOff )
unregistersymbol( CheatHandlerThread )
dealloc( CheatHandlerThread )
</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>588</ID>
              <Description>"Toggle Player Vanish"</Description>
              <DropDownList ReadOnly="1" DescriptionOnly="1" DisplayValueAsItem="1">0:OFF
1:ON
</DropDownList>
              <VariableType>4 Bytes</VariableType>
              <Address>bVanish</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>589</ID>
              <Description>"God Mode"</Description>
              <DropDownList ReadOnly="1" DescriptionOnly="1" DisplayValueAsItem="1">0:OFF
1:ON
</DropDownList>
              <VariableType>4 Bytes</VariableType>
              <Address>bGod</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>590</ID>
              <Description>"Invisible"</Description>
              <DropDownList ReadOnly="1" DescriptionOnly="1" DisplayValueAsItem="1">0:OFF
1:ON
</DropDownList>
              <VariableType>4 Bytes</VariableType>
              <Address>bInvisible</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>591</ID>
              <Description>"Infinite Breath"</Description>
              <DropDownList ReadOnly="1" DescriptionOnly="1" DisplayValueAsItem="1">0:OFF
1:ON
</DropDownList>
              <VariableType>4 Bytes</VariableType>
              <Address>bInfiniteBreath</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>592</ID>
              <Description>"Naval Invisible"</Description>
              <DropDownList ReadOnly="1" DescriptionOnly="1" DisplayValueAsItem="1">0:OFF
1:ON
</DropDownList>
              <VariableType>4 Bytes</VariableType>
              <Address>bNavalInvisible</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>593</ID>
              <Description>"Player/Ship Inventory"</Description>
              <Options moHideChildren="1"/>
              <LastState Value="" RealAddress="00000000"/>
              <Color>008000</Color>
              <GroupHeader>1</GroupHeader>
              <CheatEntries>
                <CheatEntry>
                  <ID>594</ID>
                  <Description>"Bullets"</Description>
                  <VariableType>4 Bytes</VariableType>
                  <Address>Bullets</Address>
                  <Offsets>
                    <Offset>C</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>595</ID>
                  <Description>"Berserk Darts"</Description>
                  <VariableType>4 Bytes</VariableType>
                  <Address>BerserkDarts</Address>
                  <Offsets>
                    <Offset>C</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>596</ID>
                  <Description>"Sleep Darts"</Description>
                  <VariableType>4 Bytes</VariableType>
                  <Address>SleepDarts</Address>
                  <Offsets>
                    <Offset>C</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>597</ID>
                  <Description>"Smoke Bombs"</Description>
                  <VariableType>4 Bytes</VariableType>
                  <Address>SmokeBombs</Address>
                  <Offsets>
                    <Offset>C</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>598</ID>
                  <Description>"Rope Darts"</Description>
                  <VariableType>4 Bytes</VariableType>
                  <Address>RopeDarts</Address>
                  <Offsets>
                    <Offset>C</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>599</ID>
                  <Description>"Heavy Shot"</Description>
                  <VariableType>4 Bytes</VariableType>
                  <Address>HeavyShot</Address>
                  <Offsets>
                    <Offset>C</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>600</ID>
                  <Description>"Fire Barrels"</Description>
                  <VariableType>4 Bytes</VariableType>
                  <Address>FireBarrels</Address>
                  <Offsets>
                    <Offset>C</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>601</ID>
                  <Description>"Mortar Shot"</Description>
                  <VariableType>4 Bytes</VariableType>
                  <Address>MortarShot</Address>
                  <Offsets>
                    <Offset>C</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>602</ID>
                  <Description>"Harpoons"</Description>
                  <VariableType>4 Bytes</VariableType>
                  <Address>Harpoons</Address>
                  <Offsets>
                    <Offset>C</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>603</ID>
                  <Description>"Ship Crew"</Description>
                  <VariableType>4 Bytes</VariableType>
                  <Address>Crew</Address>
                  <Offsets>
                    <Offset>C</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>604</ID>
                  <Description>"Money"</Description>
                  <VariableType>4 Bytes</VariableType>
                  <Address>Money</Address>
                  <Offsets>
                    <Offset>C</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>605</ID>
                  <Description>"Sugar"</Description>
                  <VariableType>4 Bytes</VariableType>
                  <Address>Sugar</Address>
                  <Offsets>
                    <Offset>C</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>606</ID>
                  <Description>"Rum"</Description>
                  <VariableType>4 Bytes</VariableType>
                  <Address>Rum</Address>
                  <Offsets>
                    <Offset>C</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>607</ID>
                  <Description>"Cloth"</Description>
                  <VariableType>4 Bytes</VariableType>
                  <Address>Cloth</Address>
                  <Offsets>
                    <Offset>C</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>608</ID>
                  <Description>"Metal"</Description>
                  <VariableType>4 Bytes</VariableType>
                  <Address>Metal</Address>
                  <Offsets>
                    <Offset>C</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>609</ID>
                  <Description>"Wood"</Description>
                  <VariableType>4 Bytes</VariableType>
                  <Address>Wood</Address>
                  <Offsets>
                    <Offset>C</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>610</ID>
                  <Description>"Small Lead Shot (Freedom Cry)"</Description>
                  <VariableType>4 Bytes</VariableType>
                  <Address>LeadShot</Address>
                  <Offsets>
                    <Offset>C</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>611</ID>
                  <Description>"Makeshift Firecrackers (Freedom Cry)"</Description>
                  <VariableType>4 Bytes</VariableType>
                  <Address>FireCrackers</Address>
                  <Offsets>
                    <Offset>C</Offset>
                  </Offsets>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>612</ID>
              <Description>"Unlimited Items"</Description>
              <LastState/>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]

alloc( UnlimitedItems, 256, AC4BFSP.exe )
label( back )

UnlimitedItems:
push eax
mov eax,[g_InventoryObj]
lea eax,[eax+4]
cmp eax,ebx                                 // check if our inventory is the one processed
pop eax
jne short @f
  xor edx,edx                               // NULL value to be subtracted
@@:
sub eax,edx                                 // original code
mov [ecx+C],eax                             // original code
jmp back

/*
AC4BFSP.exe+BB4C9D - 2B C2                 - sub eax,edx
AC4BFSP.exe+BB4C9F - 89 41 0C              - mov [ecx+C],eax
AC4BFSP.exe+BB4CA2 - B0 01                 - mov al,1
AC4BFSP.exe+BB4CA4 - 5D                    - pop ebp
AC4BFSP.exe+BB4CA5 - C2 0400               - ret 4
AC4BFSP.exe+BB4CA8 - 32 C0                 - xor al,al
AC4BFSP.exe+BB4CAA - 5D                    - pop ebp
AC4BFSP.exe+BB4CAB - C2 0400               - ret 4
*/

AC4BFSP.exe+BB4C9D:
jmp UnlimitedItems
back:

[DISABLE]

AC4BFSP.exe+BB4C9D:
db 2B C2 89 41 0C

dealloc( UnlimitedItems )
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>613</ID>
              <Description>"Instant Cooldown"</Description>
              <LastState/>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]

alloc( InstantCooldown, 256, AC4BFSP.exe )
label( InstantCooldown_a )
label( InstantCooldown_b )
label( back_a )
label( back_b )
label( fCooldown )

InstantCooldown:

InstantCooldown_a:
mov edi,[ecx+C]
lea esi,[ecx+10]
push eax
mov eax,[edi+64]
cmp eax,[g_ShipObj]
pop eax
jne short @f
  push eax
  mov eax,[fCooldown]        // set Cooldown to 1.0
  mov [edi+7C],eax
  pop eax
  jmp AC4BFSP.exe+17FDF18    // reset Cooldown without waiting
@@:
jmp back_a

InstantCooldown_b:
mov edi,[ebp+8]
lea ecx,[edi+10]
push eax
mov eax,[edi+C]
mov eax,[eax+64]
cmp eax,[g_ShipObj]
pop eax
jne short @f
  push eax
  push edi
  mov eax,[fCooldown]        // set Cooldown to 1.0
  mov edi,[edi+C]
  mov [edi+7C],eax
  pop edi
  pop eax
  jmp AC4BFSP.exe+15F55AC    // reset Cooldown without waiting
@@:
jmp back_b

fCooldown:
dd (float)1.0

/*
- for the rest

AC4BFSP.exe+17FDEE0 - 56                    - push esi
AC4BFSP.exe+17FDEE1 - 57                    - push edi
AC4BFSP.exe+17FDEE2 - 8B 79 0C              - mov edi,[ecx+C]
AC4BFSP.exe+17FDEE5 - 8D 71 10              - lea esi,[ecx+10]
AC4BFSP.exe+17FDEE8 - 8B CE                 - mov ecx,esi
AC4BFSP.exe+17FDEEA - E8 210281FE           - call AC4BFSP.exe+E110
AC4BFSP.exe+17FDEEF - D9 5F 7C              - fstp dword ptr [edi+7C]

- for fire barrels

AC4BFSP.exe+15F5570 - 55                    - push ebp
AC4BFSP.exe+15F5571 - 8B EC                 - mov ebp,esp
AC4BFSP.exe+15F5573 - 56                    - push esi
AC4BFSP.exe+15F5574 - 57                    - push edi
AC4BFSP.exe+15F5575 - 8B 7D 08              - mov edi,[ebp+8]
AC4BFSP.exe+15F5578 - 8D 4F 10              - lea ecx,[edi+10]
AC4BFSP.exe+15F557B - E8 908BA1FE           - call AC4BFSP.exe+E110
AC4BFSP.exe+15F5580 - 8B 47 0C              - mov eax,[edi+C]
*/

AC4BFSP.exe+17FDEE2:
jmp InstantCooldown_a
db 90
back_a:

AC4BFSP.exe+15F5575:
jmp InstantCooldown_b
db 90
back_b:

[DISABLE]

AC4BFSP.exe+17FDEE2:
db 8B 79 0C 8D 71 10

AC4BFSP.exe+15F5575:
db 8B 7D 08 8D 4F 10

dealloc( InstantCooldown )
</AssemblerScript>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>210</ID>
      <Description>"[Cheats]"</Description>
      <Options moHideChildren="1"/>
      <LastState/>
      <Color>0000FF</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]

aobscanmodule( pMenu_AOB, AC4BFSP.exe, 568BF18B0D????????8D86????????50E8????????8B0D????????68????????81C1????????56518D8E????????E8????????C705????????000000005EC3 )
label( pMenu )
registersymbol( pMenu )
[pMenu_AOB+35]:
pMenu:

aobscanmodule( DisableDisabler_AOB, AC4BFSP.exe, B001EBC184C9 )
label( DisableDisabler )
registersymbol( DisableDisabler )
DisableDisabler_AOB:
DisableDisabler:
xor al,al

[DISABLE]

DisableDisabler:
mov al,1

unregistersymbol( DisableDisabler )
unregistersymbol( pMenu )
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>211</ID>
          <Description>"[Cheats] (0 - locked; 1 - unlocked)"</Description>
          <Options moHideChildren="1"/>
          <LastState Value="" RealAddress="00000000"/>
          <GroupHeader>1</GroupHeader>
          <CheatEntries>
            <CheatEntry>
              <ID>212</ID>
              <Description>"[1] Celestial Navigation"</Description>
              <VariableType>4 Bytes</VariableType>
              <Address>pMenu</Address>
              <Offsets>
                <Offset>FC</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>213</ID>
              <Description>"[2] Arrr Matey!"</Description>
              <VariableType>4 Bytes</VariableType>
              <Address>pMenu</Address>
              <Offsets>
                <Offset>12C</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>214</ID>
              <Description>"[3] No Quarter"</Description>
              <VariableType>4 Bytes</VariableType>
              <Address>pMenu</Address>
              <Offsets>
                <Offset>15C</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>215</ID>
              <Description>"[4] Scourge Of The Seven Seas"</Description>
              <VariableType>4 Bytes</VariableType>
              <Address>pMenu</Address>
              <Offsets>
                <Offset>18C</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>216</ID>
              <Description>"[5] Loaded To The Gunwale"</Description>
              <VariableType>4 Bytes</VariableType>
              <Address>pMenu</Address>
              <Offsets>
                <Offset>1BC</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>217</ID>
              <Description>"[6] Poseidon's Will"</Description>
              <VariableType>4 Bytes</VariableType>
              <Address>pMenu</Address>
              <Offsets>
                <Offset>1EC</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>218</ID>
              <Description>"[7] Dead Men Tell No Tales"</Description>
              <VariableType>4 Bytes</VariableType>
              <Address>pMenu</Address>
              <Offsets>
                <Offset>21C</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>219</ID>
              <Description>"[8] Shiver Me Timbers!"</Description>
              <VariableType>4 Bytes</VariableType>
              <Address>pMenu</Address>
              <Offsets>
                <Offset>24C</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>220</ID>
              <Description>"[9] Armed To The Teeth"</Description>
              <VariableType>4 Bytes</VariableType>
              <Address>pMenu</Address>
              <Offsets>
                <Offset>27C</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>221</ID>
              <Description>"[10] Deceased Crew"</Description>
              <VariableType>4 Bytes</VariableType>
              <Address>pMenu</Address>
              <Offsets>
                <Offset>2AC</Offset>
              </Offsets>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>525</ID>
      <Description>"[Other Scripts]"</Description>
      <Options moHideChildren="1"/>
      <LastState Value="" RealAddress="00000000"/>
      <Color>0080FF</Color>
      <GroupHeader>1</GroupHeader>
      <CheatEntries>
        <CheatEntry>
          <ID>62</ID>
          <Description>"No Reload (Cielos)"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]

aobscanmodule( pistolsfiredcheckAOB, AC4BFSP.exe, 8B 48 08 3B CA ** ** 33 C9 89 48 08 )
registersymbol( pistolsfiredcheckAOB )
aobscanmodule( pistolammoclipmaxreadAOB, AC4BFSP.exe, 8B 40 0C 5D C2 04 00 33 C0 5D C2 04 00 )
registersymbol( pistolammoclipmaxreadAOB )

label( pPistols )
registersymbol( pPistols )

alloc( newmem, 0x1000, AC4BFSP.exe )
label( returnhere1 )
label( originalcode1 )
label( exit1 )
label( pistolcheckloop )
label( pistolcheckloopendcheck )
label( islastpistol )
label( reloadallpistolsloop )
label( reloadallpistolsloopendcheck )
label( afterreload )

label( newmem2 )
label( returnhere2 )
label( originalcode2 )
label( exit2 )
label( checkfirearmchange2 )
label( emptyotherpistolspointersloop2 )

newmem:
pushad
mov ebx,3
pistolcheckloop:
mov ecx,[pPistols+ebx*4]
test ecx,ecx
jz pistolcheckloopendcheck
cmp eax,ecx
je islastpistol
jmp originalcode1

pistolcheckloopendcheck:
test ebx,ebx
jz originalcode1
dec ebx
jmp pistolcheckloop

islastpistol:
xor ebx,ebx

reloadallpistolsloop:
mov ecx,[pPistols+ebx*4]
test ecx,ecx
jz afterreload
mov edx,[ecx+10]
mov [ecx+8],edx

reloadallpistolsloopendcheck:
cmp ebx,3
jge afterreload
inc ebx
jmp reloadallpistolsloop

afterreload:
popad
mov ecx,[eax+08]
cmp ecx,edx
jmp pistolsfiredcheckAOB+c

originalcode1:
popad
mov ecx,[eax+08]
cmp ecx,edx

exit1:
jmp returnhere1

newmem2:
pushfd
cmp ebx,3
jg checkfirearmchange2
cmp ebx,0
jl checkfirearmchange2
mov [pPistols+ebx*4],eax
je checkfirearmchange2
jmp originalcode2

checkfirearmchange2:
cmp [pPistols],eax
mov [pPistols],eax
je originalcode2

mov ebp,1
emptyotherpistolspointersloop2:
mov [pPistols+ebp*4],0
inc ebp
cmp ebp,4
jl emptyotherpistolspointersloop2
jmp originalcode2

originalcode2:
popfd
mov eax,[eax+0C]
pop ebp
ret 0004

exit2:
jmp returnhere2

pPistols:
dd 0
dd 0
dd 0
dd 0

pistolsfiredcheckAOB:
jmp newmem
returnhere1:

pistolammoclipmaxreadAOB:
jmp newmem2
nop
nop
returnhere2:

[DISABLE]

pistolsfiredcheckAOB:
db 8B 48 08 3B CA

pistolammoclipmaxreadAOB:
db 8B 40 0C 5D C2 04 00

dealloc( newmem )
unregistersymbol( pPistols )
unregistersymbol( pistolammoclipmaxreadAOB )
unregistersymbol( pistolsfiredcheckAOB )
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>109</ID>
          <Description>"On Demand Rope Darts + Throwing Knives (Cielos) // not working on SE"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscan(equippedtoolreadAOB,8B 41 F4 8B 4D 08 89 01)
registersymbol(equippedtoolreadAOB)
aobscan(somereadaltAOB,8B 11 8B 42 50 FF D0 5E 5D C2 04 00)
registersymbol(somereadaltAOB)

label(pEquippedTool)
registersymbol(pEquippedTool)
label(pThrowingDagger)
registersymbol(pThrowingDagger)

label(bZeroThrowingDaggerFlag)

alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)
label(pressed)
label(endcheck)
label(throwingdaggerequipped)

label(newmem2)
label(returnhere2)
label(originalcode2)
label(exit2)

label(newmem6)
label(exit6)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
mov [pEquippedTool],ecx
pushfd
pushad
push 10 //Shift
call GetAsyncKeyState
shr ax,#15
cmp ax,1
popad
jne originalcode
mov eax,[pThrowingDagger]
test eax,eax
jz pressed
mov [eax+c],1
jmp pressed

pressed:
mov eax,7
jmp endcheck

originalcode:
mov eax,[ecx-0C]
//mov ecx,[ebp+08]

endcheck:
cmp eax,7
je throwingdaggerequipped
cmp [bZeroThrowingDaggerFlag],1
je exit
mov [bZeroThrowingDaggerFlag],1
mov ecx,[pThrowingDagger]
test ecx,ecx
jz exit
mov [ecx+c],0
jmp exit

throwingdaggerequipped:
//cmp [bZeroThrowingDaggerFlag],0
//je exit
mov [bZeroThrowingDaggerFlag],0
/*mov ecx,[pThrowingDagger]
test ecx,ecx
jz exit
mov [ecx+c],1*/
jmp exit

exit:
popfd//
mov ecx,[ebp+08]//
jmp newmem6

///

newmem2:
cmp esi,8
jne originalcode2
mov [pThrowingDagger],ecx

originalcode2:
mov edx,[ecx]
mov eax,[edx+50]

exit2:
jmp returnhere2

///

newmem6:
pushfd
pushad
push 11 //Ctrl
call GetAsyncKeyState
shr ax,#15
cmp ax,1
popad
jne exit6
mov eax,4

exit6:
popfd
jmp returnhere

///
pEquippedTool:
dd 0
pThrowingDagger:
dd 0

bZeroThrowingDaggerFlag:
db 0
///

equippedtoolreadAOB: //"AC4BFSP.exe"+E76433:
jmp newmem
nop
returnhere:

somereadaltAOB: //"AC4BFSP.exe"+C6E96F:
jmp newmem2
returnhere2:




[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
equippedtoolreadAOB: //"AC4BFSP.exe"+E76433:
db 8B 41 F4 8B 4D 08
//Alt: mov eax,[ecx-0C]
//Alt: mov ecx,[ebp+08]
unregistersymbol(equippedtoolreadAOB)
somereadaltAOB: //"AC4BFSP.exe"+C6E96F:
db 8B 11 8B 42 50
//Alt: mov edx,[ecx]
//Alt: mov eax,[edx+50]
unregistersymbol(somereadaltAOB)

unregistersymbol(pEquippedTool)
unregistersymbol(pThrowingDagger)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>45</ID>
          <Description>"Freeze Countdown Timer (mgr.inz.Player)"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>//Credit To: mgr.inz.Player (Script); GrandPa (Reverse Engineering AC Timers)
[ENABLE]

alloc( Countdown, 128, AC4BFSP.exe )
label( returnhere )
label( exit )
//label(timehack)

//aobscan(RetCheck1,D9 5D FC 80 BE FC 00 00 00 00 74 11 )
//aobscan(RetCheck2,D9 5D FC 0F B6 46 66 D9 45 FC 50 51 )
//aobscan(RetCheck3,8D 8E 38 02 00 00 E8 xx xx xx xx 51 D9 1C 24 E8 )
//aobscan(RetCheck4,6A 01 8b ce E8 xx xx xx xx 51 D9 1C 24 E8 )
aobscanmodule( CountdownAOB, AC4BFSP.exe, 8B 41 1C 8B 38 8B 70 04 xx xx xx xx xx 08 )
registersymbol( CountdownAOB )

//Countdown:
//cmp [ebp+04],RetCheck1
//je short timehack
//cmp [ebp+04],RetCheck2
//je short timehack
//cmp [ebp+04],RetCheck3+0b
//je short timehack
//cmp [ebp+04],RetCheck4+09
//je short timehack
//jmp short exit

Countdown:
mov [ecx+08],edi
add [ecx+08],B71B0      // always 25 seconds left, (25 * 30000 = 750000 = B71B0 (hex)

exit:
mov eax,[ecx+0C] //original
mov edx,[ecx+08] //original
jmp returnhere

CountdownAOB+08:
jmp Countdown
db 08
returnhere:

[DISABLE]

CountdownAOB+08:
mov eax,[ecx+0C]
mov edx,[ecx+08]

unregistersymbol( CountdownAOB )
dealloc( Countdown )
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>46</ID>
          <Description>"Freeze Stopwatch Timer (mgr.inz.Player)"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>//Credit To: mgr.inz.Player (Script); GrandPa (Reverse Engineering AC Timers)
[ENABLE]

alloc( stopwatch, 64, AC4BFSP.exe )
label( returnhere )
label( exit )
//aobscan(RetCheck, e8 xx xx xx xx 8d 8b 08 01 00 00 e8 xx xx xx xx 51)

aobscanmodule( RetCheck, AC4BFSP.exe, 8B C8 DE C1 25 FF FF FF 7F 89 45 FC )
aobscanmodule( StopwatchAOB, AC4BFSP.exe, 8B 51 1C 8B 02 8B 52 04 xx xx xx xx xx 89 45 F8 )
registersymbol( StopwatchAOB )

stopwatch:
cmp [ebp+4],RetCheck+28
jne short exit
mov [ecx],eax
sub [ecx],38E8C // 7.77 seconds * 30000 = 233100 = 38E8C(hex)

exit:
sub eax,[ecx] //original
sbb edx,[ecx+04] //original
jmp returnhere

StopwatchAOB+8:
jmp stopwatch
returnhere:

[DISABLE]

StopwatchAOB+8:
sub eax,[ecx]
sbb edx,[ecx+04]
//Alt: db 2B 01 1B 51 04

unregistersymbol( StopwatchAOB )
dealloc( stopwatch )
</AssemblerScript>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>478</ID>
      <Description>"[Debug]"</Description>
      <Options moHideChildren="1"/>
      <LastState Value="" RealAddress="00000000"/>
      <Color>C0C0C0</Color>
      <GroupHeader>1</GroupHeader>
      <CheatEntries>
        <CheatEntry>
          <ID>454</ID>
          <Description>"g_MenuObj"</Description>
          <ShowAsHex>1</ShowAsHex>
          <VariableType>4 Bytes</VariableType>
          <Address>g_MenuObj</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>452</ID>
          <Description>"g_PlayerObj"</Description>
          <ShowAsHex>1</ShowAsHex>
          <VariableType>4 Bytes</VariableType>
          <Address>g_PlayerObj</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>453</ID>
          <Description>"g_InventoryObj"</Description>
          <ShowAsHex>1</ShowAsHex>
          <VariableType>4 Bytes</VariableType>
          <Address>g_InventoryObj</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>455</ID>
          <Description>"g_HealthSystemObj"</Description>
          <ShowAsHex>1</ShowAsHex>
          <VariableType>4 Bytes</VariableType>
          <Address>g_HealthSystemObj</Address>
          <CheatEntries>
            <CheatEntry>
              <ID>464</ID>
              <Description>"Health"</Description>
              <VariableType>Byte</VariableType>
              <Address>g_HealthSystemObj</Address>
              <Offsets>
                <Offset>5C</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>465</ID>
              <Description>"Max Health"</Description>
              <VariableType>Byte</VariableType>
              <Address>g_HealthSystemObj</Address>
              <Offsets>
                <Offset>5E</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>463</ID>
              <Description>"God/Infinite Breath"</Description>
              <ShowAsHex>1</ShowAsHex>
              <VariableType>Byte</VariableType>
              <Address>g_HealthSystemObj</Address>
              <Offsets>
                <Offset>62</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>480</ID>
              <Description>"Breath"</Description>
              <VariableType>Float</VariableType>
              <Address>g_HealthSystemObj</Address>
              <Offsets>
                <Offset>80</Offset>
              </Offsets>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>456</ID>
          <Description>"g_PlayerVis"</Description>
          <ShowAsHex>1</ShowAsHex>
          <VariableType>4 Bytes</VariableType>
          <Address>g_PlayerVis</Address>
          <CheatEntries>
            <CheatEntry>
              <ID>461</ID>
              <Description>"Player Invisibility"</Description>
              <VariableType>Byte</VariableType>
              <Address>g_PlayerVis</Address>
              <Offsets>
                <Offset>28</Offset>
              </Offsets>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>457</ID>
          <Description>"g_ShipObj"</Description>
          <ShowAsHex>1</ShowAsHex>
          <VariableType>4 Bytes</VariableType>
          <Address>g_ShipObj</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>458</ID>
          <Description>"g_PlayerShip"</Description>
          <ShowAsHex>1</ShowAsHex>
          <VariableType>4 Bytes</VariableType>
          <Address>g_PlayerShip</Address>
          <CheatEntries>
            <CheatEntry>
              <ID>466</ID>
              <Description>"Hull"</Description>
              <VariableType>Float</VariableType>
              <Address>g_PlayerShip</Address>
              <Offsets>
                <Offset>D0</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>475</ID>
              <Description>"Max Hull"</Description>
              <VariableType>Float</VariableType>
              <Address>g_PlayerShip</Address>
              <Offsets>
                <Offset>B4</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>474</ID>
              <Description>"God Status"</Description>
              <VariableType>Byte</VariableType>
              <Address>g_PlayerShip</Address>
              <Offsets>
                <Offset>3A5</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>467</ID>
              <Description>"God Switch"</Description>
              <ShowAsHex>1</ShowAsHex>
              <VariableType>Byte</VariableType>
              <Address>g_PlayerShip</Address>
              <Offsets>
                <Offset>160</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>476</ID>
              <Description>"g_ShipObj"</Description>
              <ShowAsHex>1</ShowAsHex>
              <VariableType>4 Bytes</VariableType>
              <Address>g_PlayerShip</Address>
              <Offsets>
                <Offset>A4</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>477</ID>
              <Description>"g_ShipObj Pointed To"</Description>
              <ShowAsHex>1</ShowAsHex>
              <VariableType>4 Bytes</VariableType>
              <Address>g_PlayerShip</Address>
              <Offsets>
                <Offset>F0</Offset>
              </Offsets>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>459</ID>
          <Description>"g_ShipVis"</Description>
          <ShowAsHex>1</ShowAsHex>
          <VariableType>4 Bytes</VariableType>
          <Address>g_ShipVis</Address>
          <CheatEntries>
            <CheatEntry>
              <ID>460</ID>
              <Description>"Naval Invisibility"</Description>
              <VariableType>Byte</VariableType>
              <Address>g_ShipVis</Address>
              <Offsets>
                <Offset>9C</Offset>
              </Offsets>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>502</ID>
          <Description>"g_CollisionPtr"</Description>
          <ShowAsHex>1</ShowAsHex>
          <VariableType>4 Bytes</VariableType>
          <Address>g_CollisionPtr</Address>
          <CheatEntries>
            <CheatEntry>
              <ID>503</ID>
              <Description>"Disable Movement"</Description>
              <VariableType>Byte</VariableType>
              <Address>g_CollisionPtr</Address>
              <Offsets>
                <Offset>15</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>504</ID>
              <Description>"Collision Value"</Description>
              <ShowAsHex>1</ShowAsHex>
              <VariableType>4 Bytes</VariableType>
              <Address>g_CollisionPtr</Address>
              <Offsets>
                <Offset>2C</Offset>
                <Offset>98</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>508</ID>
              <Description>"Collision Value (copy)"</Description>
              <ShowAsHex>1</ShowAsHex>
              <VariableType>4 Bytes</VariableType>
              <Address>g_CollisionPtr</Address>
              <Offsets>
                <Offset>90</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>506</ID>
              <Description>"XYZ (main)"</Description>
              <ShowAsHex>1</ShowAsHex>
              <VariableType>Array of byte</VariableType>
              <ByteLength>16</ByteLength>
              <Address>g_CollisionPtr</Address>
              <Offsets>
                <Offset>40</Offset>
                <Offset>8</Offset>
              </Offsets>
              <CheatEntries>
                <CheatEntry>
                  <ID>514</ID>
                  <Description>"X"</Description>
                  <VariableType>Float</VariableType>
                  <Address>g_CollisionPtr</Address>
                  <Offsets>
                    <Offset>40</Offset>
                    <Offset>8</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>513</ID>
                  <Description>"Y"</Description>
                  <VariableType>Float</VariableType>
                  <Address>g_CollisionPtr</Address>
                  <Offsets>
                    <Offset>44</Offset>
                    <Offset>8</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>512</ID>
                  <Description>"Z"</Description>
                  <VariableType>Float</VariableType>
                  <Address>g_CollisionPtr</Address>
                  <Offsets>
                    <Offset>48</Offset>
                    <Offset>8</Offset>
                  </Offsets>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>507</ID>
              <Description>"XYZ (in collision struct)"</Description>
              <ShowAsHex>1</ShowAsHex>
              <VariableType>Array of byte</VariableType>
              <ByteLength>16</ByteLength>
              <Address>g_CollisionPtr</Address>
              <Offsets>
                <Offset>D0</Offset>
                <Offset>98</Offset>
              </Offsets>
              <CheatEntries>
                <CheatEntry>
                  <ID>511</ID>
                  <Description>"X"</Description>
                  <VariableType>Float</VariableType>
                  <Address>g_CollisionPtr</Address>
                  <Offsets>
                    <Offset>D0</Offset>
                    <Offset>98</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>510</ID>
                  <Description>"Y"</Description>
                  <VariableType>Float</VariableType>
                  <Address>g_CollisionPtr</Address>
                  <Offsets>
                    <Offset>D4</Offset>
                    <Offset>98</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>509</ID>
                  <Description>"Z"</Description>
                  <VariableType>Float</VariableType>
                  <Address>g_CollisionPtr</Address>
                  <Offsets>
                    <Offset>D8</Offset>
                    <Offset>98</Offset>
                  </Offsets>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>505</ID>
              <Description>"XYZ (copy)"</Description>
              <ShowAsHex>1</ShowAsHex>
              <VariableType>Array of byte</VariableType>
              <ByteLength>16</ByteLength>
              <Address>g_CollisionPtr</Address>
              <Offsets>
                <Offset>F0</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>515</ID>
              <Description>"XYZ Model"</Description>
              <ShowAsHex>1</ShowAsHex>
              <VariableType>Array of byte</VariableType>
              <ByteLength>16</ByteLength>
              <Address>g_MenuObj</Address>
              <Offsets>
                <Offset>70</Offset>
                <Offset>B0</Offset>
                <Offset>C</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>516</ID>
              <Description>"XYZ Model (copy)"</Description>
              <ShowAsHex>1</ShowAsHex>
              <VariableType>Array of byte</VariableType>
              <ByteLength>16</ByteLength>
              <Address>g_MenuObj</Address>
              <Offsets>
                <Offset>B0</Offset>
                <Offset>B0</Offset>
                <Offset>C</Offset>
              </Offsets>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>517</ID>
          <Description>"MapMarkerByPtr"</Description>
          <LastState Value="02701E38" RealAddress="22BAD730"/>
          <ShowAsHex>1</ShowAsHex>
          <VariableType>4 Bytes</VariableType>
          <Address>04DFF11C</Address>
          <Offsets>
            <Offset>0</Offset>
          </Offsets>
          <CheatEntries>
            <CheatEntry>
              <ID>519</ID>
              <Description>"IsMarked?"</Description>
              <LastState Value="00" RealAddress="22BAD7D9"/>
              <ShowAsHex>1</ShowAsHex>
              <VariableType>Byte</VariableType>
              <Address>04DFF11C</Address>
              <Offsets>
                <Offset>A9</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>521</ID>
              <Description>"WaypointX"</Description>
              <LastState Value="0" RealAddress="22BAD780"/>
              <VariableType>Float</VariableType>
              <Address>04DFF11C</Address>
              <Offsets>
                <Offset>50</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>520</ID>
              <Description>"WaypointY"</Description>
              <LastState Value="0" RealAddress="22BAD784"/>
              <VariableType>Float</VariableType>
              <Address>04DFF11C</Address>
              <Offsets>
                <Offset>54</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>524</ID>
              <Description>"ObjectX"</Description>
              <VariableType>Float</VariableType>
              <Address>04DFF11C</Address>
              <Offsets>
                <Offset>30</Offset>
                <Offset>98</Offset>
                <Offset>0</Offset>
                <Offset>88</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>523</ID>
              <Description>"ObjectY"</Description>
              <VariableType>Float</VariableType>
              <Address>04DFF11C</Address>
              <Offsets>
                <Offset>34</Offset>
                <Offset>98</Offset>
                <Offset>0</Offset>
                <Offset>88</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>522</ID>
              <Description>"ObjectZ"</Description>
              <VariableType>Float</VariableType>
              <Address>04DFF11C</Address>
              <Offsets>
                <Offset>38</Offset>
                <Offset>98</Offset>
                <Offset>0</Offset>
                <Offset>88</Offset>
              </Offsets>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols/>
  <Comments>(Don't remove the below!)
*
Created by:   SunBeam
Updated:      11 Jan 2017
Revised:      30 May 2018
Game Version: 1.07
*
</Comments>
</CheatTable>
