<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="26">
  <CheatEntries>
    <CheatEntry>
      <ID>775</ID>
      <Description>"Furi freecam v1.1, idk31freecam@gmail.com"</Description>
      <LastState Value="" RealAddress="00000000"/>
      <GroupHeader>1</GroupHeader>
    </CheatEntry>
    <CheatEntry>
      <ID>13517</ID>
      <Description>"Set keypoll and delay to 10ms (EDIT &gt; SETTINGS &gt; HOTKEYS)"</Description>
      <LastState Value="" RealAddress="00000000"/>
      <GroupHeader>1</GroupHeader>
    </CheatEntry>
    <CheatEntry>
      <ID>13518</ID>
      <Description>"Attach to process: "Furi.exe""</Description>
      <LastState Value="" RealAddress="00000000"/>
      <GroupHeader>1</GroupHeader>
    </CheatEntry>
    <CheatEntry>
      <ID>776</ID>
      <Description>""</Description>
      <LastState Value="" RealAddress="00000000"/>
      <GroupHeader>1</GroupHeader>
    </CheatEntry>
    <CheatEntry>
      <ID>769</ID>
      <Description>"&gt;&gt; CAMERA [PGDN]"</Description>
      <Options moHideChildren="1"/>
      <LastState/>
      <Color>FF0000</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]

alloc(_FOV,4)
alloc(_camera,4)
alloc(_freecamON,4)
alloc(_tarX,4)
alloc(_tarY,4)
alloc(_tarZ,4)
alloc(_pitch,4)
alloc(_yaw,4)
alloc(_roll,4)

registersymbol(_FOV)
registersymbol(_camera)
registersymbol(_freecamON)
registersymbol(_tarX)
registersymbol(_tarY)
registersymbol(_tarZ)
registersymbol(_pitch)
registersymbol(_yaw)
registersymbol(_roll)

//"Furi.exe"+3F6C3
aobscanmodule(fovAOB,Furi.exe,C6 86 40 04 00 00 00 5F)
alloc(newmem,$1000)

label(code)
label(return)

newmem:

code:
  mov [_FOV],esi
  mov word ptr [esi+00000440],0100
  jmp return

fovAOB:
  jmp newmem
  nop
  nop
return:
registersymbol(fovAOB)

//"Furi.exe"+3EE71
aobscanmodule(writefovAOB,Furi.exe,F3 0F 11 81 20 01 00 00 88)
alloc(newmem2,$1000)

label(code2)
label(return2)

newmem2:
  cmp [_freecamON],0
  je code2
  cmp [_FOV],ecx
  je return2

code2:
  movss [ecx+00000120],xmm0
  jmp return2

writefovAOB:
  jmp newmem2
  nop
  nop
  nop
return2:
registersymbol(writefovAOB)

//"Furi.exe"+B7BF8
aobscanmodule(cameraAOB,Furi.exe,0F 28 04 C6 8B 43 08)
alloc(newmem3,$1000)

label(code3)
label(return3)

newmem3:
  push ecx
  push edx
  cmp [_FOV],0
  je code3
  mov ecx,eax
  shl ecx,03
  add ecx,esi
  mov edx,[_FOV]
  mov edx,[edx+398]
  cmp [ecx+04],edx
  jne code3
  //mov edx,[_FOV]
  //mov edx,[edx+39C]
  //cmp [ecx+08],edx
  //jne code3
  mov [_camera],ecx

code3:
  pop edx
  pop ecx
  movaps xmm0,[esi+eax*8]
  mov eax,[ebx+08]
  jmp return3

cameraAOB:
  jmp newmem3
  nop
  nop
return3:
registersymbol(cameraAOB)

//"Furi.exe"+B7907
aobscanmodule(writecamAOB,Furi.exe,88 45 13 0F 29 01)
alloc(newmem4,$1000)

label(code4)
label(return4)

newmem4:
  mov [ebp+13],al
  cmp [_freecamON],0
  je code4
  cmp [_camera],ecx
  je return4

code4:
  movaps [ecx],xmm0
  jmp return4

writecamAOB:
  jmp newmem4
  nop
return4:
registersymbol(writecamAOB)

//"Furi.exe"+B79A4
aobscanmodule(writerotAOB,Furi.exe,88 45 13 0F 29 41 10)
alloc(newmem5,$1000)

label(code5)
label(return5)

newmem5:
  mov [ebp+13],al
  cmp [_freecamON],0
  je code5
  cmp [_camera],ecx
  je return5

code5:
  movaps [ecx+10],xmm0
  jmp return5

writerotAOB:
  jmp newmem5
  nop
  nop
return5:
registersymbol(writerotAOB)

{$lua}
if syntaxcheck then return end
local symbolCheckT = createTimer()
symbolCheckT.Interval = 1000
symbolCheckT.OnTimer = function(sender)

  if readInteger("Furi.exe") == nil then
    sender.destroy()
    return
  end

-- destroy old stuff in case of crash
if checkCamKeys ~= nil then
  checkCamKeys.destroy()
  checkCamKeys = nil
end
if camHotkeys ~= nil then
  for i,v in ipairs(camHotkeys) do v.destroy() end
  camHotkeys = nil
end
-- end destroy

  --sleep(50) --give time for _camera to be found

  local function camBase() return readInteger("_camera") end
  if camBase() == 0 then sender.destroy(); return end

  local function fovBase() return readInteger("_FOV") end
  if fovBase() == 0 then sender.destroy(); return end

  -- CAMERA ADDRESSES
  local function camXAD() return camBase()+0x8 end
  local function camYAD() return camBase()+0x0 end
  local function camZAD() return camBase()+0x4 end
  local function qwAD() return camBase()+0x1C end
  local function qxAD() return camBase()+0x10 end
  local function qyAD() return camBase()+0x14 end
  local function qzAD() return camBase()+0x18 end
  local function FOVAD() return fovBase()+0x120 end
  local tarXAD = getAddress("_tarX")
  local tarYAD = getAddress("_tarY")
  local tarZAD = getAddress("_tarZ")
  local pitchAD  = getAddress("_pitch")
  local yawAD = getAddress("_yaw")
  local rollAD = getAddress("_roll")
  local freecamAD = getAddress("_freecamON")
  local camera_PREV

  -- VARIABLES
  local defaultTarDist = 2
  local flySpeed = 0.02
  local aimSpeed = math.pi/720
  local rollSpeed = math.pi/720
  local FOVSpeed = 0.15
  local hellaFast = 100
  local fastMult = 10
  local slowDiv = 10
  local pitchMax = 0.99*math.pi/2
  local useZ = true
  local defaultFOV = 47.7
  local separation3D = 0.06836
  local prvFOV
  local tmpX
  local tmpY
  local tmpZ
  local tmpQW
  local tmpQX
  local tmpQY
  local tmpQZ

  local function freecamEnabled()
   if readInteger(freecamAD) == 1 then return true end
   return false
  end

  local function gameHasFocus()
    if getOpenedProcessID() == getForegroundProcess() then return true end
    return false
  end

  local function requiredConditions()
    if freecamEnabled() and gameHasFocus() then return true end
    return false
  end

  local function updateRotation()
    local pitch = -0.5*readFloat(pitchAD)
    local yaw = 0.5*readFloat(yawAD)
    local roll = 0.5*readFloat(rollAD)
    local sp = math.sin(pitch)
    local cp = math.cos(pitch)
    local sy = math.sin(yaw)
    local cy = math.cos(yaw)
    local sr = math.sin(roll)
    local cr = math.cos(roll)
    --quaternion rotation
    local qw = cp*cy*cr + sp*sy*sr
    local qx = sp*cy*cr + cp*sy*sr
    local qy = cp*sy*cr - sp*cy*sr
    local qz = cp*cy*sr - sp*sy*cr
    writeFloat(qwAD(), qw)
    writeFloat(qxAD(), qx)
    writeFloat(qyAD(), qy)
    writeFloat(qzAD(), qz)
  end

  local function getRotation()
    local pitch = -math.atan(2*(tmpQW*tmpQX+tmpQY*tmpQZ)/(1-2*(tmpQX*tmpQX+tmpQY*tmpQY)))
    local yaw = math.asin(2*(tmpQW*tmpQY-tmpQX*tmpQZ))
    if math.abs(tmpQY) &gt; math.abs(tmpQW) then yaw = math.pi - yaw end
    local cp = math.cos(pitch)
    local dX = defaultTarDist*math.sin(yaw)*cp
    local dY = defaultTarDist*math.cos(yaw)*cp
    local dZ = defaultTarDist*math.sin(pitch)
    writeFloat(pitchAD,pitch)
    writeFloat(yawAD,yaw)
    writeFloat(rollAD,0)
    writeFloat(tarXAD,tmpX+dY)
    writeFloat(tarYAD,tmpY+dX)
    writeFloat(tarZAD,tmpZ+dZ)
    updateRotation()
  end

  local function toggleFreecam()
    if not gameHasFocus() then return end
    if freecamEnabled() then
      if camBase() == camera_PREV then
        for j=1,12,1 do camCheat[0].value[j] = readBytes(camCheat.addy[j],4,true) end
        writeFloat(camXAD(), tmpX)
        writeFloat(camYAD(), tmpY)
        writeFloat(camZAD(), tmpZ)
        writeFloat(qwAD(), tmpQW)
        writeFloat(qxAD(), tmpQX)
        writeFloat(qyAD(), tmpQY)
        writeFloat(qzAD(), tmpQZ)
        writeFloat(FOVAD(), prvFOV)
        --sleep(50)
      end
      writeInteger(freecamAD, 0)
    else
      camera_PREV = camBase()
      prvFOV = readFloat(FOVAD())
      tmpX = readFloat(camXAD())
      tmpY = readFloat(camYAD())
      tmpZ = readFloat(camZAD())
      tmpQW = readFloat(qwAD())
      tmpQX = readFloat(qxAD())
      tmpQY = readFloat(qyAD())
      tmpQZ = readFloat(qzAD())
      writeInteger(freecamAD, 1)
      --sleep(50)
      getRotation()
    end
  end

if camCheat == nil then
  camCheat = {}
  camCheat.addy = {camXAD(); camYAD(); camZAD(); qwAD(); qxAD(); qyAD(); qzAD(); tarXAD; tarYAD; tarZAD; rollAD; FOVAD()}
  for i=0,9,1 do
    camCheat[i] = {value = {}}
    local set = function(sender)
      if not requiredConditions() then return end
      --camCheat.addy = {camXAD(); camYAD(); camZAD(); qwAD(); qxAD(); qyAD(); qzAD(); tarXAD; tarYAD; tarZAD; rollAD; FOVAD()}
      for j=1,12,1 do camCheat[i].value[j] = readBytes(camCheat.addy[j],4,true) end
    end
    if i == 0 then set(nil) else
      camCheat[i].setHotkey = createHotkey(set, _G["VK_" .. i], VK_MENU)
      camCheat[i].setHotkey.DelayBetweenActivate = 1000
    end
    local get = function(sender)
      if not gameHasFocus() or #camCheat[i].value ~= 12 then return end
      if not freecamEnabled() then toggleFreecam() end
      --sleep(50)
      --camCheat.addy = {camXAD(); camYAD(); camZAD(); qwAD(); qxAD(); qyAD(); qzAD(); tarXAD; tarYAD; tarZAD; rollAD; FOVAD()}
      for j=1,12,1 do
        if i ~= 0 then camCheat[0].value[j] = readBytes(camCheat.addy[j],4,true) end
        writeBytes(camCheat.addy[j], camCheat[i].value[j])
      end
      --sleep(50)
    end
    camCheat[i].getHotkey = createHotkey(get, _G["VK_" .. i])
    camCheat[i].getHotkey.DelayBetweenActivate = 1000
  end
else camCheat.addy = {camXAD(); camYAD(); camZAD(); qwAD(); qxAD(); qyAD(); qzAD(); tarXAD; tarYAD; tarZAD; rollAD; FOVAD()}
end

  -- MOVEMENT SPEED MODIFIERS

  local flySpeedOrig  = flySpeed
  local aimSpeedOrig  = aimSpeed
  local rollSpeedOrig = rollSpeed
  local FOVSpeedOrig  = FOVSpeed

  local hellaFastModeEnabled = false
  local fastModeEnabled = false
  local slowModeEnabled = false

  local didReset = true
  local didSlow = false
  local didFast = false
  local didHellaFast = false

  checkCamKeys = createTimer()
  checkCamKeys.setInterval(100)
  checkCamKeys.onTimer = function()
    if not gameHasFocus() then return end
    if isKeyPressed(VK_T) and not isKeyPressed(VK_MENU) then
      if not didHellaFast then
        flySpeed  = flySpeedOrig*hellaFast
        aimSpeed  = aimSpeedOrig*fastMult
        rollSpeed = rollSpeedOrig*fastMult
        FOVSpeed  = FOVSpeedOrig*fastMult
        didReset  = false
        didHellaFast = true
      end
    elseif isKeyPressed(VK_F) and not isKeyPressed(VK_MENU) then
      if not didFast then
        flySpeed  = flySpeedOrig*fastMult
        aimSpeed  = aimSpeedOrig*fastMult
        rollSpeed = rollSpeedOrig*fastMult
        FOVSpeed  = FOVSpeedOrig*fastMult
        didReset  = false
        didFast   = true
      end
    elseif isKeyPressed(VK_C) and not isKeyPressed(VK_MENU) then
      if not didSlow then
        flySpeed  = flySpeedOrig/slowDiv
        aimSpeed  = aimSpeedOrig/slowDiv
        rollSpeed = rollSpeedOrig/slowDiv
        FOVSpeed  = FOVSpeedOrig/slowDiv
        didReset  = false
        didSlow   = true
      end
    elseif not didReset then
      flySpeed  = flySpeedOrig
      aimSpeed  = aimSpeedOrig
      rollSpeed = rollSpeedOrig
      FOVSpeed  = FOVSpeedOrig
      didHellaFast = false
      didFast   = false
      didSlow   = false
      didReset  = true
      hellaFastModeEnabled = false
      fastModeEnabled = false
      slowModeEnabled = false
    end
  end

  -- MOVEMENT SPEED TOGGLES

  local function resetSpeed()
    flySpeed  = flySpeedOrig
    aimSpeed  = aimSpeedOrig
    rollSpeed = rollSpeedOrig
    FOVSpeed  = FOVSpeedOrig
    hellaFastModeEnabled = false
    fastModeEnabled = false
    slowModeEnabled = false
  end

  local function goHellaFast()
    if hellaFastModeEnabled then resetSpeed()
    else
      flySpeed  = flySpeedOrig*hellaFast
      aimSpeed  = aimSpeedOrig*fastMult
      rollSpeed = rollSpeedOrig*fastMult
      FOVSpeed  = FOVSpeedOrig*fastMult
      hellaFastModeEnabled = true
      fastModeEnabled = false
      slowModeEnabled = false
    end
  end

  local function goFast()
    if fastModeEnabled then resetSpeed()
    else
      flySpeed  = flySpeedOrig*fastMult
      aimSpeed  = aimSpeedOrig*fastMult
      rollSpeed = rollSpeedOrig*fastMult
      FOVSpeed  = FOVSpeedOrig*fastMult
      hellaFastModeEnabled = false
      fastModeEnabled = true
      slowModeEnabled = false
    end
  end

  local function goSlow()
    if slowModeEnabled then resetSpeed()
    else
      flySpeed  = flySpeedOrig/slowDiv
      aimSpeed  = aimSpeedOrig/slowDiv
      rollSpeed = rollSpeedOrig/slowDiv
      FOVSpeed  = FOVSpeedOrig/slowDiv
      hellaFastModeEnabled = false
      fastModeEnabled = false
      slowModeEnabled = true
    end
  end

  -- CAMERA FUNCTIONS

  local function toggleUseZ()
    if not requiredConditions() then return end
    if useZ then useZ = false
    else useZ = true
    end
  end

  local function move(moveDir)
    if not requiredConditions() then return end
    local camX  = readFloat(camXAD())
    local camY  = readFloat(camYAD())
    local camZ  = readFloat(camZAD())
    local tarX  = readFloat(tarXAD)
    local tarY  = readFloat(tarYAD)
    local tarZ  = readFloat(tarZAD)
    local Xdiff = tarX-camX
    local Ydiff = tarY-camY
    local Zdiff
    local hypXY = math.sqrt(Xdiff*Xdiff+Ydiff*Ydiff)
    if moveDir == "up" then
      writeFloat(camZAD(), camZ+flySpeed)
      writeFloat(tarZAD, tarZ+flySpeed)
      return
    elseif moveDir == "upCamOnly" then
      camZ = camZ+flySpeed
      writeFloat(camZAD(), camZ)
      Zdiff = tarZ-camZ
      writeFloat(pitchAD,math.atan(Zdiff/hypXY))
      updateRotation()
      return
    elseif moveDir == "down" then
      writeFloat(camZAD(), camZ-flySpeed)
      writeFloat(tarZAD, tarZ-flySpeed)
      return
    elseif moveDir == "downCamOnly" then
      camZ = camZ-flySpeed
      writeFloat(camZAD(), camZ)
      Zdiff = tarZ-camZ
      writeFloat(pitchAD,math.atan(Zdiff/hypXY))
      updateRotation()
      return
    end
    Zdiff = tarZ-camZ
    local dX; local dY; local dZ
    if moveDir == "right" or moveDir == "right3D" then
      if moveDir == "right3D" then
        dX = separation3D*Ydiff/hypXY
        dY = separation3D*Xdiff/hypXY
      else
        dX = flySpeed*Ydiff/hypXY
        dY = flySpeed*Xdiff/hypXY
      end
      if moveDir == "right3D" or useZ then
        local roll = readFloat(rollAD)
        local cosRoll = math.cos(roll)
        dX = dX*cosRoll
        dY = dY*cosRoll
        if moveDir == "right3D" then
          dZ = separation3D*math.sin(roll)
        else
          dZ = flySpeed*math.sin(roll)
        end
        writeFloat(tarZAD, tarZ+dZ)
        writeFloat(camZAD(), camZ+dZ)
      end
      writeFloat(tarXAD, tarX-dX)
      writeFloat(tarYAD, tarY+dY)
      writeFloat(camXAD(), camX-dX)
      writeFloat(camYAD(), camY+dY)
      return
    elseif moveDir == "left" or moveDir == "left3D" then
      if moveDir == "left3D" then
        dX = separation3D*Ydiff/hypXY
        dY = separation3D*Xdiff/hypXY
      else
        dX = flySpeed*Ydiff/hypXY
        dY = flySpeed*Xdiff/hypXY
      end
      if moveDir == "left3D" or useZ then
        local roll = readFloat(rollAD)
        local cosRoll = math.cos(roll)
        dX = dX*cosRoll
        dY = dY*cosRoll
        if moveDir == "left3D" then
          dZ = separation3D*math.sin(roll)
        else
          dZ = flySpeed*math.sin(roll)
        end
        writeFloat(tarZAD, tarZ-dZ)
        writeFloat(camZAD(), camZ-dZ)
      end
      writeFloat(tarXAD, tarX+dX)
      writeFloat(tarYAD, tarY-dY)
      writeFloat(camXAD(), camX+dX)
      writeFloat(camYAD(), camY-dY)
      return
    end
    local hypZ = math.sqrt(Zdiff*Zdiff+hypXY*hypXY)
    if useZ then
      dX = flySpeed*Xdiff/hypZ
      dY = flySpeed*Ydiff/hypZ
      dZ = flySpeed*Zdiff/hypZ
      if moveDir == "backward" then dZ = -dZ end
      writeFloat(tarZAD, tarZ+dZ)
      writeFloat(camZAD(), camZ+dZ)
    else
      dX = flySpeed*Xdiff/hypXY
      dY = flySpeed*Ydiff/hypXY
      dZ = flySpeed*Zdiff/hypXY
    end
    if moveDir == "forward" then
      writeFloat(tarXAD, tarX+dX)
      writeFloat(tarYAD, tarY+dY)
      writeFloat(camXAD(), camX+dX)
      writeFloat(camYAD(), camY+dY)
    elseif moveDir == "backward" then
      writeFloat(tarXAD, tarX-dX)
      writeFloat(tarYAD, tarY-dY)
      writeFloat(camXAD(), camX-dX)
      writeFloat(camYAD(), camY-dY)
    else return
    end
  end

  local function orbit(orbitDir)
    if not requiredConditions() then return end
    local exitFunction = false
    local camX  = readFloat(camXAD())
    local camY  = readFloat(camYAD())
    local tarX  = readFloat(tarXAD)
    local tarY  = readFloat(tarYAD)
    local Xdiff = tarX-camX
    local Ydiff = tarY-camY
    local hypXY = math.sqrt(Xdiff*Xdiff+Ydiff*Ydiff)
    local yaw
    if orbitDir == "left" or orbitDir == "panRight" then
      yaw = math.atan(Ydiff/Xdiff)+aimSpeed
    elseif orbitDir == "right" or orbitDir == "panLeft" then
      yaw = math.atan(Ydiff/Xdiff)-aimSpeed
    else
      local camZ  = readFloat(camZAD())
      local tarZ  = readFloat(tarZAD)
      local Zdiff = tarZ-camZ
      local hypZ  = math.sqrt(Zdiff*Zdiff+hypXY*hypXY)
      local pitch
      if orbitDir == "down" or orbitDir == "panUp" then
        pitch = math.asin(Zdiff/hypZ)+aimSpeed
      elseif orbitDir == "up" or orbitDir == "panDown" then
        pitch = math.asin(Zdiff/hypZ)-aimSpeed
      else return
      end
      if pitch&gt;-pitchMax and pitch&lt;pitchMax then
        local R  = hypZ*math.cos(pitch)/hypXY
        local dX = Xdiff*R
        local dY = Ydiff*R
        local dZ = hypZ*math.sin(pitch)
        if orbitDir == "panUp" or orbitDir == "panDown" then
          writeFloat(tarXAD, camX+dX)
          writeFloat(tarYAD, camY+dY)
          writeFloat(tarZAD, camZ+dZ)
          exitFunction = true
        else
          writeFloat(camXAD(), tarX-dX)
          writeFloat(camYAD(), tarY-dY)
          writeFloat(camZAD(), tarZ-dZ)
          exitFunction = true
        end
      end
      exitFunction = true
    end
    if not exitFunction then
      if Xdiff&lt;0 then yaw = yaw + math.pi end
      local dX = hypXY*math.cos(yaw)
      local dY = hypXY*math.sin(yaw)
      if orbitDir == "panLeft" or orbitDir == "panRight" then
        writeFloat(tarXAD, camX+dX)
        writeFloat(tarYAD, camY+dY)
      elseif orbitDir == "left" or orbitDir == "right" then
        writeFloat(camXAD(), tarX-dX)
        writeFloat(camYAD(), tarY-dY)
      else return
      end
    end
    camX  = readFloat(camXAD())
    camY  = readFloat(camYAD())
    camZ  = readFloat(camZAD())
    tarX  = readFloat(tarXAD)
    tarY  = readFloat(tarYAD)
    tarZ  = readFloat(tarZAD)
    Xdiff = tarX-camX
    Ydiff = tarY-camY
    Zdiff = tarZ-camZ
    hypXY = math.sqrt(Xdiff*Xdiff+Ydiff*Ydiff)
    pitch = math.atan(Zdiff/hypXY)
    yaw = math.atan(Ydiff/Xdiff)
    if Xdiff&lt;0 then yaw = yaw + math.pi end
    writeFloat(pitchAD,pitch)
    writeFloat(yawAD,yaw)
    updateRotation()
  end

  local function dolly(dollyDir)
    if not requiredConditions() then return end
    local exitFunction = false
    local camX  = readFloat(camXAD())
    local camY  = readFloat(camYAD())
    local camZ  = readFloat(camZAD())
    local tarX  = readFloat(tarXAD)
    local tarY  = readFloat(tarYAD)
    local tarZ  = readFloat(tarZAD)
    local Xdiff = tarX-camX
    local Ydiff = tarY-camY
    local Zdiff = tarZ-camZ
    local hypXY = math.sqrt(Xdiff*Xdiff+Ydiff*Ydiff)
    local hypZ  = math.sqrt(Zdiff*Zdiff+hypXY*hypXY)
    if dollyDir == "zoomReset" then
      local FOV = readFloat(FOVAD()) -- stored in degrees
      local FOVr = math.pi*FOV/180 -- convert to radians
      local objWidth = hypZ*2*math.tan(FOVr/2)
      local FOV2  = defaultFOV
      prvFOV = defaultFOV
      local FOVr2 = math.pi*FOV2/180
      local hypZ2 = objWidth/(2*math.tan(FOVr2/2))-hypZ
      local dX = hypZ2*Xdiff/hypZ
      local dY = hypZ2*Ydiff/hypZ
      local dZ = hypZ2*Zdiff/hypZ
      writeFloat(FOVAD(), FOV2)
      writeFloat(camXAD(), camX-dX)
      writeFloat(camYAD(), camY-dY)
      writeFloat(camZAD(), camZ-dZ)
      exitFunction = true
    elseif dollyDir == "closer" then
      if hypZ&gt;=0.1 then
        local dX = flySpeed*Xdiff/hypZ
        local dY = flySpeed*Ydiff/hypZ
        local dZ = flySpeed*Zdiff/hypZ
        writeFloat(camXAD(), camX+dX)
        writeFloat(camYAD(), camY+dY)
        writeFloat(camZAD(), camZ+dZ)
      end
      exitFunction = true
    elseif dollyDir == "farther" then
      local dX = flySpeed*Xdiff/hypZ
      local dY = flySpeed*Ydiff/hypZ
      local dZ = flySpeed*Zdiff/hypZ
      writeFloat(camXAD(), camX-dX)
      writeFloat(camYAD(), camY-dY)
      writeFloat(camZAD(), camZ-dZ)
      exitFunction = true
    end
    if not exitFunction then
      local FOV  = readFloat(FOVAD()) -- stored in degrees
      local FOVr = math.pi*FOV/180 -- convert to radians
      local dollySpeed = flySpeed*(1-FOV/180)^2
      local objWidth = hypZ*2*math.tan(FOVr/2)
      if dollyDir == "zoomIn" then
        FOVr = 2*math.atan(objWidth/(2*(hypZ+dollySpeed)))
        FOV  = 180*FOVr/math.pi -- convert back to degrees
        if FOV &gt;=1.2 then
          local dX = dollySpeed*Xdiff/hypZ
          local dY = dollySpeed*Ydiff/hypZ
          local dZ = dollySpeed*Zdiff/hypZ
          writeFloat(FOVAD(), FOV)
          writeFloat(camXAD(), camX-dX)
          writeFloat(camYAD(), camY-dY)
          writeFloat(camZAD(), camZ-dZ)
        end
      elseif dollyDir == "zoomOut" then
        FOVr = 2*math.atan(objWidth/(2*(hypZ-dollySpeed)))
        FOV  = 180*FOVr/math.pi -- convert back to degrees
        if FOV &lt;= 169 then
          local dX = dollySpeed*Xdiff/hypZ
          local dY = dollySpeed*Ydiff/hypZ
          local dZ = dollySpeed*Zdiff/hypZ
          writeFloat(FOVAD(), FOV)
          writeFloat(camXAD(), camX+dX)
          writeFloat(camYAD(), camY+dY)
          writeFloat(camZAD(), camZ+dZ)
        end
      else return
      end
    end
    camX  = readFloat(camXAD())
    camY  = readFloat(camYAD())
    camZ  = readFloat(camZAD())
    tarX  = readFloat(tarXAD)
    tarY  = readFloat(tarYAD)
    tarZ  = readFloat(tarZAD)
    Xdiff = tarX-camX
    Ydiff = tarY-camY
    Zdiff = tarZ-camZ
    hypXY = math.sqrt(Xdiff*Xdiff+Ydiff*Ydiff)
    pitch = math.atan(Zdiff/hypXY)
    yaw = math.atan(Ydiff/Xdiff)
    if Xdiff &lt; 0 then yaw = yaw + math.pi end
    writeFloat(pitchAD,pitch)
    writeFloat(yawAD,yaw)
    updateRotation()
  end

  local function zoomIn()
    if not requiredConditions() then return end
    local FOV = readFloat(FOVAD())
    writeFloat(FOVAD(), FOV+FOVSpeed)
  end

  local function zoomOut()
    if not requiredConditions() then return end
    local FOV = readFloat(FOVAD())
    writeFloat(FOVAD(), FOV-FOVSpeed)
  end

  local function rollLeft()
    if not requiredConditions() then return end
    local roll = readFloat(rollAD)
    writeFloat(rollAD, roll-rollSpeed)
    updateRotation()
  end

  local function rollRight()
    if not requiredConditions() then return end
    local roll = readFloat(rollAD)
    writeFloat(rollAD, roll+rollSpeed)
    updateRotation()
  end

  local function rollReset()
    if not requiredConditions() then return end
    writeFloat(rollAD, 0)
    updateRotation()
  end

  local function moveForward() move("forward") end
  local function moveBackward() move("backward") end
  local function moveLeft() move("left") end
  local function moveLeft3D() move("left3D") end
  local function moveRight() move("right") end
  local function moveRight3D() move("right3D") end
  local function moveUp() move("up") end
  local function moveDown() move("down") end
  local function moveUpCamOnly() move("upCamOnly") end
  local function moveDownCamOnly() move("downCamOnly") end
  local function panUp() orbit("panUp") end
  local function panDown() orbit("panDown") end
  local function panLeft() orbit("panLeft") end
  local function panRight() orbit("panRight") end
  local function orbitUp() orbit("up") end
  local function orbitDown() orbit("down") end
  local function orbitLeft() orbit("left") end
  local function orbitRight() orbit("right") end
  local function dollyCloser() dolly("closer") end
  local function dollyFarther() dolly("farther") end
  local function dollyZoomIn() dolly("zoomIn") end
  local function dollyZoomOut() dolly("zoomOut") end
  local function dollyZoomReset() dolly("zoomReset") end

  -- CAMERA HOTKEYS
  camHotkeys = {
    createHotkey(toggleFreecam, VK_NEXT),
    createHotkey(toggleUseZ, VK_NUMPAD2),
    createHotkey(goHellaFast, VK_MENU, VK_T),
    createHotkey(goFast, VK_MENU, VK_F),
    createHotkey(goSlow, VK_MENU, VK_C),
    createHotkey(moveLeft3D, VK_MENU, VK_NUMPAD4),
    createHotkey(moveRight3D, VK_MENU, VK_NUMPAD6),
    createHotkey(moveForward, VK_NUMPAD8), --start small delay: index 8
    createHotkey(moveBackward, VK_NUMPAD5),
    createHotkey(moveLeft, VK_NUMPAD4),
    createHotkey(moveRight, VK_NUMPAD6),
    createHotkey(moveUp, VK_NUMPAD9),
    createHotkey(moveDown, VK_NUMPAD7),
    createHotkey(moveUpCamOnly, VK_NUMPAD3),
    createHotkey(moveDownCamOnly, VK_NUMPAD1),
    createHotkey(panUp, VK_ADD, VK_NUMPAD8),
    createHotkey(panDown, VK_ADD, VK_NUMPAD5),
    createHotkey(panLeft, VK_ADD, VK_NUMPAD4),
    createHotkey(panRight, VK_ADD, VK_NUMPAD6),
    createHotkey(rollLeft, VK_ADD, VK_NUMPAD3),
    createHotkey(rollRight, VK_ADD, VK_NUMPAD1),
    createHotkey(rollReset, VK_ADD, VK_NUMPAD2),
    createHotkey(zoomIn, VK_ADD, VK_NUMPAD7),
    createHotkey(zoomOut, VK_ADD, VK_NUMPAD9),
    createHotkey(orbitUp, VK_RETURN, VK_NUMPAD5),
    createHotkey(orbitDown, VK_RETURN, VK_NUMPAD8),
    createHotkey(orbitLeft, VK_RETURN, VK_NUMPAD6),
    createHotkey(orbitRight, VK_RETURN, VK_NUMPAD4),
    createHotkey(dollyCloser, VK_RETURN, VK_NUMPAD9),
    createHotkey(dollyFarther, VK_RETURN, VK_NUMPAD7),
    createHotkey(dollyZoomIn, VK_RETURN, VK_NUMPAD3),
    createHotkey(dollyZoomOut, VK_RETURN, VK_NUMPAD1),
    createHotkey(dollyZoomReset, VK_RETURN, VK_NUMPAD2),
    createHotkey(orbitUp, VK_SUBTRACT, VK_NUMPAD5),
    createHotkey(orbitDown, VK_SUBTRACT, VK_NUMPAD8),
    createHotkey(orbitLeft, VK_SUBTRACT, VK_NUMPAD6),
    createHotkey(orbitRight, VK_SUBTRACT, VK_NUMPAD4),
    createHotkey(dollyCloser, VK_SUBTRACT, VK_NUMPAD9),
    createHotkey(dollyFarther, VK_SUBTRACT, VK_NUMPAD7),
    createHotkey(dollyZoomIn, VK_SUBTRACT, VK_NUMPAD3),
    createHotkey(dollyZoomOut, VK_SUBTRACT, VK_NUMPAD1),
    createHotkey(dollyZoomReset, VK_SUBTRACT, VK_NUMPAD2)
  }
  local smDelay = 8
  for i=1,smDelay-1,1 do camHotkeys[i].DelayBetweenActivate = 1000 end
  for i=smDelay,#camHotkeys,1 do camHotkeys[i].DelayBetweenActivate = 10 end

  sender.destroy()
end

{$asm}
[DISABLE]

fovAOB:
  db C6 86 40 04 00 00 00

unregistersymbol(fovAOB)
dealloc(newmem)

writefovAOB:
  db F3 0F 11 81 20 01 00 00

unregistersymbol(writefovAOB)
dealloc(newmem2)

cameraAOB:
  db 0F 28 04 C6 8B 43 08

unregistersymbol(cameraAOB)
dealloc(newmem3)

writecamAOB:
  db 88 45 13 0F 29 01

unregistersymbol(writecamAOB)
dealloc(newmem4)

writerotAOB:
  db 88 45 13 0F 29 41 10

unregistersymbol(writerotAOB)
dealloc(newmem5)

{$lua}
--[[
if camCheat ~= nil then
  for i=0,9,1 do
    if i ~= 0 then camCheat[i].setHotkey.destroy() end
    camCheat[i].getHotkey.destroy()
  end
  camCheat = nil
end
--]]

if checkCamKeys ~= nil then
  checkCamKeys.destroy()
  checkCamKeys = nil
end

if camHotkeys ~= nil then
  for i,v in ipairs(camHotkeys) do v.destroy() end
  camHotkeys = nil
end

</AssemblerScript>
      <Hotkeys>
        <Hotkey>
          <Action>Activate</Action>
          <Keys>
            <Key>34</Key>
          </Keys>
          <ID>0</ID>
        </Hotkey>
      </Hotkeys>
      <CheatEntries>
        <CheatEntry>
          <ID>13238</ID>
          <Description>"&gt;&gt; HOTKEYS"</Description>
          <Options moHideChildren="1"/>
          <LastState Value="" RealAddress="00000000"/>
          <Color>0080FF</Color>
          <GroupHeader>1</GroupHeader>
          <CheatEntries>
            <CheatEntry>
              <ID>13295</ID>
              <Description>"*** MOVEMENT ***"</Description>
              <LastState Value="" RealAddress="00000000"/>
              <Color>0080FF</Color>
              <GroupHeader>1</GroupHeader>
              <CheatEntries>
                <CheatEntry>
                  <ID>13249</ID>
                  <Description>"SPEED: Slow, fast, faster - C, F, T (+ALT to toggle)"</Description>
                  <LastState Value="" RealAddress="00000000"/>
                  <Color>000000</Color>
                  <GroupHeader>1</GroupHeader>
                </CheatEntry>
                <CheatEntry>
                  <ID>13240</ID>
                  <Description>"FREECAM: On/off - Pagedown"</Description>
                  <LastState Value="" RealAddress="00000000"/>
                  <Color>000000</Color>
                  <GroupHeader>1</GroupHeader>
                </CheatEntry>
                <CheatEntry>
                  <ID>13296</ID>
                  <Description>"FLY - No modifier"</Description>
                  <LastState Value="" RealAddress="00000000"/>
                  <Color>0080FF</Color>
                  <GroupHeader>1</GroupHeader>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>13290</ID>
                      <Description>"(Below, NUMPAD keys...)"</Description>
                      <LastState Value="" RealAddress="00000000"/>
                      <Color>000000</Color>
                      <GroupHeader>1</GroupHeader>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>13298</ID>
                      <Description>"MOVE: Forward, backward, left, right - 8, 5, 4, 6"</Description>
                      <LastState Value="" RealAddress="00000000"/>
                      <Color>000000</Color>
                      <GroupHeader>1</GroupHeader>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>13297</ID>
                      <Description>"FLY: Up, down - 9, 7 (cam only - 3, 1)"</Description>
                      <LastState Value="" RealAddress="00000000"/>
                      <Color>000000</Color>
                      <GroupHeader>1</GroupHeader>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>13303</ID>
                      <Description>"Height lock: On/off - 2"</Description>
                      <LastState Value="" RealAddress="00000000"/>
                      <Color>000000</Color>
                      <GroupHeader>1</GroupHeader>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>13499</ID>
                      <Description>"3D Capture: Step left, right - ALT+4, ALT+6"</Description>
                      <LastState Value="" RealAddress="00000000"/>
                      <Color>000000</Color>
                      <GroupHeader>1</GroupHeader>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>13292</ID>
                  <Description>"AIM - Hold down PLUS"</Description>
                  <LastState Value="" RealAddress="00000000"/>
                  <Color>0080FF</Color>
                  <GroupHeader>1</GroupHeader>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>13339</ID>
                      <Description>"(Below, NUMPAD keys...)"</Description>
                      <LastState Value="" RealAddress="00000000"/>
                      <Color>000000</Color>
                      <GroupHeader>1</GroupHeader>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>13244</ID>
                      <Description>"PAN: Up, down, left, right - 8, 5, 4, 6"</Description>
                      <LastState Value="" RealAddress="00000000"/>
                      <Color>000000</Color>
                      <GroupHeader>1</GroupHeader>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>13246</ID>
                      <Description>"ZOOM: In, out - 9, 7"</Description>
                      <LastState Value="" RealAddress="00000000"/>
                      <Color>000000</Color>
                      <GroupHeader>1</GroupHeader>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>13242</ID>
                      <Description>"TILT: Left, right - 1, 3 (reset: 2)"</Description>
                      <LastState Value="" RealAddress="00000000"/>
                      <Color>000000</Color>
                      <GroupHeader>1</GroupHeader>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>13293</ID>
                  <Description>"ROTATE - Hold down ENTER"</Description>
                  <LastState Value="" RealAddress="00000000"/>
                  <Color>0080FF</Color>
                  <GroupHeader>1</GroupHeader>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>13340</ID>
                      <Description>"(Below, NUMPAD keys...)"</Description>
                      <LastState Value="" RealAddress="00000000"/>
                      <Color>000000</Color>
                      <GroupHeader>1</GroupHeader>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>13241</ID>
                      <Description>"ROTATE: Up, down, left, right - 5, 8, 6, 4"</Description>
                      <LastState Value="" RealAddress="00000000"/>
                      <Color>000000</Color>
                      <GroupHeader>1</GroupHeader>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>13248</ID>
                      <Description>"MOVE: Forward, backward - 9, 7 (cam only)"</Description>
                      <LastState Value="" RealAddress="00000000"/>
                      <Color>000000</Color>
                      <GroupHeader>1</GroupHeader>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>13247</ID>
                      <Description>"DOLLY-ZOOM: In, out - 3, 1 (reset: 2)"</Description>
                      <LastState Value="" RealAddress="00000000"/>
                      <Color>000000</Color>
                      <GroupHeader>1</GroupHeader>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>13294</ID>
              <Description>"*** SETTINGS ***"</Description>
              <LastState Value="" RealAddress="00000000"/>
              <Color>0080FF</Color>
              <GroupHeader>1</GroupHeader>
              <CheatEntries>
                <CheatEntry>
                  <ID>13341</ID>
                  <Description>"(Below, standard number keys...)"</Description>
                  <LastState Value="" RealAddress="00000000"/>
                  <Color>000000</Color>
                  <GroupHeader>1</GroupHeader>
                </CheatEntry>
                <CheatEntry>
                  <ID>13250</ID>
                  <Description>"SAVE: Save current settings - ALT+[number 1 to 9]"</Description>
                  <LastState Value="" RealAddress="00000000"/>
                  <Color>000000</Color>
                  <GroupHeader>1</GroupHeader>
                </CheatEntry>
                <CheatEntry>
                  <ID>13252</ID>
                  <Description>"LOAD: Load saved settings - [number 1 to 9]"</Description>
                  <LastState Value="" RealAddress="00000000"/>
                  <Color>000000</Color>
                  <GroupHeader>1</GroupHeader>
                </CheatEntry>
                <CheatEntry>
                  <ID>13251</ID>
                  <Description>"UNDO: Load previous settings - 0 (zero)"</Description>
                  <LastState Value="" RealAddress="00000000"/>
                  <Color>000000</Color>
                  <GroupHeader>1</GroupHeader>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>747</ID>
          <Description>"Freecam on/off"</Description>
          <DropDownList ReadOnly="1" DescriptionOnly="1" DisplayValueAsItem="1">1:ON
0:-
</DropDownList>
          <LastState Value="1" RealAddress="08440008"/>
          <VariableType>4 Bytes</VariableType>
          <Address>_freecamON</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>770</ID>
          <Description>"FOV"</Description>
          <LastState Value="70" RealAddress="3C3642E0"/>
          <VariableType>Float</VariableType>
          <Address>_FOV</Address>
          <Offsets>
            <Offset>120</Offset>
          </Offsets>
        </CheatEntry>
        <CheatEntry>
          <ID>772</ID>
          <Description>"Camera X"</Description>
          <LastState Value="8.648080826" RealAddress="19FD0498"/>
          <VariableType>Float</VariableType>
          <Address>_camera</Address>
          <Offsets>
            <Offset>8</Offset>
          </Offsets>
        </CheatEntry>
        <CheatEntry>
          <ID>774</ID>
          <Description>"Camera Y"</Description>
          <LastState Value="-0.9448080063" RealAddress="19FD0490"/>
          <VariableType>Float</VariableType>
          <Address>_camera</Address>
          <Offsets>
            <Offset>0</Offset>
          </Offsets>
        </CheatEntry>
        <CheatEntry>
          <ID>773</ID>
          <Description>"Camera Z"</Description>
          <LastState Value="3.695173264" RealAddress="19FD0494"/>
          <VariableType>Float</VariableType>
          <Address>_camera</Address>
          <Offsets>
            <Offset>4</Offset>
          </Offsets>
        </CheatEntry>
        <CheatEntry>
          <ID>755</ID>
          <Description>"Target X"</Description>
          <LastState Value="10.61789989" RealAddress="0844000C"/>
          <Color>000000</Color>
          <VariableType>Float</VariableType>
          <Address>_tarX</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>756</ID>
          <Description>"Target Y"</Description>
          <LastState Value="-0.9448080063" RealAddress="08440010"/>
          <Color>000000</Color>
          <VariableType>Float</VariableType>
          <Address>_tarY</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>757</ID>
          <Description>"Target Z"</Description>
          <LastState Value="3.349034548" RealAddress="08440014"/>
          <Color>000000</Color>
          <VariableType>Float</VariableType>
          <Address>_tarZ</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>752</ID>
          <Description>"Pitch"</Description>
          <LastState Value="-0.1739451438" RealAddress="08440018"/>
          <Color>000000</Color>
          <VariableType>Float</VariableType>
          <Address>_pitch</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>753</ID>
          <Description>"Yaw"</Description>
          <LastState Value="0" RealAddress="0844001C"/>
          <Color>000000</Color>
          <VariableType>Float</VariableType>
          <Address>_yaw</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>754</ID>
          <Description>"Roll"</Description>
          <LastState Value="0" RealAddress="08440020"/>
          <Color>000000</Color>
          <VariableType>Float</VariableType>
          <Address>_roll</Address>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>14238</ID>
      <Description>"&gt;&gt; GAME SPEED [F5]"</Description>
      <Options moHideChildren="1"/>
      <LastState/>
      <Color>FF0000</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]

alloc(_timescale,4)
registersymbol(_timescale)

_timescale:
  dd (float)1.0

//"Furi.exe"+22B6FD
aobscanmodule(timescaleAOB,Furi.exe,F3 0F 10 80 BC 00 00 00 0F)
alloc(newmem,$1000)

label(code)
label(return)

newmem:

code:
  push edx
  mov edx,[_timescale]
  mov [eax+BC],edx
  pop edx
  movss xmm0,[eax+000000BC]
  jmp return

timescaleAOB:
  jmp newmem
  nop
  nop
  nop
return:
registersymbol(timescaleAOB)

//"Furi.exe"+1E6162
aobscanmodule(timescale2,Furi.exe,F3 0F 11 81 BC 00 00 00 5D)
registersymbol(timescale2)

timescale2:
  db 90 90 90 90 90 90 90 90

[DISABLE]

timescaleAOB:
  db F3 0F 10 80 BC 00 00 00

unregistersymbol(timescaleAOB)
dealloc(newmem)

timescale2:
  db F3 0F 11 81 BC 00 00 00

unregistersymbol(timescale2)


</AssemblerScript>
      <Hotkeys>
        <Hotkey>
          <Action>Activate</Action>
          <Keys>
            <Key>116</Key>
          </Keys>
          <ID>0</ID>
        </Hotkey>
      </Hotkeys>
      <CheatEntries>
        <CheatEntry>
          <ID>14239</ID>
          <Description>"Timescale [F5-F11, def: F9]"</Description>
          <LastState Value="0" RealAddress="05310000"/>
          <VariableType>Float</VariableType>
          <Address>_timescale</Address>
          <Hotkeys>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>116</Key>
              </Keys>
              <Value>0</Value>
              <ID>0</ID>
            </Hotkey>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>117</Key>
              </Keys>
              <Value>.01</Value>
              <ID>1</ID>
            </Hotkey>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>118</Key>
              </Keys>
              <Value>.1</Value>
              <ID>2</ID>
            </Hotkey>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>119</Key>
              </Keys>
              <Value>.5</Value>
              <ID>3</ID>
            </Hotkey>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>120</Key>
              </Keys>
              <Value>1</Value>
              <ID>4</ID>
            </Hotkey>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>121</Key>
              </Keys>
              <Value>2</Value>
              <ID>5</ID>
            </Hotkey>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>122</Key>
              </Keys>
              <Value>5</Value>
              <ID>6</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols/>
  <Comments>F3 0F 10 46 1C                 	-  movss xmm0,[esi+1C] // lis
F3 0F 10 46 1C             	-  movss xmm0,[esi+1C] // rm
F3 0F 10 8(E) F0 05 00 00  	-  movss xmm1,[esi+000005F0] //dmc
F3 0F 10 81 BC 03 00 00		-  movss xmm0,[ecx+000003BC] // alice
F3 0F 10 85 2C 0C 00 00  	-  movss xmm0,[ebp+00000C2C] // mirrors
"LifeIsStrange.exe"+7F8CC5: D9 1C 24                 -  fstp dword ptr [esp]
"LifeIsStrange.exe"+7F8CC8: E8 23 0E 00 00           -  call LifeIsStrange.exe+7F9AF0
"LifeIsStrange.exe"+7F8CCD: F3 0F 10 46 1C           -  movss xmm0,[esi+1C]
"LifeIsStrange.exe"+7F8CD2: F3 0F 59 46 10           -  mulss xmm0,[esi+10]
"LifeIsStrange.exe"+7F8CD7: 8B 0D D0 8B 43 02        -  mov ecx,[LifeIsStrange.exe+1208BD0]
"RememberMe.exe"+789DB5: D9 1C 24                 -  fstp dword ptr [esp]
"RememberMe.exe"+789DB8: E8 E3 8D FF FF           -  call RememberMe.exe+782BA0
"RememberMe.exe"+789DBD: F3 0F 10 46 1C           -  movss xmm0,[esi+1C]
"RememberMe.exe"+789DC2: F3 0F 59 46 10           -  mulss xmm0,[esi+10]
"RememberMe.exe"+789DC7: 8B 0D F0 77 4B 02        -  mov ecx,[RememberMe.exe+12477F0]
"DMC-DevilMayCry.exe"+A3D8C1: 55                       -  push ebp
"DMC-DevilMayCry.exe"+A3D8C2: E8 29 59 C8 FF           -  call DMC-DevilMayCry.exe+6C31F0
"DMC-DevilMayCry.exe"+A3D8C7: F3 0F 10 80 F0 05 00 00  -  movss xmm0,[eax+000005F0]
"DMC-DevilMayCry.exe"+A3D8CF: F3 0F 59 44 24 10        -  mulss xmm0,[esp+10]
"DMC-DevilMayCry.exe"+A3D8D5: EB 03                    -  jmp DMC-DevilMayCry.exe+A3D8DA
"AliceMadnessReturns.exe"+3CAA38: 74 27                    -  je AliceMadnessReturns.exe+3CAA61
"AliceMadnessReturns.exe"+3CAA3A: 8B 8E 70 04 00 00        -  mov ecx,[esi+00000470]
"AliceMadnessReturns.exe"+3CAA40: F3 0F 10 81 BC 03 00 00  -  movss xmm0,[ecx+000003BC]
"AliceMadnessReturns.exe"+3CAA48: F3 0F 59 45 EC           -  mulss xmm0,[ebp-14]
"AliceMadnessReturns.exe"+3CAA4D: 51                       -  push ecx
"MirrorsEdge.exe"+E29104: 8B 0D A4 BC FF 01        -  mov ecx,[MirrorsEdge.exe+1BFBCA4]
"MirrorsEdge.exe"+E2910A: E8 B1 91 95 FF           -  call MirrorsEdge.exe+7822C0
"MirrorsEdge.exe"+E2910F: F3 0F 10 80 2C 0C 00 00  -  movss xmm0,[eax+00000C2C]
"MirrorsEdge.exe"+E29117: F3 0F 59 86 74 01 00 00  -  mulss xmm0,[esi+00000174]
"MirrorsEdge.exe"+E2911F: F3 0F 11 86 74 01 00 00  -  movss [esi+00000174],xmm0
</Comments>
</CheatTable>
